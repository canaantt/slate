<h1 id="v1-5-2">v1.5.2</h1>

<ul>
<li>Allow using <code class="prettyprint">&quot;consructor&quot;</code> as an argument in <code class="prettyprint">memoize</code> (#998)</li>
<li>Give a better error messsage when <code class="prettyprint">auto</code> dependency checking fails (#994)</li>
<li>Various doc updates (#936, #956, #979, #1002)</li>
</ul>

<h1 id="v1-5-1">v1.5.1</h1>

<ul>
<li>Fix issue with <code class="prettyprint">pause</code> in <code class="prettyprint">queue</code> with concurrency enabled (#946)</li>
<li><code class="prettyprint">while</code> and <code class="prettyprint">until</code> now pass the final result to callback (#963)</li>
<li><code class="prettyprint">auto</code> will properly handle concurrency when there is no callback (#966)</li>
<li><code class="prettyprint">auto</code> will now  properly stop execution when an error occurs (#988, #993)</li>
<li>Various doc fixes (#971, #980)</li>
</ul>

<h1 id="v1-5-0">v1.5.0</h1>

<ul>
<li>Added <code class="prettyprint">transform</code>, analogous to <a href="http://lodash.com/docs#transform"><code class="prettyprint">_.transform</code></a> (#892)</li>
<li><code class="prettyprint">map</code> now returns an object when an object is passed in, rather than array with non-numeric keys. <code class="prettyprint">map</code> will begin always returning an array with numeric indexes in the next major release. (#873)</li>
<li><code class="prettyprint">auto</code> now accepts an optional <code class="prettyprint">concurrency</code> argument to limit the number of  running tasks (#637)</li>
<li>Added <code class="prettyprint">queue#workersList()</code>, to retrieve the list  of currently running tasks. (#891)</li>
<li>Various code simplifications (#896, #904)</li>
<li>Various doc fixes :scroll: (#890, #894, #903, #905, #912)</li>
</ul>

<h1 id="v1-4-2">v1.4.2</h1>

<ul>
<li>Ensure coverage files don&rsquo;t get published on npm (#879)</li>
</ul>

<h1 id="v1-4-1">v1.4.1</h1>

<ul>
<li>Add in overlooked <code class="prettyprint">detectLimit</code> method (#866)</li>
<li>Removed unnecessary files from npm releases (#861)</li>
<li>Removed usage of a reserved word to prevent :boom: in older environments (#870)</li>
</ul>

<h1 id="v1-4-0">v1.4.0</h1>

<ul>
<li><code class="prettyprint">asyncify</code> now supports promises (#840)</li>
<li>Added <code class="prettyprint">Limit</code> versions of <code class="prettyprint">filter</code> and <code class="prettyprint">reject</code> (#836)</li>
<li>Add <code class="prettyprint">Limit</code> versions of <code class="prettyprint">detect</code>, <code class="prettyprint">some</code> and <code class="prettyprint">every</code> (#828, #829)</li>
<li><code class="prettyprint">some</code>, <code class="prettyprint">every</code> and <code class="prettyprint">detect</code> now short circuit early (#828, #829)</li>
<li>Improve detection of the global object (#804), enabling use in WebWorkers</li>
<li><code class="prettyprint">whilst</code> now called with arguments from iterator (#823)</li>
<li><code class="prettyprint">during</code> now gets called with arguments from iterator (#824)</li>
<li>Code simplifications and optimizations aplenty (<a href="https://github.com/caolan/async/compare/v1.3.0...v1.4.0">diff</a>)</li>
</ul>

<h1 id="v1-3-0">v1.3.0</h1>

<p>New Features:
- Added <code class="prettyprint">constant</code>
- Added <code class="prettyprint">asyncify</code>/<code class="prettyprint">wrapSync</code> for making sync functions work with callbacks. (#671, #806)
- Added <code class="prettyprint">during</code> and <code class="prettyprint">doDuring</code>, which are like <code class="prettyprint">whilst</code> with an async truth test. (#800)
- <code class="prettyprint">retry</code> now accepts an <code class="prettyprint">interval</code> parameter to specify a delay between retries. (#793)
- <code class="prettyprint">async</code> should work better in Web Workers due to better <code class="prettyprint">root</code> detection (#804)
- Callbacks are now optional in <code class="prettyprint">whilst</code>, <code class="prettyprint">doWhilst</code>, <code class="prettyprint">until</code>, and <code class="prettyprint">doUntil</code> (#642)
- Various internal updates (#786, #801, #802, #803)
- Various doc fixes (#790, #794)</p>

<p>Bug Fixes:
- <code class="prettyprint">cargo</code> now exposes the <code class="prettyprint">payload</code> size, and <code class="prettyprint">cargo.payload</code> can be changed on the fly after the <code class="prettyprint">cargo</code> is created. (#740, #744, #783)</p>

<h1 id="v1-2-1">v1.2.1</h1>

<p>Bug Fix:</p>

<ul>
<li>Small regression with synchronous iterator behavior in <code class="prettyprint">eachSeries</code> with a 1-element array.  Before 1.1.0, <code class="prettyprint">eachSeries</code>&rsquo;s callback was called on the same tick, which this patch restores.  In 2.0.0, it will be called on the next tick.  (#782)</li>
</ul>

<h1 id="v1-2-0">v1.2.0</h1>

<p>New Features:</p>

<ul>
<li>Added <code class="prettyprint">timesLimit</code> (#743)</li>
<li><code class="prettyprint">concurrency</code> can be changed after initialization in <code class="prettyprint">queue</code> by setting <code class="prettyprint">q.concurrency</code>.  The new concurrency will be reflected the next time a task is processed. (#747, #772)</li>
</ul>

<p>Bug Fixes:</p>

<ul>
<li>Fixed a regression in <code class="prettyprint">each</code> and family with empty arrays that have additional properties. (#775, #777)</li>
</ul>

<h1 id="v1-1-1">v1.1.1</h1>

<p>Bug Fix:</p>

<ul>
<li>Small regression with synchronous iterator behavior in <code class="prettyprint">eachSeries</code> with a 1-element array.  Before 1.1.0, <code class="prettyprint">eachSeries</code>&rsquo;s callback was called on the same tick, which this patch restores.  In 2.0.0, it will be called on the next tick.  (#782) </li>
</ul>

<h1 id="v1-1-0">v1.1.0</h1>

<p>New Features:</p>

<ul>
<li><code class="prettyprint">cargo</code> now supports all of the same methods and event callbacks as <code class="prettyprint">queue</code>.</li>
<li>Added <code class="prettyprint">ensureAsync</code> - A wrapper that ensures an async function calls its callback on a later tick. (#769)</li>
<li>Optimized <code class="prettyprint">map</code>, <code class="prettyprint">eachOf</code>, and <code class="prettyprint">waterfall</code> families of functions</li>
<li>Passing a <code class="prettyprint">null</code> or <code class="prettyprint">undefined</code> array to <code class="prettyprint">map</code>, <code class="prettyprint">each</code>, <code class="prettyprint">parallel</code> and families will be treated as an empty array (#667).</li>
<li>The callback is now optional for the composed results of <code class="prettyprint">compose</code> and <code class="prettyprint">seq</code>. (#618)</li>
<li>Reduced file size by 4kb, (minified version by 1kb) </li>
<li>Added code coverage through <code class="prettyprint">nyc</code> and <code class="prettyprint">coveralls</code> (#768)</li>
</ul>

<p>Bug Fixes:</p>

<ul>
<li><code class="prettyprint">forever</code> will no longer stack overflow with a synchronous iterator (#622)</li>
<li><code class="prettyprint">eachLimit</code> and other limit functions will stop iterating once an error occurs (#754)</li>
<li>Always pass <code class="prettyprint">null</code> in callbacks when there is no error (#439)</li>
<li>Ensure proper conditions when calling <code class="prettyprint">drain()</code> after pushing an empty data set to a queue (#668)</li>
<li><code class="prettyprint">each</code> and family will properly handle an empty array (#578)</li>
<li><code class="prettyprint">eachSeries</code> and family will finish if the underlying array is modified during execution (#557)</li>
<li><code class="prettyprint">queue</code> will throw if a non-function is passed to <code class="prettyprint">q.push()</code> (#593)</li>
<li>Doc fixes (#629, #766)</li>
</ul>

<h1 id="v1-0-0">v1.0.0</h1>

<p>No known breaking changes, we are simply complying with semver from here on out.</p>

<p>Changes:</p>

<ul>
<li>Start using a changelog!</li>
<li>Add <code class="prettyprint">forEachOf</code> for iterating over Objects (or to iterate Arrays with indexes available) (#168 #704 #321)</li>
<li>Detect deadlocks in <code class="prettyprint">auto</code> (#663)</li>
<li>Better support for require.js (#527)</li>
<li>Throw if queue created with concurrency <code class="prettyprint">0</code> (#714)</li>
<li>Fix unneeded iteration in <code class="prettyprint">queue.resume()</code> (#758)</li>
<li>Guard against timer mocking overriding <code class="prettyprint">setImmediate</code> (#609 #611)</li>
<li>Miscellaneous doc fixes (#542 #596 #615 #628 #631 #690 #729)</li>
<li>Use single noop function internally (#546)</li>
<li>Optimize internal <code class="prettyprint">_each</code>, <code class="prettyprint">_map</code> and <code class="prettyprint">_keys</code> functions.</li>
</ul>
