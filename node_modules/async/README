<h1 id="async-js">Async.js</h1>

<p><a href="https://travis-ci.org/caolan/async"><img alt="Build Status via Travis CI" src="https://travis-ci.org/caolan/async.svg?branch=master" /></a>
<a href="https://www.npmjs.org/package/async"><img alt="NPM version" src="http://img.shields.io/npm/v/async.svg" /></a>
<a href="https://coveralls.io/r/caolan/async?branch=master"><img alt="Coverage Status" src="https://coveralls.io/repos/caolan/async/badge.svg?branch=master" /></a>
<a href="https://gitter.im/caolan/async?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge"><img alt="Join the chat at https://gitter.im/caolan/async" src="https://badges.gitter.im/Join%20Chat.svg" /></a></p>

<p>Async is a utility module which provides straight-forward, powerful functions
for working with asynchronous JavaScript. Although originally designed for
use with <a href="http://nodejs.org">Node.js</a> and installable via <code class="prettyprint">npm install async</code>,
it can also be used directly in the browser.</p>

<p>Async is also installable via:</p>

<ul>
<li><a href="http://bower.io/">bower</a>: <code class="prettyprint">bower install async</code></li>
<li><a href="https://github.com/component/component">component</a>: <code class="prettyprint">component install
caolan/async</code></li>
<li><a href="http://jamjs.org/">jam</a>: <code class="prettyprint">jam install async</code></li>
<li><a href="http://spmjs.io/">spm</a>: <code class="prettyprint">spm install async</code></li>
</ul>

<p>Async provides around 20 functions that include the usual &lsquo;functional&rsquo;
suspects (<code class="prettyprint">map</code>, <code class="prettyprint">reduce</code>, <code class="prettyprint">filter</code>, <code class="prettyprint">each</code>…) as well as some common patterns
for asynchronous control flow (<code class="prettyprint">parallel</code>, <code class="prettyprint">series</code>, <code class="prettyprint">waterfall</code>…). All these
functions assume you follow the Node.js convention of providing a single
callback as the last argument of your <code class="prettyprint">async</code> function.</p>

<h2 id="quick-examples">Quick Examples</h2>
<pre class="highlight javascript"><code><span class="nx">async</span><span class="p">.</span><span class="nx">map</span><span class="p">([</span><span class="s1">'file1'</span><span class="p">,</span><span class="s1">'file2'</span><span class="p">,</span><span class="s1">'file3'</span><span class="p">],</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">stat</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">results</span><span class="p">){</span>
    <span class="c1">// results is now an array of stats for each file</span>
<span class="p">});</span>

<span class="nx">async</span><span class="p">.</span><span class="nx">filter</span><span class="p">([</span><span class="s1">'file1'</span><span class="p">,</span><span class="s1">'file2'</span><span class="p">,</span><span class="s1">'file3'</span><span class="p">],</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">exists</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">){</span>
    <span class="c1">// results now equals an array of the existing files</span>
<span class="p">});</span>

<span class="nx">async</span><span class="p">.</span><span class="nx">parallel</span><span class="p">([</span>
    <span class="kd">function</span><span class="p">(){</span> <span class="p">...</span> <span class="p">},</span>
    <span class="kd">function</span><span class="p">(){</span> <span class="p">...</span> <span class="p">}</span>
<span class="p">],</span> <span class="nx">callback</span><span class="p">);</span>

<span class="nx">async</span><span class="p">.</span><span class="nx">series</span><span class="p">([</span>
    <span class="kd">function</span><span class="p">(){</span> <span class="p">...</span> <span class="p">},</span>
    <span class="kd">function</span><span class="p">(){</span> <span class="p">...</span> <span class="p">}</span>
<span class="p">]);</span>
</code></pre>

<p>There are many more functions available so take a look at the docs below for a
full list. This module aims to be comprehensive, so if you feel anything is
missing please create a GitHub issue for it.</p>

<h2 id="common-pitfalls-stackoverflow">Common Pitfalls <sub><a href="http://stackoverflow.com/questions/tagged/async.js">(StackOverflow)</a></sub></h2>

<h3 id="synchronous-iteration-functions">Synchronous iteration functions</h3>

<p>If you get an error like <code class="prettyprint">RangeError: Maximum call stack size exceeded.</code> or other stack overflow issues when using async, you are likely using a synchronous iterator.  By <em>synchronous</em> we mean a function that calls its callback on the same tick in the javascript event loop, without doing any I/O or using any timers.  Calling many callbacks iteratively will quickly overflow the stack. If you run into this issue, just defer your callback with <code class="prettyprint">async.setImmediate</code> to start a new call stack on the next tick of the event loop.</p>

<p>This can also arise by accident if you callback early in certain cases:</p>
<pre class="highlight javascript"><code><span class="nx">async</span><span class="p">.</span><span class="nx">eachSeries</span><span class="p">(</span><span class="nx">hugeArray</span><span class="p">,</span> <span class="kd">function</span> <span class="nx">iterator</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">inCache</span><span class="p">(</span><span class="nx">item</span><span class="p">))</span> <span class="p">{</span>
    <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">cache</span><span class="p">[</span><span class="nx">item</span><span class="p">]);</span> <span class="c1">// if many items are cached, you'll overflow</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">doSomeIO</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">callback</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">},</span> <span class="kd">function</span> <span class="nx">done</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">//...</span>
<span class="p">});</span>
</code></pre>

<p>Just change it to:</p>
<pre class="highlight javascript"><code><span class="nx">async</span><span class="p">.</span><span class="nx">eachSeries</span><span class="p">(</span><span class="nx">hugeArray</span><span class="p">,</span> <span class="kd">function</span> <span class="nx">iterator</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">inCache</span><span class="p">(</span><span class="nx">item</span><span class="p">))</span> <span class="p">{</span>
    <span class="nx">async</span><span class="p">.</span><span class="nx">setImmediate</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
      <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">cache</span><span class="p">[</span><span class="nx">item</span><span class="p">]);</span>
    <span class="p">});</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">doSomeIO</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">callback</span><span class="p">);</span>
  <span class="c1">//...</span>
</code></pre>

<p>Async guards against synchronous functions in some, but not all, cases.  If you are still running into stack overflows, you can defer as suggested above, or wrap functions with <a href="#ensureAsync"><code class="prettyprint">async.ensureAsync</code></a>  Functions that are asynchronous by their nature do not have this problem and don&rsquo;t need the extra callback deferral.</p>

<p>If JavaScript&rsquo;s event loop is still a bit nebulous, check out <a href="http://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/">this article</a> or <a href="http://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html">this talk</a> for more detailed information about how it works.</p>

<h3 id="multiple-callbacks">Multiple callbacks</h3>

<p>Make sure to always <code class="prettyprint">return</code> when calling a callback early, otherwise you will cause multiple callbacks and unpredictable behavior in many cases.</p>
<pre class="highlight javascript"><code><span class="nx">async</span><span class="p">.</span><span class="nx">waterfall</span><span class="p">([</span>
    <span class="kd">function</span> <span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">getSomething</span><span class="p">(</span><span class="nx">options</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">callback</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">"failed getting something:"</span> <span class="o">+</span> <span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">));</span>
            <span class="c1">// we should return here</span>
          <span class="p">}</span>
          <span class="c1">// since we did not return, this callback still will be called and</span>
          <span class="c1">// `processData` will be called twice</span>
          <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">result</span><span class="p">);</span>
        <span class="p">});</span>
    <span class="p">},</span>
    <span class="nx">processData</span>
<span class="p">],</span> <span class="nx">done</span><span class="p">)</span>
</code></pre>

<p>It is always good practice to <code class="prettyprint">return callback(err, result)</code>  whenever a callback call is not the last statement of a function.</p>

<h3 id="binding-a-context-to-an-iterator">Binding a context to an iterator</h3>

<p>This section is really about <code class="prettyprint">bind</code>, not about <code class="prettyprint">async</code>. If you are wondering how to
make <code class="prettyprint">async</code> execute your iterators in a given context, or are confused as to why
a method of another library isn&rsquo;t working as an iterator, study this example:</p>
<pre class="highlight javascript"><code><span class="c1">// Here is a simple object with an (unnecessarily roundabout) squaring method</span>
<span class="kd">var</span> <span class="nx">AsyncSquaringLibrary</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">squareExponent</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
  <span class="na">square</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">number</span><span class="p">,</span> <span class="nx">callback</span><span class="p">){</span>
    <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="nx">number</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">squareExponent</span><span class="p">);</span>
    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
      <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">result</span><span class="p">);</span>
    <span class="p">},</span> <span class="mi">200</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="nx">async</span><span class="p">.</span><span class="nx">map</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="nx">AsyncSquaringLibrary</span><span class="p">.</span><span class="nx">square</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">){</span>
  <span class="c1">// result is [NaN, NaN, NaN]</span>
  <span class="c1">// This fails because the `this.squareExponent` expression in the square</span>
  <span class="c1">// function is not evaluated in the context of AsyncSquaringLibrary, and is</span>
  <span class="c1">// therefore undefined.</span>
<span class="p">});</span>

<span class="nx">async</span><span class="p">.</span><span class="nx">map</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="nx">AsyncSquaringLibrary</span><span class="p">.</span><span class="nx">square</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">AsyncSquaringLibrary</span><span class="p">),</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">){</span>
  <span class="c1">// result is [1, 4, 9]</span>
  <span class="c1">// With the help of bind we can attach a context to the iterator before</span>
  <span class="c1">// passing it to async. Now the square function will be executed in its</span>
  <span class="c1">// 'home' AsyncSquaringLibrary context and the value of `this.squareExponent`</span>
  <span class="c1">// will be as expected.</span>
<span class="p">});</span>
</code></pre>

<h2 id="download">Download</h2>

<p>The source is available for download from
<a href="https://github.com/caolan/async/blob/master/lib/async.js">GitHub</a>.
Alternatively, you can install using Node Package Manager (<code class="prettyprint">npm</code>):</p>

<p>npm install async</p>

<p>As well as using Bower:</p>

<p>bower install async</p>

<p><strong>Development:</strong> <a href="https://github.com/caolan/async/raw/master/lib/async.js">async.js</a> - 29.6kb Uncompressed</p>

<h2 id="in-the-browser">In the Browser</h2>

<p>So far it&rsquo;s been tested in IE6, IE7, IE8, FF3.6 and Chrome 5.</p>

<p>Usage:</p>
<pre class="highlight html"><code><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"async.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span><span class="nt">&gt;</span>

    <span class="nx">async</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">asyncProcess</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">results</span><span class="p">){</span>
        <span class="nx">alert</span><span class="p">(</span><span class="nx">results</span><span class="p">);</span>
    <span class="p">});</span>

<span class="nt">&lt;/script&gt;</span>
</code></pre>

<h2 id="documentation">Documentation</h2>

<p>Some functions are also available in the following forms:
* <code class="prettyprint">&lt;name&gt;Series</code> - the same as <code class="prettyprint">&lt;name&gt;</code> but runs only a single async operation at a time
* <code class="prettyprint">&lt;name&gt;Limit</code> - the same as <code class="prettyprint">&lt;name&gt;</code> but runs a maximum of <code class="prettyprint">limit</code> async operations at a time</p>

<h3 id="collections">Collections</h3>

<ul>
<li><a href="#each"><code class="prettyprint">each</code></a>, <code class="prettyprint">eachSeries</code>, <code class="prettyprint">eachLimit</code></li>
<li><a href="#forEachOf"><code class="prettyprint">forEachOf</code></a>, <code class="prettyprint">forEachOfSeries</code>, <code class="prettyprint">forEachOfLimit</code></li>
<li><a href="#map"><code class="prettyprint">map</code></a>, <code class="prettyprint">mapSeries</code>, <code class="prettyprint">mapLimit</code></li>
<li><a href="#filter"><code class="prettyprint">filter</code></a>, <code class="prettyprint">filterSeries</code>, <code class="prettyprint">filterLimit</code></li>
<li><a href="#reject"><code class="prettyprint">reject</code></a>, <code class="prettyprint">rejectSeries</code>, <code class="prettyprint">rejectLimit</code></li>
<li><a href="#reduce"><code class="prettyprint">reduce</code></a>, <a href="#reduceRight"><code class="prettyprint">reduceRight</code></a></li>
<li><a href="#detect"><code class="prettyprint">detect</code></a>, <code class="prettyprint">detectSeries</code>, <code class="prettyprint">detectLimit</code></li>
<li><a href="#sortBy"><code class="prettyprint">sortBy</code></a></li>
<li><a href="#some"><code class="prettyprint">some</code></a>, <code class="prettyprint">someLimit</code></li>
<li><a href="#every"><code class="prettyprint">every</code></a>, <code class="prettyprint">everyLimit</code></li>
<li><a href="#concat"><code class="prettyprint">concat</code></a>, <code class="prettyprint">concatSeries</code></li>
</ul>

<h3 id="control-flow">Control Flow</h3>

<ul>
<li><a href="#seriestasks-callback"><code class="prettyprint">series</code></a></li>
<li><a href="#parallel"><code class="prettyprint">parallel</code></a>, <code class="prettyprint">parallelLimit</code></li>
<li><a href="#whilst"><code class="prettyprint">whilst</code></a>, <a href="#doWhilst"><code class="prettyprint">doWhilst</code></a></li>
<li><a href="#until"><code class="prettyprint">until</code></a>, <a href="#doUntil"><code class="prettyprint">doUntil</code></a></li>
<li><a href="#during"><code class="prettyprint">during</code></a>, <a href="#doDuring"><code class="prettyprint">doDuring</code></a></li>
<li><a href="#forever"><code class="prettyprint">forever</code></a></li>
<li><a href="#waterfall"><code class="prettyprint">waterfall</code></a></li>
<li><a href="#compose"><code class="prettyprint">compose</code></a></li>
<li><a href="#seq"><code class="prettyprint">seq</code></a></li>
<li><a href="#applyEach"><code class="prettyprint">applyEach</code></a>, <code class="prettyprint">applyEachSeries</code></li>
<li><a href="#queue"><code class="prettyprint">queue</code></a>, <a href="#priorityQueue"><code class="prettyprint">priorityQueue</code></a></li>
<li><a href="#cargo"><code class="prettyprint">cargo</code></a></li>
<li><a href="#auto"><code class="prettyprint">auto</code></a></li>
<li><a href="#retry"><code class="prettyprint">retry</code></a></li>
<li><a href="#iterator"><code class="prettyprint">iterator</code></a></li>
<li><a href="#times"><code class="prettyprint">times</code></a>, <code class="prettyprint">timesSeries</code>, <code class="prettyprint">timesLimit</code></li>
</ul>

<h3 id="utils">Utils</h3>

<ul>
<li><a href="#apply"><code class="prettyprint">apply</code></a></li>
<li><a href="#nextTick"><code class="prettyprint">nextTick</code></a></li>
<li><a href="#memoize"><code class="prettyprint">memoize</code></a></li>
<li><a href="#unmemoize"><code class="prettyprint">unmemoize</code></a></li>
<li><a href="#ensureAsync"><code class="prettyprint">ensureAsync</code></a></li>
<li><a href="#constant"><code class="prettyprint">constant</code></a></li>
<li><a href="#asyncify"><code class="prettyprint">asyncify</code></a></li>
<li><a href="#wrapSync"><code class="prettyprint">wrapSync</code></a></li>
<li><a href="#log"><code class="prettyprint">log</code></a></li>
<li><a href="#dir"><code class="prettyprint">dir</code></a></li>
<li><a href="#noConflict"><code class="prettyprint">noConflict</code></a></li>
</ul>

<h2 id="collections">Collections</h2>

<p><a name="forEach" />
<a name="each" /></p>

<h3 id="each-arr-iterator-callback">each(arr, iterator, [callback])</h3>

<p>Applies the function <code class="prettyprint">iterator</code> to each item in <code class="prettyprint">arr</code>, in parallel.
The <code class="prettyprint">iterator</code> is called with an item from the list, and a callback for when it
has finished. If the <code class="prettyprint">iterator</code> passes an error to its <code class="prettyprint">callback</code>, the main
<code class="prettyprint">callback</code> (for the <code class="prettyprint">each</code> function) is immediately called with the error.</p>

<p>Note, that since this function applies <code class="prettyprint">iterator</code> to each item in parallel,
there is no guarantee that the iterator functions will complete in order.</p>

<p><strong>Arguments</strong></p>

<ul>
<li><code class="prettyprint">arr</code> - An array to iterate over.</li>
<li><code class="prettyprint">iterator(item, callback)</code> - A function to apply to each item in <code class="prettyprint">arr</code>.
The iterator is passed a <code class="prettyprint">callback(err)</code> which must be called once it has
completed. If no error has occurred, the <code class="prettyprint">callback</code> should be run without
arguments or with an explicit <code class="prettyprint">null</code> argument.  The array index is not passed
to the iterator.  If you need the index, use <a href="#forEachOf"><code class="prettyprint">forEachOf</code></a>.</li>
<li><code class="prettyprint">callback(err)</code> - <em>Optional</em> A callback which is called when all <code class="prettyprint">iterator</code> functions
have finished, or an error occurs.</li>
</ul>

<p><strong>Examples</strong></p>
<pre class="highlight javascript"><code><span class="c1">// assuming openFiles is an array of file names and saveFile is a function</span>
<span class="c1">// to save the modified contents of that file:</span>

<span class="nx">async</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">openFiles</span><span class="p">,</span> <span class="nx">saveFile</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
    <span class="c1">// if any of the saves produced an error, err would equal that error</span>
<span class="p">});</span>
</code></pre>
<pre class="highlight javascript"><code><span class="c1">// assuming openFiles is an array of file names</span>

<span class="nx">async</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">openFiles</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>

  <span class="c1">// Perform operation on file here.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Processing file '</span> <span class="o">+</span> <span class="nx">file</span><span class="p">);</span>

  <span class="k">if</span><span class="p">(</span> <span class="nx">file</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">32</span> <span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'This file name is too long'</span><span class="p">);</span>
    <span class="nx">callback</span><span class="p">(</span><span class="s1">'File name too long'</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="c1">// Do work to process file here</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'File processed'</span><span class="p">);</span>
    <span class="nx">callback</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
    <span class="c1">// if any of the file processing produced an error, err would equal that error</span>
    <span class="k">if</span><span class="p">(</span> <span class="nx">err</span> <span class="p">)</span> <span class="p">{</span>
      <span class="c1">// One of the iterations produced an error.</span>
      <span class="c1">// All processing will now stop.</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'A file failed to process'</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'All files have been processed successfully'</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">});</span>
</code></pre>

<p><strong>Related</strong></p>

<ul>
<li>eachSeries(arr, iterator, [callback])</li>
<li>eachLimit(arr, limit, iterator, [callback])</li>
</ul>

<hr>

<p><a name="forEachOf" />
<a name="eachOf" /></p>

<h3 id="foreachof-obj-iterator-callback">forEachOf(obj, iterator, [callback])</h3>

<p>Like <code class="prettyprint">each</code>, except that it iterates over objects, and passes the key as the second argument to the iterator.</p>

<p><strong>Arguments</strong></p>

<ul>
<li><code class="prettyprint">obj</code> - An object or array to iterate over.</li>
<li><code class="prettyprint">iterator(item, key, callback)</code> - A function to apply to each item in <code class="prettyprint">obj</code>.
The <code class="prettyprint">key</code> is the item&rsquo;s key, or index in the case of an array. The iterator is
passed a <code class="prettyprint">callback(err)</code> which must be called once it has completed. If no
error has occurred, the callback should be run without arguments or with an
explicit <code class="prettyprint">null</code> argument.</li>
<li><code class="prettyprint">callback(err)</code> - <em>Optional</em> A callback which is called when all <code class="prettyprint">iterator</code> functions have finished, or an error occurs.</li>
</ul>

<p><strong>Example</strong></p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="na">dev</span><span class="p">:</span> <span class="s2">"/dev.json"</span><span class="p">,</span> <span class="na">test</span><span class="p">:</span> <span class="s2">"/test.json"</span><span class="p">,</span> <span class="na">prod</span><span class="p">:</span> <span class="s2">"/prod.json"</span><span class="p">};</span>
<span class="kd">var</span> <span class="nx">configs</span> <span class="o">=</span> <span class="p">{};</span>

<span class="nx">async</span><span class="p">.</span><span class="nx">forEachOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">__dirname</span> <span class="o">+</span> <span class="nx">value</span><span class="p">,</span> <span class="s2">"utf8"</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="nx">configs</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">callback</span><span class="p">();</span>
  <span class="p">})</span>
<span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
  <span class="c1">// configs is now a map of JSON data</span>
  <span class="nx">doSomethingWith</span><span class="p">(</span><span class="nx">configs</span><span class="p">);</span>
<span class="p">})</span>
</code></pre>

<p><strong>Related</strong></p>

<ul>
<li>forEachOfSeries(obj, iterator, [callback])</li>
<li>forEachOfLimit(obj, limit, iterator, [callback])</li>
</ul>

<hr>

<p><a name="map" /></p>

<h3 id="map-arr-iterator-callback">map(arr, iterator, [callback])</h3>

<p>Produces a new array of values by mapping each value in <code class="prettyprint">arr</code> through
the <code class="prettyprint">iterator</code> function. The <code class="prettyprint">iterator</code> is called with an item from <code class="prettyprint">arr</code> and a
callback for when it has finished processing. Each of these callback takes 2 arguments:
an <code class="prettyprint">error</code>, and the transformed item from <code class="prettyprint">arr</code>. If <code class="prettyprint">iterator</code> passes an error to its
callback, the main <code class="prettyprint">callback</code> (for the <code class="prettyprint">map</code> function) is immediately called with the error.</p>

<p>Note, that since this function applies the <code class="prettyprint">iterator</code> to each item in parallel,
there is no guarantee that the <code class="prettyprint">iterator</code> functions will complete in order.
However, the results array will be in the same order as the original <code class="prettyprint">arr</code>.</p>

<p><strong>Arguments</strong></p>

<ul>
<li><code class="prettyprint">arr</code> - An array to iterate over.</li>
<li><code class="prettyprint">iterator(item, callback)</code> - A function to apply to each item in <code class="prettyprint">arr</code>.
The iterator is passed a <code class="prettyprint">callback(err, transformed)</code> which must be called once
it has completed with an error (which can be <code class="prettyprint">null</code>) and a transformed item.</li>
<li><code class="prettyprint">callback(err, results)</code> - <em>Optional</em> A callback which is called when all <code class="prettyprint">iterator</code>
functions have finished, or an error occurs. Results is an array of the
transformed items from the <code class="prettyprint">arr</code>.</li>
</ul>

<p><strong>Example</strong></p>
<pre class="highlight javascript"><code><span class="nx">async</span><span class="p">.</span><span class="nx">map</span><span class="p">([</span><span class="s1">'file1'</span><span class="p">,</span><span class="s1">'file2'</span><span class="p">,</span><span class="s1">'file3'</span><span class="p">],</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">stat</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">results</span><span class="p">){</span>
    <span class="c1">// results is now an array of stats for each file</span>
<span class="p">});</span>
</code></pre>

<p><strong>Related</strong>
* mapSeries(arr, iterator, [callback])
* mapLimit(arr, limit, iterator, [callback])</p>

<hr>

<p><a name="select" />
<a name="filter" /></p>

<h3 id="filter-arr-iterator-callback">filter(arr, iterator, [callback])</h3>

<p><strong>Alias:</strong> <code class="prettyprint">select</code></p>

<p>Returns a new array of all the values in <code class="prettyprint">arr</code> which pass an async truth test.
<em>The callback for each <code class="prettyprint">iterator</code> call only accepts a single argument of <code class="prettyprint">true</code> or
<code class="prettyprint">false</code>; it does not accept an error argument first!</em> This is in-line with the
way node libraries work with truth tests like <code class="prettyprint">fs.exists</code>. This operation is
performed in parallel, but the results array will be in the same order as the
original.</p>

<p><strong>Arguments</strong></p>

<ul>
<li><code class="prettyprint">arr</code> - An array to iterate over.</li>
<li><code class="prettyprint">iterator(item, callback)</code> - A truth test to apply to each item in <code class="prettyprint">arr</code>.
The <code class="prettyprint">iterator</code> is passed a <code class="prettyprint">callback(truthValue)</code>, which must be called with a
boolean argument once it has completed.</li>
<li><code class="prettyprint">callback(results)</code> - <em>Optional</em> A callback which is called after all the <code class="prettyprint">iterator</code>
functions have finished.</li>
</ul>

<p><strong>Example</strong></p>
<pre class="highlight javascript"><code><span class="nx">async</span><span class="p">.</span><span class="nx">filter</span><span class="p">([</span><span class="s1">'file1'</span><span class="p">,</span><span class="s1">'file2'</span><span class="p">,</span><span class="s1">'file3'</span><span class="p">],</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">exists</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">){</span>
    <span class="c1">// results now equals an array of the existing files</span>
<span class="p">});</span>
</code></pre>

<p><strong>Related</strong></p>

<ul>
<li>filterSeries(arr, iterator, [callback])</li>
<li>filterLimit(arr, limit, iterator, [callback])</li>
</ul>

<hr>

<p><a name="reject" /></p>

<h3 id="reject-arr-iterator-callback">reject(arr, iterator, [callback])</h3>

<p>The opposite of <a href="#filter"><code class="prettyprint">filter</code></a>. Removes values that pass an <code class="prettyprint">async</code> truth test.</p>

<p><strong>Related</strong></p>

<ul>
<li>rejectSeries(arr, iterator, [callback])</li>
<li>rejectLimit(arr, limit, iterator, [callback])</li>
</ul>

<hr>

<p><a name="reduce" /></p>

<h3 id="reduce-arr-memo-iterator-callback">reduce(arr, memo, iterator, [callback])</h3>

<p><strong>Aliases:</strong> <code class="prettyprint">inject</code>, <code class="prettyprint">foldl</code></p>

<p>Reduces <code class="prettyprint">arr</code> into a single value using an async <code class="prettyprint">iterator</code> to return
each successive step. <code class="prettyprint">memo</code> is the initial state of the reduction.
This function only operates in series.</p>

<p>For performance reasons, it may make sense to split a call to this function into
a parallel map, and then use the normal <code class="prettyprint">Array.prototype.reduce</code> on the results.
This function is for situations where each step in the reduction needs to be async;
if you can get the data before reducing it, then it&rsquo;s probably a good idea to do so.</p>

<p><strong>Arguments</strong></p>

<ul>
<li><code class="prettyprint">arr</code> - An array to iterate over.</li>
<li><code class="prettyprint">memo</code> - The initial state of the reduction.</li>
<li><code class="prettyprint">iterator(memo, item, callback)</code> - A function applied to each item in the
array to produce the next step in the reduction. The <code class="prettyprint">iterator</code> is passed a
<code class="prettyprint">callback(err, reduction)</code> which accepts an optional error as its first
argument, and the state of the reduction as the second. If an error is
passed to the callback, the reduction is stopped and the main <code class="prettyprint">callback</code> is
immediately called with the error.</li>
<li><code class="prettyprint">callback(err, result)</code> - <em>Optional</em> A callback which is called after all the <code class="prettyprint">iterator</code>
functions have finished. Result is the reduced value.</li>
</ul>

<p><strong>Example</strong></p>
<pre class="highlight javascript"><code><span class="nx">async</span><span class="p">.</span><span class="nx">reduce</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span> <span class="mi">0</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">memo</span><span class="p">,</span> <span class="nx">item</span><span class="p">,</span> <span class="nx">callback</span><span class="p">){</span>
    <span class="c1">// pointless async:</span>
    <span class="nx">process</span><span class="p">.</span><span class="nx">nextTick</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
        <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">memo</span> <span class="o">+</span> <span class="nx">item</span><span class="p">)</span>
    <span class="p">});</span>
<span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">){</span>
    <span class="c1">// result is now equal to the last value of memo, which is 6</span>
<span class="p">});</span>
</code></pre>

<hr>

<p><a name="reduceRight" /></p>

<h3 id="reduceright-arr-memo-iterator-callback">reduceRight(arr, memo, iterator, [callback])</h3>

<p><strong>Alias:</strong> <code class="prettyprint">foldr</code></p>

<p>Same as <a href="#reduce"><code class="prettyprint">reduce</code></a>, only operates on <code class="prettyprint">arr</code> in reverse order.</p>

<hr>

<p><a name="detect" /></p>

<h3 id="detect-arr-iterator-callback">detect(arr, iterator, [callback])</h3>

<p>Returns the first value in <code class="prettyprint">arr</code> that passes an async truth test. The
<code class="prettyprint">iterator</code> is applied in parallel, meaning the first iterator to return <code class="prettyprint">true</code> will
fire the detect <code class="prettyprint">callback</code> with that result. That means the result might not be
the first item in the original <code class="prettyprint">arr</code> (in terms of order) that passes the test.</p>

<p>If order within the original <code class="prettyprint">arr</code> is important, then look at <a href="#detectSeries"><code class="prettyprint">detectSeries</code></a>.</p>

<p><strong>Arguments</strong></p>

<ul>
<li><code class="prettyprint">arr</code> - An array to iterate over.</li>
<li><code class="prettyprint">iterator(item, callback)</code> - A truth test to apply to each item in <code class="prettyprint">arr</code>.
The iterator is passed a <code class="prettyprint">callback(truthValue)</code> which must be called with a
boolean argument once it has completed. <strong>Note: this callback does not take an error as its first argument.</strong></li>
<li><code class="prettyprint">callback(result)</code> - <em>Optional</em> A callback which is called as soon as any iterator returns
<code class="prettyprint">true</code>, or after all the <code class="prettyprint">iterator</code> functions have finished. Result will be
the first item in the array that passes the truth test (iterator) or the
value <code class="prettyprint">undefined</code> if none passed.  <strong>Note: this callback does not take an error as its first argument.</strong></li>
</ul>

<p><strong>Example</strong></p>
<pre class="highlight javascript"><code><span class="nx">async</span><span class="p">.</span><span class="nx">detect</span><span class="p">([</span><span class="s1">'file1'</span><span class="p">,</span><span class="s1">'file2'</span><span class="p">,</span><span class="s1">'file3'</span><span class="p">],</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">exists</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">){</span>
    <span class="c1">// result now equals the first file in the list that exists</span>
<span class="p">});</span>
</code></pre>

<p><strong>Related</strong></p>

<ul>
<li>detectSeries(arr, iterator, [callback])</li>
<li>detectLimit(arr, limit, iterator, [callback])</li>
</ul>

<hr>

<p><a name="sortBy" /></p>

<h3 id="sortby-arr-iterator-callback">sortBy(arr, iterator, [callback])</h3>

<p>Sorts a list by the results of running each <code class="prettyprint">arr</code> value through an async <code class="prettyprint">iterator</code>.</p>

<p><strong>Arguments</strong></p>

<ul>
<li><code class="prettyprint">arr</code> - An array to iterate over.</li>
<li><code class="prettyprint">iterator(item, callback)</code> - A function to apply to each item in <code class="prettyprint">arr</code>.
The iterator is passed a <code class="prettyprint">callback(err, sortValue)</code> which must be called once it
has completed with an error (which can be <code class="prettyprint">null</code>) and a value to use as the sort
criteria.</li>
<li><code class="prettyprint">callback(err, results)</code> - <em>Optional</em> A callback which is called after all the <code class="prettyprint">iterator</code>
functions have finished, or an error occurs. Results is the items from
the original <code class="prettyprint">arr</code> sorted by the values returned by the <code class="prettyprint">iterator</code> calls.</li>
</ul>

<p><strong>Example</strong></p>
<pre class="highlight javascript"><code><span class="nx">async</span><span class="p">.</span><span class="nx">sortBy</span><span class="p">([</span><span class="s1">'file1'</span><span class="p">,</span><span class="s1">'file2'</span><span class="p">,</span><span class="s1">'file3'</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">callback</span><span class="p">){</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">stat</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">stats</span><span class="p">){</span>
        <span class="nx">callback</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">stats</span><span class="p">.</span><span class="nx">mtime</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">results</span><span class="p">){</span>
    <span class="c1">// results is now the original array of files sorted by</span>
    <span class="c1">// modified date</span>
<span class="p">});</span>
</code></pre>

<p><strong>Sort Order</strong></p>

<p>By modifying the callback parameter the sorting order can be influenced:</p>
<pre class="highlight javascript"><code><span class="c1">//ascending order</span>
<span class="nx">async</span><span class="p">.</span><span class="nx">sortBy</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">callback</span><span class="p">){</span>
    <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">x</span><span class="p">);</span>
<span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span><span class="nx">result</span><span class="p">){</span>
    <span class="c1">//result callback</span>
<span class="p">}</span> <span class="p">);</span>

<span class="c1">//descending order</span>
<span class="nx">async</span><span class="p">.</span><span class="nx">sortBy</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">callback</span><span class="p">){</span>
    <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">x</span><span class="o">*-</span><span class="mi">1</span><span class="p">);</span>    <span class="c1">//&lt;- x*-1 instead of x, turns the order around</span>
<span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span><span class="nx">result</span><span class="p">){</span>
    <span class="c1">//result callback</span>
<span class="p">}</span> <span class="p">);</span>
</code></pre>

<hr>

<p><a name="some" /></p>

<h3 id="some-arr-iterator-callback">some(arr, iterator, [callback])</h3>

<p><strong>Alias:</strong> <code class="prettyprint">any</code></p>

<p>Returns <code class="prettyprint">true</code> if at least one element in the <code class="prettyprint">arr</code> satisfies an async test.
<em>The callback for each iterator call only accepts a single argument of <code class="prettyprint">true</code> or
<code class="prettyprint">false</code>; it does not accept an error argument first!</em> This is in-line with the
way node libraries work with truth tests like <code class="prettyprint">fs.exists</code>. Once any iterator
call returns <code class="prettyprint">true</code>, the main <code class="prettyprint">callback</code> is immediately called.</p>

<p><strong>Arguments</strong></p>

<ul>
<li><code class="prettyprint">arr</code> - An array to iterate over.</li>
<li><code class="prettyprint">iterator(item, callback)</code> - A truth test to apply to each item in the array
in parallel. The iterator is passed a <code class="prettyprint">callback(truthValue)</code>` which must be
called with a boolean argument once it has completed.</li>
<li><code class="prettyprint">callback(result)</code> - <em>Optional</em> A callback which is called as soon as any iterator returns
<code class="prettyprint">true</code>, or after all the iterator functions have finished. Result will be
either <code class="prettyprint">true</code> or <code class="prettyprint">false</code> depending on the values of the async tests.</li>
</ul>

<p><strong>Note: the callbacks do not take an error as their first argument.</strong>
<strong>Example</strong></p>
<pre class="highlight javascript"><code><span class="nx">async</span><span class="p">.</span><span class="nx">some</span><span class="p">([</span><span class="s1">'file1'</span><span class="p">,</span><span class="s1">'file2'</span><span class="p">,</span><span class="s1">'file3'</span><span class="p">],</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">exists</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">){</span>
    <span class="c1">// if result is true then at least one of the files exists</span>
<span class="p">});</span>
</code></pre>

<p><strong>Related</strong></p>

<ul>
<li>someLimit(arr, limit, iterator, callback)</li>
</ul>

<hr>

<p><a name="every" /></p>

<h3 id="every-arr-iterator-callback">every(arr, iterator, [callback])</h3>

<p><strong>Alias:</strong> <code class="prettyprint">all</code></p>

<p>Returns <code class="prettyprint">true</code> if every element in <code class="prettyprint">arr</code> satisfies an async test.
<em>The callback for each <code class="prettyprint">iterator</code> call only accepts a single argument of <code class="prettyprint">true</code> or
<code class="prettyprint">false</code>; it does not accept an error argument first!</em> This is in-line with the
way node libraries work with truth tests like <code class="prettyprint">fs.exists</code>.</p>

<p><strong>Arguments</strong></p>

<ul>
<li><code class="prettyprint">arr</code> - An array to iterate over.</li>
<li><code class="prettyprint">iterator(item, callback)</code> - A truth test to apply to each item in the array
in parallel. The iterator is passed a <code class="prettyprint">callback(truthValue)</code> which must be
called with a  boolean argument once it has completed.</li>
<li><code class="prettyprint">callback(result)</code> - <em>Optional</em> A callback which is called as soon as any iterator returns
<code class="prettyprint">false</code>, or after all the iterator functions have finished. Result will be
either <code class="prettyprint">true</code> or <code class="prettyprint">false</code> depending on the values of the async tests.</li>
</ul>

<p><strong>Note: the callbacks do not take an error as their first argument.</strong></p>

<p><strong>Example</strong></p>
<pre class="highlight javascript"><code><span class="nx">async</span><span class="p">.</span><span class="nx">every</span><span class="p">([</span><span class="s1">'file1'</span><span class="p">,</span><span class="s1">'file2'</span><span class="p">,</span><span class="s1">'file3'</span><span class="p">],</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">exists</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">){</span>
    <span class="c1">// if result is true then every file exists</span>
<span class="p">});</span>
</code></pre>

<p><strong>Related</strong></p>

<ul>
<li>everyLimit(arr, limit, iterator, callback)</li>
</ul>

<hr>

<p><a name="concat" /></p>

<h3 id="concat-arr-iterator-callback">concat(arr, iterator, [callback])</h3>

<p>Applies <code class="prettyprint">iterator</code> to each item in <code class="prettyprint">arr</code>, concatenating the results. Returns the
concatenated list. The <code class="prettyprint">iterator</code>s are called in parallel, and the results are
concatenated as they return. There is no guarantee that the results array will
be returned in the original order of <code class="prettyprint">arr</code> passed to the <code class="prettyprint">iterator</code> function.</p>

<p><strong>Arguments</strong></p>

<ul>
<li><code class="prettyprint">arr</code> - An array to iterate over.</li>
<li><code class="prettyprint">iterator(item, callback)</code> - A function to apply to each item in <code class="prettyprint">arr</code>.
The iterator is passed a <code class="prettyprint">callback(err, results)</code> which must be called once it
has completed with an error (which can be <code class="prettyprint">null</code>) and an array of results.</li>
<li><code class="prettyprint">callback(err, results)</code> - <em>Optional</em> A callback which is called after all the <code class="prettyprint">iterator</code>
functions have finished, or an error occurs. Results is an array containing
the concatenated results of the <code class="prettyprint">iterator</code> function.</li>
</ul>

<p><strong>Example</strong></p>
<pre class="highlight javascript"><code><span class="nx">async</span><span class="p">.</span><span class="nx">concat</span><span class="p">([</span><span class="s1">'dir1'</span><span class="p">,</span><span class="s1">'dir2'</span><span class="p">,</span><span class="s1">'dir3'</span><span class="p">],</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readdir</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">files</span><span class="p">){</span>
    <span class="c1">// files is now a list of filenames that exist in the 3 directories</span>
<span class="p">});</span>
</code></pre>

<p><strong>Related</strong></p>

<ul>
<li>concatSeries(arr, iterator, [callback])</li>
</ul>

<h2 id="control-flow">Control Flow</h2>

<p><a name="series" /></p>

<h3 id="series-tasks-callback">series(tasks, [callback])</h3>

<p>Run the functions in the <code class="prettyprint">tasks</code> array in series, each one running once the previous
function has completed. If any functions in the series pass an error to its
callback, no more functions are run, and <code class="prettyprint">callback</code> is immediately called with the value of the error.
Otherwise, <code class="prettyprint">callback</code> receives an array of results when <code class="prettyprint">tasks</code> have completed.</p>

<p>It is also possible to use an object instead of an array. Each property will be
run as a function, and the results will be passed to the final <code class="prettyprint">callback</code> as an object
instead of an array. This can be a more readable way of handling results from
<a href="#series"><code class="prettyprint">series</code></a>.</p>

<p><strong>Note</strong> that while many implementations preserve the order of object properties, the
<a href="http://www.ecma-international.org/ecma-262/5.1/#sec-8.6">ECMAScript Language Specification</a>
explicitly states that</p>

<blockquote>
<p>The mechanics and order of enumerating the properties is not specified.</p>
</blockquote>

<p>So if you rely on the order in which your series of functions are executed, and want
this to work on all platforms, consider using an array.</p>

<p><strong>Arguments</strong></p>

<ul>
<li><code class="prettyprint">tasks</code> - An array or object containing functions to run, each function is passed
a <code class="prettyprint">callback(err, result)</code> it must call on completion with an error <code class="prettyprint">err</code> (which can
be <code class="prettyprint">null</code>) and an optional <code class="prettyprint">result</code> value.</li>
<li><code class="prettyprint">callback(err, results)</code> - An optional callback to run once all the functions
have completed. This function gets a results array (or object) containing all
the result arguments passed to the <code class="prettyprint">task</code> callbacks.</li>
</ul>

<p><strong>Example</strong></p>
<pre class="highlight javascript"><code><span class="nx">async</span><span class="p">.</span><span class="nx">series</span><span class="p">([</span>
    <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">){</span>
        <span class="c1">// do some stuff ...</span>
        <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s1">'one'</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">){</span>
        <span class="c1">// do some more stuff ...</span>
        <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s1">'two'</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">],</span>
<span class="c1">// optional callback</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">results</span><span class="p">){</span>
    <span class="c1">// results is now equal to ['one', 'two']</span>
<span class="p">});</span>


<span class="c1">// an example using an object instead of an array</span>
<span class="nx">async</span><span class="p">.</span><span class="nx">series</span><span class="p">({</span>
    <span class="na">one</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">){</span>
        <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
            <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
        <span class="p">},</span> <span class="mi">200</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="na">two</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">){</span>
        <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
            <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
        <span class="p">},</span> <span class="mi">100</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">},</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// results is now equal to: {one: 1, two: 2}</span>
<span class="p">});</span>
</code></pre>

<hr>

<p><a name="parallel" /></p>

<h3 id="parallel-tasks-callback">parallel(tasks, [callback])</h3>

<p>Run the <code class="prettyprint">tasks</code> array of functions in parallel, without waiting until the previous
function has completed. If any of the functions pass an error to its
callback, the main <code class="prettyprint">callback</code> is immediately called with the value of the error.
Once the <code class="prettyprint">tasks</code> have completed, the results are passed to the final <code class="prettyprint">callback</code> as an
array.</p>

<p><strong>Note:</strong> <code class="prettyprint">parallel</code> is about kicking-off I/O tasks in parallel, not about parallel execution of code.  If your tasks do not use any timers or perform any I/O, they will actually be executed in series.  Any synchronous setup sections for each task will happen one after the other.  JavaScript remains single-threaded.</p>

<p>It is also possible to use an object instead of an array. Each property will be
run as a function and the results will be passed to the final <code class="prettyprint">callback</code> as an object
instead of an array. This can be a more readable way of handling results from
<a href="#parallel"><code class="prettyprint">parallel</code></a>.</p>

<p><strong>Arguments</strong></p>

<ul>
<li><code class="prettyprint">tasks</code> - An array or object containing functions to run. Each function is passed
a <code class="prettyprint">callback(err, result)</code> which it must call on completion with an error <code class="prettyprint">err</code>
(which can be <code class="prettyprint">null</code>) and an optional <code class="prettyprint">result</code> value.</li>
<li><code class="prettyprint">callback(err, results)</code> - An optional callback to run once all the functions
have completed successfully. This function gets a results array (or object) containing all
the result arguments passed to the task callbacks.</li>
</ul>

<p><strong>Example</strong></p>
<pre class="highlight javascript"><code><span class="nx">async</span><span class="p">.</span><span class="nx">parallel</span><span class="p">([</span>
    <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">){</span>
        <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
            <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s1">'one'</span><span class="p">);</span>
        <span class="p">},</span> <span class="mi">200</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">){</span>
        <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
            <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s1">'two'</span><span class="p">);</span>
        <span class="p">},</span> <span class="mi">100</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">],</span>
<span class="c1">// optional callback</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">results</span><span class="p">){</span>
    <span class="c1">// the results array will equal ['one','two'] even though</span>
    <span class="c1">// the second function had a shorter timeout.</span>
<span class="p">});</span>


<span class="c1">// an example using an object instead of an array</span>
<span class="nx">async</span><span class="p">.</span><span class="nx">parallel</span><span class="p">({</span>
    <span class="na">one</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">){</span>
        <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
            <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
        <span class="p">},</span> <span class="mi">200</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="na">two</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">){</span>
        <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
            <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
        <span class="p">},</span> <span class="mi">100</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">},</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// results is now equals to: {one: 1, two: 2}</span>
<span class="p">});</span>
</code></pre>

<p><strong>Related</strong></p>

<ul>
<li>parallelLimit(tasks, limit, [callback])</li>
</ul>

<hr>

<p><a name="whilst" /></p>

<h3 id="whilst-test-fn-callback">whilst(test, fn, callback)</h3>

<p>Repeatedly call <code class="prettyprint">fn</code>, while <code class="prettyprint">test</code> returns <code class="prettyprint">true</code>. Calls <code class="prettyprint">callback</code> when stopped,
or an error occurs.</p>

<p><strong>Arguments</strong></p>

<ul>
<li><code class="prettyprint">test()</code> - synchronous truth test to perform before each execution of <code class="prettyprint">fn</code>.</li>
<li><code class="prettyprint">fn(callback)</code> - A function which is called each time <code class="prettyprint">test</code> passes. The function is
passed a <code class="prettyprint">callback(err)</code>, which must be called once it has completed with an
optional <code class="prettyprint">err</code> argument.</li>
<li><code class="prettyprint">callback(err, [results])</code> - A callback which is called after the test
function has failed and repeated execution of <code class="prettyprint">fn</code> has stopped. <code class="prettyprint">callback</code>
will be passed an error and any arguments passed to the final <code class="prettyprint">fn</code>&rsquo;s callback.</li>
</ul>

<p><strong>Example</strong></p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="nx">async</span><span class="p">.</span><span class="nx">whilst</span><span class="p">(</span>
    <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">count</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="p">},</span>
    <span class="kd">function</span> <span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">count</span><span class="o">++</span><span class="p">;</span>
        <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">count</span><span class="p">);</span>
        <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 5 seconds have passed, n = 5</span>
    <span class="p">}</span>
<span class="p">);</span>
</code></pre>

<hr>

<p><a name="doWhilst" /></p>

<h3 id="dowhilst-fn-test-callback">doWhilst(fn, test, callback)</h3>

<p>The post-check version of <a href="#whilst"><code class="prettyprint">whilst</code></a>. To reflect the difference in
the order of operations, the arguments <code class="prettyprint">test</code> and <code class="prettyprint">fn</code> are switched.</p>

<p><code class="prettyprint">doWhilst</code> is to <code class="prettyprint">whilst</code> as <code class="prettyprint">do while</code> is to <code class="prettyprint">while</code> in plain JavaScript.</p>

<hr>

<p><a name="until" /></p>

<h3 id="until-test-fn-callback">until(test, fn, callback)</h3>

<p>Repeatedly call <code class="prettyprint">fn</code> until <code class="prettyprint">test</code> returns <code class="prettyprint">true</code>. Calls <code class="prettyprint">callback</code> when stopped,
or an error occurs. <code class="prettyprint">callback</code> will be passed an error and any arguments passed
to the final <code class="prettyprint">fn</code>&rsquo;s callback.</p>

<p>The inverse of <a href="#whilst"><code class="prettyprint">whilst</code></a>.</p>

<hr>

<p><a name="doUntil" /></p>

<h3 id="dountil-fn-test-callback">doUntil(fn, test, callback)</h3>

<p>Like <a href="#doWhilst"><code class="prettyprint">doWhilst</code></a>, except the <code class="prettyprint">test</code> is inverted. Note the argument ordering differs from <code class="prettyprint">until</code>.</p>

<hr>

<p><a name="during" /></p>

<h3 id="during-test-fn-callback">during(test, fn, callback)</h3>

<p>Like <a href="#whilst"><code class="prettyprint">whilst</code></a>, except the <code class="prettyprint">test</code> is an asynchronous function that is passed a callback in the form of <code class="prettyprint">function (err, truth)</code>. If error is passed to <code class="prettyprint">test</code> or <code class="prettyprint">fn</code>, the main callback is immediately called with the value of the error.</p>

<p><strong>Example</strong></p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="nx">async</span><span class="p">.</span><span class="nx">during</span><span class="p">(</span>
    <span class="kd">function</span> <span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">count</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="kd">function</span> <span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">count</span><span class="o">++</span><span class="p">;</span>
        <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">callback</span><span class="p">,</span> <span class="mi">1000</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 5 seconds have passed</span>
    <span class="p">}</span>
<span class="p">);</span>
</code></pre>

<hr>

<p><a name="doDuring" /></p>

<h3 id="doduring-fn-test-callback">doDuring(fn, test, callback)</h3>

<p>The post-check version of <a href="#during"><code class="prettyprint">during</code></a>. To reflect the difference in
the order of operations, the arguments <code class="prettyprint">test</code> and <code class="prettyprint">fn</code> are switched.</p>

<p>Also a version of <a href="#doWhilst"><code class="prettyprint">doWhilst</code></a> with asynchronous <code class="prettyprint">test</code> function.</p>

<hr>

<p><a name="forever" /></p>

<h3 id="forever-fn-errback">forever(fn, [errback])</h3>

<p>Calls the asynchronous function <code class="prettyprint">fn</code> with a callback parameter that allows it to
call itself again, in series, indefinitely.</p>

<p>If an error is passed to the callback then <code class="prettyprint">errback</code> is called with the
error, and execution stops, otherwise it will never be called.</p>
<pre class="highlight javascript"><code><span class="nx">async</span><span class="p">.</span><span class="nx">forever</span><span class="p">(</span>
    <span class="kd">function</span><span class="p">(</span><span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// next is suitable for passing to things that need a callback(err [, whatever]);</span>
        <span class="c1">// it will result in this function being called again.</span>
    <span class="p">},</span>
    <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// if next is called with a value in its first parameter, it will appear</span>
        <span class="c1">// in here as 'err', and execution will stop.</span>
    <span class="p">}</span>
<span class="p">);</span>
</code></pre>

<hr>

<p><a name="waterfall" /></p>

<h3 id="waterfall-tasks-callback">waterfall(tasks, [callback])</h3>

<p>Runs the <code class="prettyprint">tasks</code> array of functions in series, each passing their results to the next in
the array. However, if any of the <code class="prettyprint">tasks</code> pass an error to their own callback, the
next function is not executed, and the main <code class="prettyprint">callback</code> is immediately called with
the error.</p>

<p><strong>Arguments</strong></p>

<ul>
<li><code class="prettyprint">tasks</code> - An array of functions to run, each function is passed a
<code class="prettyprint">callback(err, result1, result2, ...)</code> it must call on completion. The first
argument is an error (which can be <code class="prettyprint">null</code>) and any further arguments will be
passed as arguments in order to the next task.</li>
<li><code class="prettyprint">callback(err, [results])</code> - An optional callback to run once all the functions
have completed. This will be passed the results of the last task&rsquo;s callback.</li>
</ul>

<p><strong>Example</strong></p>
<pre class="highlight javascript"><code><span class="nx">async</span><span class="p">.</span><span class="nx">waterfall</span><span class="p">([</span>
    <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s1">'one'</span><span class="p">,</span> <span class="s1">'two'</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="kd">function</span><span class="p">(</span><span class="nx">arg1</span><span class="p">,</span> <span class="nx">arg2</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// arg1 now equals 'one' and arg2 now equals 'two'</span>
        <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s1">'three'</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="kd">function</span><span class="p">(</span><span class="nx">arg1</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// arg1 now equals 'three'</span>
        <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s1">'done'</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// result now equals 'done'</span>
<span class="p">});</span>
</code></pre>

<p>Or, with named functions:</p>
<pre class="highlight javascript"><code><span class="nx">async</span><span class="p">.</span><span class="nx">waterfall</span><span class="p">([</span>
    <span class="nx">myFirstFunction</span><span class="p">,</span>
    <span class="nx">mySecondFunction</span><span class="p">,</span>
    <span class="nx">myLastFunction</span><span class="p">,</span>
<span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// result now equals 'done'</span>
<span class="p">});</span>
<span class="kd">function</span> <span class="nx">myFirstFunction</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s1">'one'</span><span class="p">,</span> <span class="s1">'two'</span><span class="p">);</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">mySecondFunction</span><span class="p">(</span><span class="nx">arg1</span><span class="p">,</span> <span class="nx">arg2</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// arg1 now equals 'one' and arg2 now equals 'two'</span>
  <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s1">'three'</span><span class="p">);</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">myLastFunction</span><span class="p">(</span><span class="nx">arg1</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// arg1 now equals 'three'</span>
  <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s1">'done'</span><span class="p">);</span>
<span class="p">}</span>
</code></pre>

<p>Or, if you need to pass any argument to the first function:</p>
<pre class="highlight javascript"><code><span class="nx">async</span><span class="p">.</span><span class="nx">waterfall</span><span class="p">([</span>
    <span class="nx">async</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">myFirstFunction</span><span class="p">,</span> <span class="s1">'zero'</span><span class="p">),</span>
    <span class="nx">mySecondFunction</span><span class="p">,</span>
    <span class="nx">myLastFunction</span><span class="p">,</span>
<span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// result now equals 'done'</span>
<span class="p">});</span>
<span class="kd">function</span> <span class="nx">myFirstFunction</span><span class="p">(</span><span class="nx">arg1</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// arg1 now equals 'zero'</span>
  <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s1">'one'</span><span class="p">,</span> <span class="s1">'two'</span><span class="p">);</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">mySecondFunction</span><span class="p">(</span><span class="nx">arg1</span><span class="p">,</span> <span class="nx">arg2</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// arg1 now equals 'one' and arg2 now equals 'two'</span>
  <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s1">'three'</span><span class="p">);</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">myLastFunction</span><span class="p">(</span><span class="nx">arg1</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// arg1 now equals 'three'</span>
  <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s1">'done'</span><span class="p">);</span>
<span class="p">}</span>
</code></pre>

<hr>

<p><a name="compose" /></p>

<h3 id="compose-fn1-fn2">compose(fn1, fn2&hellip;)</h3>

<p>Creates a function which is a composition of the passed asynchronous
functions. Each function consumes the return value of the function that
follows. Composing functions <code class="prettyprint">f()</code>, <code class="prettyprint">g()</code>, and <code class="prettyprint">h()</code> would produce the result of
<code class="prettyprint">f(g(h()))</code>, only this version uses callbacks to obtain the return values.</p>

<p>Each function is executed with the <code class="prettyprint">this</code> binding of the composed function.</p>

<p><strong>Arguments</strong></p>

<ul>
<li><code class="prettyprint">functions...</code> - the asynchronous functions to compose</li>
</ul>

<p><strong>Example</strong></p>
<pre class="highlight javascript"><code><span class="kd">function</span> <span class="nx">add1</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">},</span> <span class="mi">10</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">mul3</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">n</span> <span class="o">*</span> <span class="mi">3</span><span class="p">);</span>
    <span class="p">},</span> <span class="mi">10</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">add1mul3</span> <span class="o">=</span> <span class="nx">async</span><span class="p">.</span><span class="nx">compose</span><span class="p">(</span><span class="nx">mul3</span><span class="p">,</span> <span class="nx">add1</span><span class="p">);</span>

<span class="nx">add1mul3</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
   <span class="c1">// result now equals 15</span>
<span class="p">});</span>
</code></pre>

<hr>

<p><a name="seq" /></p>

<h3 id="seq-fn1-fn2">seq(fn1, fn2&hellip;)</h3>

<p>Version of the compose function that is more natural to read.
Each function consumes the return value of the previous function.
It is the equivalent of <a href="#compose"><code class="prettyprint">compose</code></a> with the arguments reversed.</p>

<p>Each function is executed with the <code class="prettyprint">this</code> binding of the composed function.</p>

<p><strong>Arguments</strong></p>

<ul>
<li><code class="prettyprint">functions...</code> - the asynchronous functions to compose</li>
</ul>

<p><strong>Example</strong></p>
<pre class="highlight javascript"><code><span class="c1">// Requires lodash (or underscore), express3 and dresende's orm2.</span>
<span class="c1">// Part of an app, that fetches cats of the logged user.</span>
<span class="c1">// This example uses `seq` function to avoid overnesting and error</span>
<span class="c1">// handling clutter.</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'/cats'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">User</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">models</span><span class="p">.</span><span class="nx">User</span><span class="p">;</span>
  <span class="nx">async</span><span class="p">.</span><span class="nx">seq</span><span class="p">(</span>
    <span class="nx">_</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">User</span><span class="p">.</span><span class="nx">get</span><span class="p">,</span> <span class="nx">User</span><span class="p">),</span>  <span class="c1">// 'User.get' has signature (id, callback(err, data))</span>
    <span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">user</span><span class="p">.</span><span class="nx">getCats</span><span class="p">(</span><span class="nx">fn</span><span class="p">);</span>      <span class="c1">// 'getCats' has signature (callback(err, data))</span>
    <span class="p">}</span>
  <span class="p">)(</span><span class="nx">req</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nx">user_id</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">cats</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
      <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span> <span class="na">status</span><span class="p">:</span> <span class="s1">'error'</span><span class="p">,</span> <span class="na">message</span><span class="p">:</span> <span class="nx">err</span><span class="p">.</span><span class="nx">message</span> <span class="p">});</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span> <span class="na">status</span><span class="p">:</span> <span class="s1">'ok'</span><span class="p">,</span> <span class="na">message</span><span class="p">:</span> <span class="s1">'Cats found'</span><span class="p">,</span> <span class="na">data</span><span class="p">:</span> <span class="nx">cats</span> <span class="p">});</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre>

<hr>

<p><a name="applyEach" /></p>

<h3 id="applyeach-fns-args-callback">applyEach(fns, args&hellip;, callback)</h3>

<p>Applies the provided arguments to each function in the array, calling
<code class="prettyprint">callback</code> after all functions have completed. If you only provide the first
argument, then it will return a function which lets you pass in the
arguments as if it were a single function call.</p>

<p><strong>Arguments</strong></p>

<ul>
<li><code class="prettyprint">fns</code> - the asynchronous functions to all call with the same arguments</li>
<li><code class="prettyprint">args...</code> - any number of separate arguments to pass to the function</li>
<li><code class="prettyprint">callback</code> - the final argument should be the callback, called when all
functions have completed processing</li>
</ul>

<p><strong>Example</strong></p>
<pre class="highlight javascript"><code><span class="nx">async</span><span class="p">.</span><span class="nx">applyEach</span><span class="p">([</span><span class="nx">enableSearch</span><span class="p">,</span> <span class="nx">updateSchema</span><span class="p">],</span> <span class="s1">'bucket'</span><span class="p">,</span> <span class="nx">callback</span><span class="p">);</span>

<span class="c1">// partial application example:</span>
<span class="nx">async</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span>
    <span class="nx">buckets</span><span class="p">,</span>
    <span class="nx">async</span><span class="p">.</span><span class="nx">applyEach</span><span class="p">([</span><span class="nx">enableSearch</span><span class="p">,</span> <span class="nx">updateSchema</span><span class="p">]),</span>
    <span class="nx">callback</span>
<span class="p">);</span>
</code></pre>

<p><strong>Related</strong></p>

<ul>
<li>applyEachSeries(tasks, args&hellip;, [callback])</li>
</ul>

<hr>

<p><a name="queue" /></p>

<h3 id="queue-worker-concurrency">queue(worker, [concurrency])</h3>

<p>Creates a <code class="prettyprint">queue</code> object with the specified <code class="prettyprint">concurrency</code>. Tasks added to the
<code class="prettyprint">queue</code> are processed in parallel (up to the <code class="prettyprint">concurrency</code> limit). If all
<code class="prettyprint">worker</code>s are in progress, the task is queued until one becomes available.
Once a <code class="prettyprint">worker</code> completes a <code class="prettyprint">task</code>, that <code class="prettyprint">task</code>&rsquo;s callback is called.</p>

<p><strong>Arguments</strong></p>

<ul>
<li><code class="prettyprint">worker(task, callback)</code> - An asynchronous function for processing a queued
task, which must call its <code class="prettyprint">callback(err)</code> argument when finished, with an
optional <code class="prettyprint">error</code> as an argument.  If you want to handle errors from an individual task, pass a callback to <code class="prettyprint">q.push()</code>.</li>
<li><code class="prettyprint">concurrency</code> - An <code class="prettyprint">integer</code> for determining how many <code class="prettyprint">worker</code> functions should be
run in parallel.  If omitted, the concurrency defaults to <code class="prettyprint">1</code>.  If the concurrency is <code class="prettyprint">0</code>, an error is thrown.</li>
</ul>

<p><strong>Queue objects</strong></p>

<p>The <code class="prettyprint">queue</code> object returned by this function has the following properties and
methods:</p>

<ul>
<li><code class="prettyprint">length()</code> - a function returning the number of items waiting to be processed.</li>
<li><code class="prettyprint">started</code> - a function returning whether or not any items have been pushed and processed by the queue</li>
<li><code class="prettyprint">running()</code> - a function returning the number of items currently being processed.</li>
<li><code class="prettyprint">workersList()</code> - a function returning the array of items currently being processed.</li>
<li><code class="prettyprint">idle()</code> - a function returning false if there are items waiting or being processed, or true if not.</li>
<li><code class="prettyprint">concurrency</code> - an integer for determining how many <code class="prettyprint">worker</code> functions should be
run in parallel. This property can be changed after a <code class="prettyprint">queue</code> is created to
alter the concurrency on-the-fly.</li>
<li><code class="prettyprint">push(task, [callback])</code> - add a new task to the <code class="prettyprint">queue</code>. Calls <code class="prettyprint">callback</code> once
the <code class="prettyprint">worker</code> has finished processing the task. Instead of a single task, a <code class="prettyprint">tasks</code> array
can be submitted. The respective callback is used for every task in the list.</li>
<li><code class="prettyprint">unshift(task, [callback])</code> - add a new task to the front of the <code class="prettyprint">queue</code>.</li>
<li><code class="prettyprint">saturated</code> - a callback that is called when the <code class="prettyprint">queue</code> length hits the <code class="prettyprint">concurrency</code> limit,
and further tasks will be queued.</li>
<li><code class="prettyprint">empty</code> - a callback that is called when the last item from the <code class="prettyprint">queue</code> is given to a <code class="prettyprint">worker</code>.</li>
<li><code class="prettyprint">drain</code> - a callback that is called when the last item from the <code class="prettyprint">queue</code> has returned from the <code class="prettyprint">worker</code>.</li>
<li><code class="prettyprint">paused</code> - a boolean for determining whether the queue is in a paused state</li>
<li><code class="prettyprint">pause()</code> - a function that pauses the processing of tasks until <code class="prettyprint">resume()</code> is called.</li>
<li><code class="prettyprint">resume()</code> - a function that resumes the processing of queued tasks when the queue is paused.</li>
<li><code class="prettyprint">kill()</code> - a function that removes the <code class="prettyprint">drain</code> callback and empties remaining tasks from the queue forcing it to go idle.</li>
</ul>

<p><strong>Example</strong></p>
<pre class="highlight javascript"><code><span class="c1">// create a queue object with concurrency 2</span>

<span class="kd">var</span> <span class="nx">q</span> <span class="o">=</span> <span class="nx">async</span><span class="p">.</span><span class="nx">queue</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">task</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'hello '</span> <span class="o">+</span> <span class="nx">task</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
    <span class="nx">callback</span><span class="p">();</span>
<span class="p">},</span> <span class="mi">2</span><span class="p">);</span>


<span class="c1">// assign a callback</span>
<span class="nx">q</span><span class="p">.</span><span class="nx">drain</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'all items have been processed'</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// add some items to the queue</span>

<span class="nx">q</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="na">name</span><span class="p">:</span> <span class="s1">'foo'</span><span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'finished processing foo'</span><span class="p">);</span>
<span class="p">});</span>
<span class="nx">q</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="na">name</span><span class="p">:</span> <span class="s1">'bar'</span><span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'finished processing bar'</span><span class="p">);</span>
<span class="p">});</span>

<span class="c1">// add some items to the queue (batch-wise)</span>

<span class="nx">q</span><span class="p">.</span><span class="nx">push</span><span class="p">([{</span><span class="na">name</span><span class="p">:</span> <span class="s1">'baz'</span><span class="p">},{</span><span class="na">name</span><span class="p">:</span> <span class="s1">'bay'</span><span class="p">},{</span><span class="na">name</span><span class="p">:</span> <span class="s1">'bax'</span><span class="p">}],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'finished processing item'</span><span class="p">);</span>
<span class="p">});</span>

<span class="c1">// add some items to the front of the queue</span>

<span class="nx">q</span><span class="p">.</span><span class="nx">unshift</span><span class="p">({</span><span class="na">name</span><span class="p">:</span> <span class="s1">'bar'</span><span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'finished processing bar'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre>

<hr>

<p><a name="priorityQueue" /></p>

<h3 id="priorityqueue-worker-concurrency">priorityQueue(worker, concurrency)</h3>

<p>The same as <a href="#queue"><code class="prettyprint">queue</code></a> only tasks are assigned a priority and completed in ascending priority order. There are two differences between <code class="prettyprint">queue</code> and <code class="prettyprint">priorityQueue</code> objects:</p>

<ul>
<li><code class="prettyprint">push(task, priority, [callback])</code> - <code class="prettyprint">priority</code> should be a number. If an array of
<code class="prettyprint">tasks</code> is given, all tasks will be assigned the same priority.</li>
<li>The <code class="prettyprint">unshift</code> method was removed.</li>
</ul>

<hr>

<p><a name="cargo" /></p>

<h3 id="cargo-worker-payload">cargo(worker, [payload])</h3>

<p>Creates a <code class="prettyprint">cargo</code> object with the specified payload. Tasks added to the
cargo will be processed altogether (up to the <code class="prettyprint">payload</code> limit). If the
<code class="prettyprint">worker</code> is in progress, the task is queued until it becomes available. Once
the <code class="prettyprint">worker</code> has completed some tasks, each callback of those tasks is called.
Check out <a href="https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966">these</a> <a href="https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966">animations</a> for how <code class="prettyprint">cargo</code> and <code class="prettyprint">queue</code> work.</p>

<p>While <a href="#queue">queue</a> passes only one task to one of a group of workers
at a time, cargo passes an array of tasks to a single worker, repeating
when the worker is finished.</p>

<p><strong>Arguments</strong></p>

<ul>
<li><code class="prettyprint">worker(tasks, callback)</code> - An asynchronous function for processing an array of
queued tasks, which must call its <code class="prettyprint">callback(err)</code> argument when finished, with
an optional <code class="prettyprint">err</code> argument.</li>
<li><code class="prettyprint">payload</code> - An optional <code class="prettyprint">integer</code> for determining how many tasks should be
processed per round; if omitted, the default is unlimited.</li>
</ul>

<p><strong>Cargo objects</strong></p>

<p>The <code class="prettyprint">cargo</code> object returned by this function has the following properties and
methods:</p>

<ul>
<li><code class="prettyprint">length()</code> - A function returning the number of items waiting to be processed.</li>
<li><code class="prettyprint">payload</code> - An <code class="prettyprint">integer</code> for determining how many tasks should be
process per round. This property can be changed after a <code class="prettyprint">cargo</code> is created to
alter the payload on-the-fly.</li>
<li><code class="prettyprint">push(task, [callback])</code> - Adds <code class="prettyprint">task</code> to the <code class="prettyprint">queue</code>. The callback is called
once the <code class="prettyprint">worker</code> has finished processing the task. Instead of a single task, an array of <code class="prettyprint">tasks</code>
can be submitted. The respective callback is used for every task in the list.</li>
<li><code class="prettyprint">saturated</code> - A callback that is called when the <code class="prettyprint">queue.length()</code> hits the concurrency and further tasks will be queued.</li>
<li><code class="prettyprint">empty</code> - A callback that is called when the last item from the <code class="prettyprint">queue</code> is given to a <code class="prettyprint">worker</code>.</li>
<li><code class="prettyprint">drain</code> - A callback that is called when the last item from the <code class="prettyprint">queue</code> has returned from the <code class="prettyprint">worker</code>.</li>
<li><code class="prettyprint">idle()</code>, <code class="prettyprint">pause()</code>, <code class="prettyprint">resume()</code>, <code class="prettyprint">kill()</code> - cargo inherits all of the same methods and event calbacks as <a href="#queue"><code class="prettyprint">queue</code></a></li>
</ul>

<p><strong>Example</strong></p>
<pre class="highlight javascript"><code><span class="c1">// create a cargo object with payload 2</span>

<span class="kd">var</span> <span class="nx">cargo</span> <span class="o">=</span> <span class="nx">async</span><span class="p">.</span><span class="nx">cargo</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">tasks</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">tasks</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'hello '</span> <span class="o">+</span> <span class="nx">tasks</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">name</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">callback</span><span class="p">();</span>
<span class="p">},</span> <span class="mi">2</span><span class="p">);</span>


<span class="c1">// add some items</span>

<span class="nx">cargo</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="na">name</span><span class="p">:</span> <span class="s1">'foo'</span><span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'finished processing foo'</span><span class="p">);</span>
<span class="p">});</span>
<span class="nx">cargo</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="na">name</span><span class="p">:</span> <span class="s1">'bar'</span><span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'finished processing bar'</span><span class="p">);</span>
<span class="p">});</span>
<span class="nx">cargo</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="na">name</span><span class="p">:</span> <span class="s1">'baz'</span><span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'finished processing baz'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre>

<hr>

<p><a name="auto" /></p>

<h3 id="auto-tasks-concurrency-callback">auto(tasks, [concurrency], [callback])</h3>

<p>Determines the best order for running the functions in <code class="prettyprint">tasks</code>, based on their requirements. Each function can optionally depend on other functions being completed first, and each function is run as soon as its requirements are satisfied.</p>

<p>If any of the functions pass an error to their callback, the <code class="prettyprint">auto</code> sequence will stop. Further tasks will not execute (so any other functions depending on it will not run), and the main <code class="prettyprint">callback</code> is immediately called with the error.  Functions also receive an object containing the results of functions which have completed so far.</p>

<p>Note, all functions are called with a <code class="prettyprint">results</code> object as a second argument,
so it is unsafe to pass functions in the <code class="prettyprint">tasks</code> object which cannot handle the
extra argument.</p>

<p>For example, this snippet of code:</p>
<pre class="highlight javascript"><code><span class="nx">async</span><span class="p">.</span><span class="nx">auto</span><span class="p">({</span>
  <span class="na">readData</span><span class="p">:</span> <span class="nx">async</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">,</span> <span class="s1">'data.txt'</span><span class="p">,</span> <span class="s1">'utf-8'</span><span class="p">)</span>
<span class="p">},</span> <span class="nx">callback</span><span class="p">);</span>
</code></pre>

<p>will have the effect of calling <code class="prettyprint">readFile</code> with the results object as the last
argument, which will fail:</p>
<pre class="highlight javascript"><code><span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="s1">'data.txt'</span><span class="p">,</span> <span class="s1">'utf-8'</span><span class="p">,</span> <span class="nx">cb</span><span class="p">,</span> <span class="p">{});</span>
</code></pre>

<p>Instead, wrap the call to <code class="prettyprint">readFile</code> in a function which does not forward the
<code class="prettyprint">results</code> object:</p>
<pre class="highlight javascript"><code><span class="nx">async</span><span class="p">.</span><span class="nx">auto</span><span class="p">({</span>
  <span class="na">readData</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">cb</span><span class="p">,</span> <span class="nx">results</span><span class="p">){</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="s1">'data.txt'</span><span class="p">,</span> <span class="s1">'utf-8'</span><span class="p">,</span> <span class="nx">cb</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">},</span> <span class="nx">callback</span><span class="p">);</span>
</code></pre>

<p><strong>Arguments</strong></p>

<ul>
<li><code class="prettyprint">tasks</code> - An object. Each of its properties is either a function or an array of
requirements, with the function itself the last item in the array. The object&rsquo;s key
of a property serves as the name of the task defined by that property,
i.e. can be used when specifying requirements for other tasks.
The function receives two arguments: (1) a <code class="prettyprint">callback(err, result)</code> which must be
called when finished, passing an <code class="prettyprint">error</code> (which can be <code class="prettyprint">null</code>) and the result of
the function&rsquo;s execution, and (2) a <code class="prettyprint">results</code> object, containing the results of
the previously executed functions.</li>
<li><code class="prettyprint">concurrency</code> - An optional <code class="prettyprint">integer</code> for determining the maximum number of tasks that can be run in parallel. By default, as many as possible.</li>
<li><code class="prettyprint">callback(err, results)</code> - An optional callback which is called when all the
tasks have been completed. It receives the <code class="prettyprint">err</code> argument if any <code class="prettyprint">tasks</code>
pass an error to their callback. Results are always returned; however, if
an error occurs, no further <code class="prettyprint">tasks</code> will be performed, and the results
object will only contain partial results.</li>
</ul>

<p><strong>Example</strong></p>
<pre class="highlight javascript"><code><span class="nx">async</span><span class="p">.</span><span class="nx">auto</span><span class="p">({</span>
    <span class="na">get_data</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">){</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'in get_data'</span><span class="p">);</span>
        <span class="c1">// async code to get some data</span>
        <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s1">'data'</span><span class="p">,</span> <span class="s1">'converted to array'</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="na">make_folder</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">){</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'in make_folder'</span><span class="p">);</span>
        <span class="c1">// async code to create a directory to store a file in</span>
        <span class="c1">// this is run at the same time as getting the data</span>
        <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s1">'folder'</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="na">write_file</span><span class="p">:</span> <span class="p">[</span><span class="s1">'get_data'</span><span class="p">,</span> <span class="s1">'make_folder'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">,</span> <span class="nx">results</span><span class="p">){</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'in write_file'</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">results</span><span class="p">));</span>
        <span class="c1">// once there is some data and the directory exists,</span>
        <span class="c1">// write the data to a file in the directory</span>
        <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s1">'filename'</span><span class="p">);</span>
    <span class="p">}],</span>
    <span class="na">email_link</span><span class="p">:</span> <span class="p">[</span><span class="s1">'write_file'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">,</span> <span class="nx">results</span><span class="p">){</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'in email_link'</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">results</span><span class="p">));</span>
        <span class="c1">// once the file is written let's email a link to it...</span>
        <span class="c1">// results.write_file contains the filename returned by write_file.</span>
        <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="p">{</span><span class="s1">'file'</span><span class="p">:</span><span class="nx">results</span><span class="p">.</span><span class="nx">write_file</span><span class="p">,</span> <span class="s1">'email'</span><span class="p">:</span><span class="s1">'user@example.com'</span><span class="p">});</span>
    <span class="p">}]</span>
<span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'err = '</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'results = '</span><span class="p">,</span> <span class="nx">results</span><span class="p">);</span>
<span class="p">});</span>
</code></pre>

<p>This is a fairly trivial example, but to do this using the basic parallel and
series functions would look like this:</p>
<pre class="highlight javascript"><code><span class="nx">async</span><span class="p">.</span><span class="nx">parallel</span><span class="p">([</span>
    <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">){</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'in get_data'</span><span class="p">);</span>
        <span class="c1">// async code to get some data</span>
        <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s1">'data'</span><span class="p">,</span> <span class="s1">'converted to array'</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">){</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'in make_folder'</span><span class="p">);</span>
        <span class="c1">// async code to create a directory to store a file in</span>
        <span class="c1">// this is run at the same time as getting the data</span>
        <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s1">'folder'</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">],</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">results</span><span class="p">){</span>
    <span class="nx">async</span><span class="p">.</span><span class="nx">series</span><span class="p">([</span>
        <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">){</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'in write_file'</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">results</span><span class="p">));</span>
            <span class="c1">// once there is some data and the directory exists,</span>
            <span class="c1">// write the data to a file in the directory</span>
            <span class="nx">results</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">'filename'</span><span class="p">);</span>
            <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
        <span class="p">},</span>
        <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">){</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'in email_link'</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">results</span><span class="p">));</span>
            <span class="c1">// once the file is written let's email a link to it...</span>
            <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="p">{</span><span class="s1">'file'</span><span class="p">:</span><span class="nx">results</span><span class="p">.</span><span class="nx">pop</span><span class="p">(),</span> <span class="s1">'email'</span><span class="p">:</span><span class="s1">'user@example.com'</span><span class="p">});</span>
        <span class="p">}</span>
    <span class="p">]);</span>
<span class="p">});</span>
</code></pre>

<p>For a complicated series of <code class="prettyprint">async</code> tasks, using the <a href="#auto"><code class="prettyprint">auto</code></a> function makes adding
new tasks much easier (and the code more readable).</p>

<hr>

<p><a name="retry" /></p>

<h3 id="retry-opts-times-5-interval-0-5-task-callback">retry([opts = {times: 5, interval: 0}| 5], task, [callback])</h3>

<p>Attempts to get a successful response from <code class="prettyprint">task</code> no more than <code class="prettyprint">times</code> times before
returning an error. If the task is successful, the <code class="prettyprint">callback</code> will be passed the result
of the successful task. If all attempts fail, the callback will be passed the error and
result (if any) of the final attempt.</p>

<p><strong>Arguments</strong></p>

<ul>
<li><code class="prettyprint">opts</code> - Can be either an object with <code class="prettyprint">times</code> and <code class="prettyprint">interval</code> or a number.

<ul>
<li><code class="prettyprint">times</code> - The number of attempts to make before giving up.  The default is <code class="prettyprint">5</code>.</li>
<li><code class="prettyprint">interval</code> - The time to wait between retries, in milliseconds.  The default is <code class="prettyprint">0</code>.</li>
<li>If <code class="prettyprint">opts</code> is a number, the number specifies the number of times to retry, with the default interval of <code class="prettyprint">0</code>. </li>
</ul></li>
<li><code class="prettyprint">task(callback, results)</code> - A function which receives two arguments: (1) a <code class="prettyprint">callback(err, result)</code>
which must be called when finished, passing <code class="prettyprint">err</code> (which can be <code class="prettyprint">null</code>) and the <code class="prettyprint">result</code> of
the function&rsquo;s execution, and (2) a <code class="prettyprint">results</code> object, containing the results of
the previously executed functions (if nested inside another control flow).</li>
<li><code class="prettyprint">callback(err, results)</code> - An optional callback which is called when the
task has succeeded, or after the final failed attempt. It receives the <code class="prettyprint">err</code> and <code class="prettyprint">result</code> arguments of the last attempt at completing the <code class="prettyprint">task</code>.</li>
</ul>

<p>The <a href="#retry"><code class="prettyprint">retry</code></a> function can be used as a stand-alone control flow by passing a callback, as shown below:</p>
<pre class="highlight javascript"><code><span class="c1">// try calling apiMethod 3 times</span>
<span class="nx">async</span><span class="p">.</span><span class="nx">retry</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="nx">apiMethod</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// do something with the result</span>
<span class="p">});</span>
</code></pre>
<pre class="highlight javascript"><code><span class="c1">// try calling apiMethod 3 times, waiting 200 ms between each retry </span>
<span class="nx">async</span><span class="p">.</span><span class="nx">retry</span><span class="p">({</span><span class="na">times</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="na">interval</span><span class="p">:</span> <span class="mi">200</span><span class="p">},</span> <span class="nx">apiMethod</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// do something with the result</span>
<span class="p">});</span>
</code></pre>
<pre class="highlight javascript"><code><span class="c1">// try calling apiMethod the default 5 times no delay between each retry </span>
<span class="nx">async</span><span class="p">.</span><span class="nx">retry</span><span class="p">(</span><span class="nx">apiMethod</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// do something with the result</span>
<span class="p">});</span>
</code></pre>

<p>It can also be embedded within other control flow functions to retry individual methods
that are not as reliable, like this:</p>
<pre class="highlight javascript"><code><span class="nx">async</span><span class="p">.</span><span class="nx">auto</span><span class="p">({</span>
    <span class="na">users</span><span class="p">:</span> <span class="nx">api</span><span class="p">.</span><span class="nx">getUsers</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">api</span><span class="p">),</span>
    <span class="na">payments</span><span class="p">:</span> <span class="nx">async</span><span class="p">.</span><span class="nx">retry</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="nx">api</span><span class="p">.</span><span class="nx">getPayments</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">api</span><span class="p">))</span>
<span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// do something with the results</span>
<span class="p">});</span>
</code></pre>

<hr>

<p><a name="iterator" /></p>

<h3 id="iterator-tasks">iterator(tasks)</h3>

<p>Creates an iterator function which calls the next function in the <code class="prettyprint">tasks</code> array,
returning a continuation to call the next one after that. It&rsquo;s also possible to
“peek” at the next iterator with <code class="prettyprint">iterator.next()</code>.</p>

<p>This function is used internally by the <code class="prettyprint">async</code> module, but can be useful when
you want to manually control the flow of functions in series.</p>

<p><strong>Arguments</strong></p>

<ul>
<li><code class="prettyprint">tasks</code> - An array of functions to run.</li>
</ul>

<p><strong>Example</strong></p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">iterator</span> <span class="o">=</span> <span class="nx">async</span><span class="p">.</span><span class="nx">iterator</span><span class="p">([</span>
    <span class="kd">function</span><span class="p">(){</span> <span class="nx">sys</span><span class="p">.</span><span class="nx">p</span><span class="p">(</span><span class="s1">'one'</span><span class="p">);</span> <span class="p">},</span>
    <span class="kd">function</span><span class="p">(){</span> <span class="nx">sys</span><span class="p">.</span><span class="nx">p</span><span class="p">(</span><span class="s1">'two'</span><span class="p">);</span> <span class="p">},</span>
    <span class="kd">function</span><span class="p">(){</span> <span class="nx">sys</span><span class="p">.</span><span class="nx">p</span><span class="p">(</span><span class="s1">'three'</span><span class="p">);</span> <span class="p">}</span>
<span class="p">]);</span>

<span class="nx">node</span><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">iterator2</span> <span class="o">=</span> <span class="nx">iterator</span><span class="p">();</span>
<span class="s1">'one'</span>
<span class="nx">node</span><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">iterator3</span> <span class="o">=</span> <span class="nx">iterator2</span><span class="p">();</span>
<span class="s1">'two'</span>
<span class="nx">node</span><span class="o">&gt;</span> <span class="nx">iterator3</span><span class="p">();</span>
<span class="s1">'three'</span>
<span class="nx">node</span><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">nextfn</span> <span class="o">=</span> <span class="nx">iterator2</span><span class="p">.</span><span class="nx">next</span><span class="p">();</span>
<span class="nx">node</span><span class="o">&gt;</span> <span class="nx">nextfn</span><span class="p">();</span>
<span class="s1">'three'</span>
</code></pre>

<hr>

<p><a name="apply" /></p>

<h3 id="apply-function-arguments">apply(function, arguments..)</h3>

<p>Creates a continuation function with some arguments already applied.</p>

<p>Useful as a shorthand when combined with other control flow functions. Any arguments
passed to the returned function are added to the arguments originally passed
to apply.</p>

<p><strong>Arguments</strong></p>

<ul>
<li><code class="prettyprint">function</code> - The function you want to eventually apply all arguments to.</li>
<li><code class="prettyprint">arguments...</code> - Any number of arguments to automatically apply when the
continuation is called.</li>
</ul>

<p><strong>Example</strong></p>
<pre class="highlight javascript"><code><span class="c1">// using apply</span>

<span class="nx">async</span><span class="p">.</span><span class="nx">parallel</span><span class="p">([</span>
    <span class="nx">async</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">,</span> <span class="s1">'testfile1'</span><span class="p">,</span> <span class="s1">'test1'</span><span class="p">),</span>
    <span class="nx">async</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">,</span> <span class="s1">'testfile2'</span><span class="p">,</span> <span class="s1">'test2'</span><span class="p">),</span>
<span class="p">]);</span>


<span class="c1">// the same process without using apply</span>

<span class="nx">async</span><span class="p">.</span><span class="nx">parallel</span><span class="p">([</span>
    <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">){</span>
        <span class="nx">fs</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="s1">'testfile1'</span><span class="p">,</span> <span class="s1">'test1'</span><span class="p">,</span> <span class="nx">callback</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">){</span>
        <span class="nx">fs</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="s1">'testfile2'</span><span class="p">,</span> <span class="s1">'test2'</span><span class="p">,</span> <span class="nx">callback</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">]);</span>
</code></pre>

<p>It&rsquo;s possible to pass any number of additional arguments when calling the
continuation:</p>
<pre class="highlight javascript"><code><span class="nx">node</span><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">fn</span> <span class="o">=</span> <span class="nx">async</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">sys</span><span class="p">.</span><span class="nx">puts</span><span class="p">,</span> <span class="s1">'one'</span><span class="p">);</span>
<span class="nx">node</span><span class="o">&gt;</span> <span class="nx">fn</span><span class="p">(</span><span class="s1">'two'</span><span class="p">,</span> <span class="s1">'three'</span><span class="p">);</span>
<span class="nx">one</span>
<span class="nx">two</span>
<span class="nx">three</span>
</code></pre>

<hr>

<p><a name="nextTick" /></p>

<h3 id="nexttick-callback-setimmediate-callback">nextTick(callback), setImmediate(callback)</h3>

<p>Calls <code class="prettyprint">callback</code> on a later loop around the event loop. In Node.js this just
calls <code class="prettyprint">process.nextTick</code>; in the browser it falls back to <code class="prettyprint">setImmediate(callback)</code>
if available, otherwise <code class="prettyprint">setTimeout(callback, 0)</code>, which means other higher priority
events may precede the execution of <code class="prettyprint">callback</code>.</p>

<p>This is used internally for browser-compatibility purposes.</p>

<p><strong>Arguments</strong></p>

<ul>
<li><code class="prettyprint">callback</code> - The function to call on a later loop around the event loop.</li>
</ul>

<p><strong>Example</strong></p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">call_order</span> <span class="o">=</span> <span class="p">[];</span>
<span class="nx">async</span><span class="p">.</span><span class="nx">nextTick</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
    <span class="nx">call_order</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">'two'</span><span class="p">);</span>
    <span class="c1">// call_order now equals ['one','two']</span>
<span class="p">});</span>
<span class="nx">call_order</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">'one'</span><span class="p">)</span>
</code></pre>

<p><a name="times" /></p>

<h3 id="times-n-iterator-callback">times(n, iterator, [callback])</h3>

<p>Calls the <code class="prettyprint">iterator</code> function <code class="prettyprint">n</code> times, and accumulates results in the same manner
you would use with <a href="#map"><code class="prettyprint">map</code></a>.</p>

<p><strong>Arguments</strong></p>

<ul>
<li><code class="prettyprint">n</code> - The number of times to run the function.</li>
<li><code class="prettyprint">iterator</code> - The function to call <code class="prettyprint">n</code> times.</li>
<li><code class="prettyprint">callback</code> - see <a href="#map"><code class="prettyprint">map</code></a></li>
</ul>

<p><strong>Example</strong></p>
<pre class="highlight javascript"><code><span class="c1">// Pretend this is some complicated async factory</span>
<span class="kd">var</span> <span class="nx">createUser</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">id</span><span class="p">:</span> <span class="s1">'user'</span> <span class="o">+</span> <span class="nx">id</span>
  <span class="p">})</span>
<span class="p">}</span>
<span class="c1">// generate 5 users</span>
<span class="nx">async</span><span class="p">.</span><span class="nx">times</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">next</span><span class="p">){</span>
    <span class="nx">createUser</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">next</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">user</span><span class="p">)</span>
    <span class="p">})</span>
<span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">users</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// we should now have 5 users</span>
<span class="p">});</span>
</code></pre>

<p><strong>Related</strong></p>

<ul>
<li>timesSeries(n, iterator, [callback])</li>
<li>timesLimit(n, limit, iterator, [callback])</li>
</ul>

<h2 id="utils">Utils</h2>

<p><a name="memoize" /></p>

<h3 id="memoize-fn-hasher">memoize(fn, [hasher])</h3>

<p>Caches the results of an <code class="prettyprint">async</code> function. When creating a hash to store function
results against, the callback is omitted from the hash and an optional hash
function can be used.</p>

<p>If no hash function is specified, the first argument is used as a hash key, which may work reasonably if it is a string or a data type that converts to a distinct string. Note that objects and arrays will not behave reasonably. Neither will cases where the other arguments are significant. In such cases, specify your own hash function.</p>

<p>The cache of results is exposed as the <code class="prettyprint">memo</code> property of the function returned
by <code class="prettyprint">memoize</code>.</p>

<p><strong>Arguments</strong></p>

<ul>
<li><code class="prettyprint">fn</code> - The function to proxy and cache results from.</li>
<li><code class="prettyprint">hasher</code> - An optional function for generating a custom hash for storing
results. It has all the arguments applied to it apart from the callback, and
must be synchronous.</li>
</ul>

<p><strong>Example</strong></p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">slow_fn</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// do something</span>
    <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">result</span><span class="p">);</span>
<span class="p">};</span>
<span class="kd">var</span> <span class="nx">fn</span> <span class="o">=</span> <span class="nx">async</span><span class="p">.</span><span class="nx">memoize</span><span class="p">(</span><span class="nx">slow_fn</span><span class="p">);</span>

<span class="c1">// fn can now be used as if it were slow_fn</span>
<span class="nx">fn</span><span class="p">(</span><span class="s1">'some name'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="c1">// callback</span>
<span class="p">});</span>
</code></pre>

<p><a name="unmemoize" /></p>

<h3 id="unmemoize-fn">unmemoize(fn)</h3>

<p>Undoes a <a href="#memoize"><code class="prettyprint">memoize</code></a>d function, reverting it to the original, unmemoized
form. Handy for testing.</p>

<p><strong>Arguments</strong></p>

<ul>
<li><code class="prettyprint">fn</code> - the memoized function</li>
</ul>

<hr>

<p><a name="ensureAsync" /></p>

<h3 id="ensureasync-fn">ensureAsync(fn)</h3>

<p>Wrap an async function and ensure it calls its callback on a later tick of the event loop.  If the function already calls its callback on a next tick, no extra deferral is added. This is useful for preventing stack overflows (<code class="prettyprint">RangeError: Maximum call stack size exceeded</code>) and generally keeping <a href="http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony">Zalgo</a> contained.</p>

<p><strong>Arguments</strong></p>

<ul>
<li><code class="prettyprint">fn</code> - an async function, one that expects a node-style callback as its last argument</li>
</ul>

<p>Returns a wrapped function with the exact same call signature as the function passed in.</p>

<p><strong>Example</strong></p>
<pre class="highlight javascript"><code><span class="kd">function</span> <span class="nx">sometimesAsync</span><span class="p">(</span><span class="nx">arg</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">cache</span><span class="p">[</span><span class="nx">arg</span><span class="p">])</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">cache</span><span class="p">[</span><span class="nx">arg</span><span class="p">]);</span> <span class="c1">// this would be synchronous!!</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">doSomeIO</span><span class="p">(</span><span class="nx">arg</span><span class="p">,</span> <span class="nx">callback</span><span class="p">);</span> <span class="c1">// this IO would be asynchronous</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// this has a risk of stack overflows if many results are cached in a row</span>
<span class="nx">async</span><span class="p">.</span><span class="nx">mapSeries</span><span class="p">(</span><span class="nx">args</span><span class="p">,</span> <span class="nx">sometimesAsync</span><span class="p">,</span> <span class="nx">done</span><span class="p">);</span>

<span class="c1">// this will defer sometimesAsync's callback if necessary,</span>
<span class="c1">// preventing stack overflows</span>
<span class="nx">async</span><span class="p">.</span><span class="nx">mapSeries</span><span class="p">(</span><span class="nx">args</span><span class="p">,</span> <span class="nx">async</span><span class="p">.</span><span class="nx">ensureAsync</span><span class="p">(</span><span class="nx">sometimesAsync</span><span class="p">),</span> <span class="nx">done</span><span class="p">);</span>

</code></pre>

<hr>

<p><a name="constant"></p>

<h3 id="constant-values">constant(values&hellip;)</h3>

<p>Returns a function that when called, calls-back with the values provided.  Useful as the first function in a <code class="prettyprint">waterfall</code>, or for plugging values in to <code class="prettyprint">auto</code>.</p>

<p><strong>Example</strong></p>
<pre class="highlight javascript"><code><span class="nx">async</span><span class="p">.</span><span class="nx">waterfall</span><span class="p">([</span>
  <span class="nx">async</span><span class="p">.</span><span class="nx">constant</span><span class="p">(</span><span class="mi">42</span><span class="p">),</span>
  <span class="kd">function</span> <span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// value === 42</span>
  <span class="p">},</span>
  <span class="c1">//...</span>
<span class="p">],</span> <span class="nx">callback</span><span class="p">);</span>

<span class="nx">async</span><span class="p">.</span><span class="nx">waterfall</span><span class="p">([</span>
  <span class="nx">async</span><span class="p">.</span><span class="nx">constant</span><span class="p">(</span><span class="nx">filename</span><span class="p">,</span> <span class="s2">"utf8"</span><span class="p">),</span>
  <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">,</span>
  <span class="kd">function</span> <span class="p">(</span><span class="nx">fileData</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//...</span>
  <span class="p">}</span>
  <span class="c1">//...</span>
<span class="p">],</span> <span class="nx">callback</span><span class="p">);</span>

<span class="nx">async</span><span class="p">.</span><span class="nx">auto</span><span class="p">({</span>
  <span class="na">hostname</span><span class="p">:</span> <span class="nx">async</span><span class="p">.</span><span class="nx">constant</span><span class="p">(</span><span class="s2">"https://server.net/"</span><span class="p">),</span>
  <span class="na">port</span><span class="p">:</span> <span class="nx">findFreePort</span><span class="p">,</span>
  <span class="na">launchServer</span><span class="p">:</span> <span class="p">[</span><span class="s2">"hostname"</span><span class="p">,</span> <span class="s2">"port"</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">cb</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">startServer</span><span class="p">(</span><span class="nx">options</span><span class="p">,</span> <span class="nx">cb</span><span class="p">);</span>
  <span class="p">}],</span>
  <span class="c1">//...</span>
<span class="p">},</span> <span class="nx">callback</span><span class="p">);</span>

</code></pre>

<hr>

<p><a name="asyncify">
<a name="wrapSync"></p>

<h3 id="asyncify-func">asyncify(func)</h3>

<p><strong>Alias:</strong> <code class="prettyprint">wrapSync</code></p>

<p>Take a sync function and make it async, passing its return value to a callback. This is useful for plugging sync functions into a waterfall, series, or other async functions. Any arguments passed to the generated function will be passed to the wrapped function (except for the final callback argument). Errors thrown will be passed to the callback.</p>

<p><strong>Example</strong></p>
<pre class="highlight javascript"><code><span class="nx">async</span><span class="p">.</span><span class="nx">waterfall</span><span class="p">([</span>
  <span class="nx">async</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">,</span> <span class="nx">filename</span><span class="p">,</span> <span class="s2">"utf8"</span><span class="p">),</span>
  <span class="nx">async</span><span class="p">.</span><span class="nx">asyncify</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">),</span>
  <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// data is the result of parsing the text.</span>
    <span class="c1">// If there was a parsing error, it would have been caught.</span>
  <span class="p">}</span>
<span class="p">],</span> <span class="nx">callback</span><span class="p">)</span>
</code></pre>

<p>If the function passed to <code class="prettyprint">asyncify</code> returns a Promise, that promises&rsquo;s resolved/rejected state will be used to call the callback, rather than simply the synchronous return value.  Example:</p>
<pre class="highlight javascript"><code><span class="nx">async</span><span class="p">.</span><span class="nx">waterfall</span><span class="p">([</span>
  <span class="nx">async</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">,</span> <span class="nx">filename</span><span class="p">,</span> <span class="s2">"utf8"</span><span class="p">),</span>
  <span class="nx">async</span><span class="p">.</span><span class="nx">asyncify</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">contents</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">db</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">contents</span><span class="p">);</span>
  <span class="p">}),</span>
  <span class="kd">function</span> <span class="p">(</span><span class="nx">model</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// `model` is the instantiated model object. </span>
    <span class="c1">// If there was an error, this function would be skipped.</span>
  <span class="p">}</span>
<span class="p">],</span> <span class="nx">callback</span><span class="p">)</span>
</code></pre>

<p>This also means you can asyncify ES2016 <code class="prettyprint">async</code> functions.</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">q</span> <span class="o">=</span> <span class="nx">async</span><span class="p">.</span><span class="nx">queue</span><span class="p">(</span><span class="nx">async</span><span class="p">.</span><span class="nx">asyncify</span><span class="p">(</span><span class="nx">async</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">file</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">intermediateStep</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">processFile</span><span class="p">(</span><span class="nx">file</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">await</span> <span class="nx">somePromise</span><span class="p">(</span><span class="nx">intermediateStep</span><span class="p">)</span>
<span class="p">}));</span>

<span class="nx">q</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">files</span><span class="p">);</span>
</code></pre>

<hr>

<p><a name="log" /></p>

<h3 id="log-function-arguments">log(function, arguments)</h3>

<p>Logs the result of an <code class="prettyprint">async</code> function to the <code class="prettyprint">console</code>. Only works in Node.js or
in browsers that support <code class="prettyprint">console.log</code> and <code class="prettyprint">console.error</code> (such as FF and Chrome).
If multiple arguments are returned from the async function, <code class="prettyprint">console.log</code> is
called on each argument in order.</p>

<p><strong>Arguments</strong></p>

<ul>
<li><code class="prettyprint">function</code> - The function you want to eventually apply all arguments to.</li>
<li><code class="prettyprint">arguments...</code> - Any number of arguments to apply to the function.</li>
</ul>

<p><strong>Example</strong></p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">hello</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">callback</span><span class="p">){</span>
    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
        <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s1">'hello '</span> <span class="o">+</span> <span class="nx">name</span><span class="p">);</span>
    <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
<span class="p">};</span>
</code></pre>
<pre class="highlight javascript"><code><span class="nx">node</span><span class="o">&gt;</span> <span class="nx">async</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">hello</span><span class="p">,</span> <span class="s1">'world'</span><span class="p">);</span>
<span class="s1">'hello world'</span>
</code></pre>

<hr>

<p><a name="dir" /></p>

<h3 id="dir-function-arguments">dir(function, arguments)</h3>

<p>Logs the result of an <code class="prettyprint">async</code> function to the <code class="prettyprint">console</code> using <code class="prettyprint">console.dir</code> to
display the properties of the resulting object. Only works in Node.js or
in browsers that support <code class="prettyprint">console.dir</code> and <code class="prettyprint">console.error</code> (such as FF and Chrome).
If multiple arguments are returned from the async function, <code class="prettyprint">console.dir</code> is
called on each argument in order.</p>

<p><strong>Arguments</strong></p>

<ul>
<li><code class="prettyprint">function</code> - The function you want to eventually apply all arguments to.</li>
<li><code class="prettyprint">arguments...</code> - Any number of arguments to apply to the function.</li>
</ul>

<p><strong>Example</strong></p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">hello</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">callback</span><span class="p">){</span>
    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
        <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="p">{</span><span class="na">hello</span><span class="p">:</span> <span class="nx">name</span><span class="p">});</span>
    <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
<span class="p">};</span>
</code></pre>
<pre class="highlight javascript"><code><span class="nx">node</span><span class="o">&gt;</span> <span class="nx">async</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">hello</span><span class="p">,</span> <span class="s1">'world'</span><span class="p">);</span>
<span class="p">{</span><span class="nl">hello</span><span class="p">:</span> <span class="s1">'world'</span><span class="p">}</span>
</code></pre>

<hr>

<p><a name="noConflict" /></p>

<h3 id="noconflict">noConflict()</h3>

<p>Changes the value of <code class="prettyprint">async</code> back to its original value, returning a reference to the
<code class="prettyprint">async</code> object.</p>
