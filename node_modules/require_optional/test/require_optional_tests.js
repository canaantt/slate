var assert=require("assert"),require_optional=require("../");describe("Require Optional",function(){describe("top level require",function(){it("should correctly require co library",function(){var e=require_optional("es6-promise");assert.ok(e)}),it("should fail to require es6-promise library",function(){try{require_optional("co")}catch(e){return void assert.equal("OPTIONAL_MODULE_NOT_FOUND",e.code)}assert.ok(!1)}),it("should ignore optional library not defined",function(){assert.equal(void 0,require_optional("es6-promise2"))})}),describe("internal module file require",function(){it("should correctly require co library",function(){var e=require_optional("bson/lib/bson/long.js");assert.ok(e)})}),describe("top level resolve",function(){it("should correctly use exists method",function(){assert.equal(!1,require_optional.exists("co")),assert.equal(!0,require_optional.exists("es6-promise")),assert.equal(!0,require_optional.exists("bson/lib/bson/long.js")),assert.equal(!1,require_optional.exists("es6-promise2"))})})});