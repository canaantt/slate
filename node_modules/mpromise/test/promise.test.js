var assert=require("assert"),MPromise=require("../");describe("promise",function(){it("events fire right after fulfill()",function(e){var n=new MPromise,r=0;n.on("fulfill",function(e,n){assert.equal(e,"1"),assert.equal(n,"2"),r++}),n.fulfill("1","2"),n.on("fulfill",function(e,n){assert.equal(e,"1"),assert.equal(n,"2"),r++}),assert.equal(2,r),e()}),it("events fire right after reject()",function(e){var n=new MPromise,r=0;n.on("reject",function(e){assert.ok(e instanceof Error),r++}),n.reject(new Error("booyah")),n.on("reject",function(e){assert.ok(e instanceof Error),r++}),assert.equal(2,r),e()}),describe("onResolve()",function(){it("from constructor works",function(e){var n=0,r=new MPromise(function(e){assert.ok(e instanceof Error),n++});r.reject(new Error("dawg")),assert.equal(1,n),e()}),it("after fulfill()",function(e){var n=new MPromise,r=0;n.fulfill("woot"),n.onResolve(function(e,n){assert.equal(n,"woot"),r++}),n.onResolve(function(e){assert.strictEqual(e,null),r++}),assert.equal(2,r),e()})}),describe("onFulfill shortcut",function(){it("works",function(e){var n=new MPromise,r=0;n.onFulfill(function(e){assert.strictEqual(e,void 0),r++}),n.fulfill(),assert.equal(1,r),e()})}),describe("onReject shortcut",function(){it("works",function(e){var n=new MPromise,r=0;n.onReject(function(e){assert.ok(e instanceof Error),r++}),n.reject(new Error),assert.equal(1,r),e()})}),describe("return values",function(){it("on()",function(e){var n=new MPromise;assert.ok(n.on("jump",function(){})instanceof MPromise),e()}),it("onFulfill()",function(e){var n=new MPromise;assert.ok(n.onFulfill(function(){})instanceof MPromise),e()}),it("onReject()",function(e){var n=new MPromise;assert.ok(n.onReject(function(){})instanceof MPromise),e()}),it("onResolve()",function(e){var n=new MPromise;assert.ok(n.onResolve(function(){})instanceof MPromise),e()})}),describe("casting errors",function(){describe("reject()",function(){it("does not cast arguments to Error",function(e){var n=new MPromise(function(n){assert.equal(3,n),e()});n.reject(3)})})}),describe("then",function(){describe("catching",function(){it("should not catch returned promise fulfillments",function(e){var n,r=new MPromise;r.then(function(){throw n=new Error("boo!")}),r.fulfill(),e()}),it("should not catch returned promise fulfillments even async",function(e){var n,r=new MPromise;r.then(function(){throw n=new Error("boo!")}),setTimeout(function(){r.fulfill(),e()},10)}),it("can be disabled using .end()",function(e){if(0==process.version.indexOf("v0.8"))return e();var n,r,o=require("domain").create();o.once("error",function(o){assert(o,n),clearTimeout(r),e()}),o.run(function(){var e=new MPromise,r=e.then(function(){throw n=new Error("shucks")});r.end(),e.fulfill()}),r=setTimeout(function(){e(new Error("error was swallowed"))},10)}),it("can be disabled using .end() even when async",function(e){if(0!=process.version.indexOf("v0.10"))return e();var n,r,o=require("domain").create();o.on("error",function(o){assert(o,n),clearTimeout(r),e()}),o.run(function(){var e=new MPromise,r=e.then(function(){throw n=new Error("boo!")});r.end(),setTimeout(function(){e.fulfill()},10)}),r=setTimeout(function(){e(new Error("error was swallowed"))},20)}),it("can be handled using .end() so no throwing",function(e){var n,r,o=require("domain").create();o.run(function(){var o=new MPromise,t=o.then(function(){throw n=new Error("boo!")});t.end(function(o){assert.equal(o,n),clearTimeout(r),e()}),setTimeout(function(){o.fulfill()},10)}),r=setTimeout(function(){e(new Error("error was swallowed"))},20)})}),it("persistent",function(e){function n(e){v=v||e,assert.equal(v,e)}function r(){throw new Error("onReject should not be called")}var o=new MPromise;v=null,o.then(n,r).end(),o.fulfill("foo"),o.fulfill("bar"),o.reject(new Error("baz")),o.then(n,r).end(),setTimeout(e,0)}),it("accepts multiple completion values",function(e){var n=new MPromise;n.then(function(n,r){assert.equal(2,arguments.length),assert.equal("hi",n),assert.equal(4,r),e()},e).end(),n.fulfill("hi",4)})}),describe("fulfill values and splats",function(){it("should handle multiple values",function(e){var n=new MPromise;n.onFulfill(function(n,r,o){assert.equal("a",n),assert.equal("b",r),assert.equal("c",o),e()}),n.fulfill("a","b","c")}),it("should handle multiple values from a then",function(e){MPromise.fulfilled().then(function(){return MPromise.fulfilled().then(function(){var e=new MPromise;return e.fulfill("a","b","c"),e})}).onFulfill(function(n,r,o){assert.equal("a",n),assert.equal("b",r),assert.equal("c",o),e()}).end()}),it("should work with `fulfilled` convenience method",function(e){MPromise.fulfilled("a","b","c").then(function(n,r,o){assert.equal("a",n),assert.equal("b",r),assert.equal("c",o),e()})})}),describe("end",function(){it("should return the promise",function(e){var n=new MPromise,r=n.end();assert.equal(n,r),e()}),it("should throw for chain",function(e){var n=new MPromise;n.then().then().then().then().end();try{n.reject("bad")}catch(r){e()}}),it("should not throw for chain with reject handler",function(e){var n=new MPromise;n.then().then().then().then().end(function(){e()});try{n.reject("bad")}catch(r){e(r)}})}),describe("chain",function(){it("should propagate fulfillment",function(e){var n={a:"a"},r=new MPromise;r.chain(new MPromise(function(r,o){assert.equal(o,n),e()})),r.fulfill(n)}),it("should propagate rejection",function(e){var n=new Error("gaga"),r=new MPromise;r.chain(new MPromise(function(r){assert.equal(r,n),e()})),r.reject(n)}),it("should propagate resolution err",function(e){var n=new Error("gaga"),r=new MPromise;r.chain(new MPromise(function(r){assert.equal(r,n),e()})),r.resolve(n)}),it("should propagate resolution val",function(e){var n={a:"a"},r=new MPromise;r.chain(new MPromise(function(r,o){assert.equal(o,n),e()})),r.resolve(null,n)})}),describe("all",function(){it("works",function(e){var n=0,r=new MPromise,o=r.all(function(){return[function(){var e=new MPromise;return n++,e.resolve(),e}(),function(){var e=new MPromise;return n++,e.resolve(),e}()]});o.then(function(){assert.equal(n,2),e()}),r.resolve()}),it("handles rejects",function(e){var n=0,r=new MPromise,o=r.all(function(){return[function(){var e=new MPromise;return n++,e.resolve(),e}(),function(){throw n++,new Error("gaga")}()]});o.onReject(function(r){assert(r.message,"gaga"),assert.equal(n,2),e()}),r.resolve()})}),describe("deferred",function(){it("works",function(e){var n=MPromise.deferred();assert.ok(n.promise instanceof MPromise),assert.ok(n.reject instanceof Function),assert.ok(n.resolve instanceof Function),assert.ok(n.callback instanceof Function),e()})}),describe("hook",function(){it("works",function(e){var n=0,r=function(e,r){n++,e(),r()};MPromise.hook([r,r,r]).then(function(){assert(n,3),e()})}),it("works with async serial hooks",function(e){this.timeout(800);var n=0,r=function(e,r){n++,setTimeout(function(){e()},200),r()};MPromise.hook([r,r,r]).then(function(){assert(n,3),e()})}),it("works with async parallel hooks",function(e){this.timeout(400);var n=0,r=function(e,r){n++,e(),setTimeout(function(){r()},200)};MPromise.hook([r,r,r]).then(function(){assert(n,3),e()})}),it("catches errors in hook logic",function(e){var n=0,r=function(e,r){n++,e(),r()},o=function(e,r){throw n++,e(),r(),new Error("err")};MPromise.hook([r,o,r]).end(function(r){assert(n,2),e()})})})});