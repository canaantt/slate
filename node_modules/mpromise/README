<h1 id="mpromise">mpromise</h1>

<p>==========</p>

<p><a href="https://travis-ci.org/aheckmann/mpromise"><img alt="Build Status" src="https://travis-ci.org/aheckmann/mpromise.png" /></a></p>

<p>A <a href="https://github.com/promises-aplus/promises-spec">promises/A+</a> conformant implementation, written for <a href="http://mongoosejs.com">mongoose</a>.</p>

<h2 id="installation">installation</h2>
<pre class="highlight plaintext"><code>$ npm install mpromise
</code></pre>

<h2 id="docs">docs</h2>

<p>An <code class="prettyprint">mpromise</code> can be in any of three states, pending, fulfilled (success), or rejected (error). Once it is either fulfilled or rejected it&rsquo;s state can no longer be changed.</p>

<p>The exports object is the Promise constructor.</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">Promise</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'mpromise'</span><span class="p">);</span>
</code></pre>

<p>The constructor accepts an optional function which is executed when the promise is first resolved (either fulfilled or rejected).</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="nx">fn</span><span class="p">);</span>
</code></pre>

<p>This is the same as passing the <code class="prettyprint">fn</code> to <code class="prettyprint">onResolve</code> directly.</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">;</span>
<span class="nx">promise</span><span class="p">.</span><span class="nx">onResolve</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">args</span><span class="p">..)</span> <span class="p">{</span>
  <span class="p">...</span>
<span class="p">});</span>
</code></pre>

<h3 id="methods">Methods</h3>

<h4 id="fulfill">fulfill</h4>

<p>Fulfilling a promise with values:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">;</span>
<span class="nx">promise</span><span class="p">.</span><span class="nx">fulfill</span><span class="p">(</span><span class="nx">args</span><span class="p">...);</span>
</code></pre>

<p>If the promise has already been fulfilled or rejected, no action is taken.</p>

<h4 id="reject">reject</h4>

<p>Rejecting a promise with a reason:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">;</span>
<span class="nx">promise</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">reason</span><span class="p">);</span>
</code></pre>

<p>If the promise has already been fulfilled or rejected, no action is taken.</p>

<h4 id="resolve">resolve</h4>

<p>Node.js callback style promise resolution <code class="prettyprint">(err, args...)</code>:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">;</span>
<span class="nx">promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">([</span><span class="nx">reason</span><span class="p">],</span> <span class="p">[</span><span class="nx">arg1</span><span class="p">,</span> <span class="nx">arg2</span><span class="p">,</span> <span class="p">...]);</span>
</code></pre>

<p>If the promise has already been fulfilled or rejected, no action is taken.</p>

<h4 id="onfulfill">onFulfill</h4>

<p>To register a function for execution when the promise is fulfilled, pass it to <code class="prettyprint">onFulfill</code>. When executed it will receive the arguments passed to <code class="prettyprint">fulfill()</code>.</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">;</span>
<span class="nx">promise</span><span class="p">.</span><span class="nx">onFulfill</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">);</span>
<span class="p">});</span>
<span class="nx">promise</span><span class="p">.</span><span class="nx">fulfill</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</code></pre>

<p>The function will only be called once when the promise is fulfilled, never when rejected.</p>

<p>Registering a function with <code class="prettyprint">onFulfill</code> after the promise has already been fulfilled results in the immediate execution of the function with the original arguments used to fulfill the promise.</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">;</span>
<span class="nx">promise</span><span class="p">.</span><span class="nx">fulfill</span><span class="p">(</span><span class="s2">" :D "</span><span class="p">);</span>
<span class="nx">promise</span><span class="p">.</span><span class="nx">onFulfill</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">arg</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arg</span><span class="p">);</span> <span class="c1">// logs " :D "</span>
<span class="p">})</span>
</code></pre>

<h4 id="onreject">onReject</h4>

<p>To register a function for execution when the promise is rejected, pass it to <code class="prettyprint">onReject</code>. When executed it will receive the argument passed to <code class="prettyprint">reject()</code>.</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">;</span>
<span class="nx">promise</span><span class="p">.</span><span class="nx">onReject</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">reason</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">'sad'</span><span class="p">,</span> <span class="nx">reason</span><span class="p">);</span>
<span class="p">});</span>
<span class="nx">promise</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="s1">'sad'</span><span class="p">);</span>
</code></pre>

<p>The function will only be called once when the promise is rejected, never when fulfilled.</p>

<p>Registering a function with <code class="prettyprint">onReject</code> after the promise has already been rejected results in the immediate execution of the function with the original argument used to reject the promise.</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">;</span>
<span class="nx">promise</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="s2">" :( "</span><span class="p">);</span>
<span class="nx">promise</span><span class="p">.</span><span class="nx">onReject</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">reason</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">reason</span><span class="p">);</span> <span class="c1">// logs " :( "</span>
<span class="p">})</span>
</code></pre>

<h4 id="onresolve">onResolve</h4>

<p>Allows registration of node.js style callbacks <code class="prettyprint">(err, args..)</code> to handle either promise resolution type (fulfill or reject).</p>
<pre class="highlight javascript"><code><span class="c1">// fulfillment</span>
<span class="kd">var</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">;</span>
<span class="nx">promise</span><span class="p">.</span><span class="nx">onResolve</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">);</span> <span class="c1">// logs 3</span>
<span class="p">});</span>
<span class="nx">promise</span><span class="p">.</span><span class="nx">fulfill</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>

<span class="c1">// rejection</span>
<span class="kd">var</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">;</span>
<span class="nx">promise</span><span class="p">.</span><span class="nx">onResolve</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span> <span class="c1">// logs "failed"</span>
  <span class="p">}</span>
<span class="p">});</span>
<span class="nx">promise</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">'failed'</span><span class="p">));</span>
</code></pre>

<h4 id="then">then</h4>

<p>Creates a new promise and returns it. If <code class="prettyprint">onFulfill</code> or <code class="prettyprint">onReject</code> are passed, they are added as SUCCESS/ERROR callbacks to this promise after the nextTick.</p>

<p>Conforms to <a href="https://github.com/promises-aplus/promises-spec">promises/A+</a> specification and passes its <a href="https://github.com/promises-aplus/promises-tests">tests</a>.</p>
<pre class="highlight javascript"><code><span class="c1">// promise.then(onFulfill, onReject);</span>

<span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">;</span>

<span class="nx">p</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">arg</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">arg</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">arg</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">arg</span> <span class="o">+</span> <span class="s1">' is an error!'</span><span class="p">);</span>
<span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">assert</span><span class="p">.</span><span class="nx">ok</span><span class="p">(</span><span class="nx">err</span> <span class="k">instanceof</span> <span class="nb">Error</span><span class="p">);</span>
  <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">'2 is an error'</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
<span class="p">});</span>
<span class="nx">p</span><span class="p">.</span><span class="nx">fullfill</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</code></pre>

<h4 id="end">end</h4>

<p>Signifies that this promise was the last in a chain of <code class="prettyprint">then()s</code>: if a handler passed to the call to <code class="prettyprint">then</code> which produced this promise throws, the exception be rethrown.
You can pass an OnReject handler to <code class="prettyprint">end</code> so that exceptions will be handled (like a final catch clause);
This method returns it&rsquo;s promise for easy use with <code class="prettyprint">return</code>.</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">;</span>
<span class="nx">p</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">'shucks'</span><span class="p">)</span> <span class="p">});</span>
<span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">p</span><span class="p">.</span><span class="nx">fulfill</span><span class="p">();</span>
  <span class="c1">// error was caught and swallowed by the promise returned from</span>
  <span class="c1">// p.then(). we either have to always register handlers on</span>
  <span class="c1">// the returned promises or we can do the following...</span>
<span class="p">},</span> <span class="mi">10</span><span class="p">);</span>

<span class="c1">// this time we use .end() which prevents catching thrown errors</span>
<span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">;</span>
<span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">p</span><span class="p">.</span><span class="nx">fulfill</span><span class="p">();</span> <span class="c1">// throws "shucks"</span>
<span class="p">},</span> <span class="mi">10</span><span class="p">);</span>
<span class="k">return</span> <span class="nx">p</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">'shucks'</span><span class="p">)</span> <span class="p">}).</span><span class="nx">end</span><span class="p">();</span> <span class="c1">// &lt;--</span>
</code></pre>

<h3 id="chain">chain</h3>

<p>Allows direct promise to promise chaining (especially useful by a outside aggregating function). It doesn&rsquo;t use the asynchronous <code class="prettyprint">resolve</code> algorithm and so excepts only another Promise as it&rsquo;s argument.</p>
<pre class="highlight javascript"><code><span class="kd">function</span> <span class="nx">makeMeAPromise</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">;</span>
  <span class="nx">p</span><span class="p">.</span><span class="nx">fulfill</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">p</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">returnPromise</span> <span class="o">=</span> <span class="nx">initialPromise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span>
    <span class="nx">returnPromise</span> <span class="o">=</span> <span class="nx">returnPromise</span><span class="p">.</span><span class="nx">chain</span><span class="p">(</span><span class="nx">makeMeAPromise</span><span class="p">(</span><span class="nx">i</span><span class="p">));</span>

<span class="nx">initialPromise</span><span class="p">.</span><span class="nx">fulfill</span><span class="p">();</span>
<span class="k">return</span> <span class="nx">returnPromise</span><span class="p">;</span>
</code></pre>

<h3 id="event-names">Event names</h3>

<p>If you&rsquo;d like to alter this implementations event names used to signify success and failure you may do so by setting <code class="prettyprint">Promise.SUCCESS</code> or <code class="prettyprint">Promise.FAILURE</code> respectively.</p>
<pre class="highlight javascript"><code><span class="nx">Promise</span><span class="p">.</span><span class="nx">SUCCESS</span> <span class="o">=</span> <span class="s1">'complete'</span><span class="p">;</span>
<span class="nx">Promise</span><span class="p">.</span><span class="nx">FAILURE</span> <span class="o">=</span> <span class="s1">'err'</span><span class="p">;</span>
</code></pre>

<h3 id="luke-use-the-source">Luke, use the Source</h3>

<p>For more ideas read the <a href="https://github.com/aheckmann/mpromise/blob/master/lib">source</a>, <a href="https://github.com/aheckmann/mpromise/blob/master/test">tests</a>, or the <a href="https://github.com/LearnBoost/mongoose/blob/3.6x/lib/promise.js">mongoose implementation</a>.</p>

<h2 id="license">license</h2>

<p><a href="https://github.com/aheckmann/mpromise/blob/master/LICENSE">MIT</a></p>
