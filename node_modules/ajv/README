<h1 id="ajv-another-json-schema-validator">Ajv: Another JSON Schema Validator</h1>

<p>The fastest JSON Schema validator for node.js and browser. Supports <a href="https://github.com/json-schema/json-schema/wiki/v5-Proposals">v5 proposals</a>.</p>

<p><a href="https://travis-ci.org/epoberezkin/ajv"><img alt="Build Status" src="https://travis-ci.org/epoberezkin/ajv.svg?branch=master" /></a>
<a href="https://www.npmjs.com/package/ajv"><img alt="npm version" src="https://badge.fury.io/js/ajv.svg" /></a>
<a href="https://codeclimate.com/github/epoberezkin/ajv"><img alt="Code Climate" src="https://codeclimate.com/github/epoberezkin/ajv/badges/gpa.svg" /></a>
<a href="https://coveralls.io/github/epoberezkin/ajv?branch=master"><img alt="Coverage Status" src="https://coveralls.io/repos/epoberezkin/ajv/badge.svg?branch=master&amp;service=github" /></a></p>

<h2 id="contents">Contents</h2>

<ul>
<li><a href="#performance">Performance</a></li>
<li><a href="#features">Features</a></li>
<li><a href="#getting-started">Getting started</a></li>
<li><a href="https://github.com/epoberezkin/ajv/blob/master/FAQ.md">Frequently Asked Questions</a></li>
<li><a href="#using-in-browser">Using in browser</a></li>
<li><a href="#command-line-interface">Command line interface</a></li>
<li>Validation

<ul>
<li><a href="#validation-keywords">Keywords</a></li>
<li><a href="#formats">Formats</a></li>
<li><a href="#data-reference">$data reference</a></li>
<li>NEW: <a href="#merge-and-patch-keywords">$merge and $patch keywords</a></li>
<li><a href="#defining-custom-keywords">Defining custom keywords</a></li>
<li><a href="#asynchronous-compilation">Asynchronous schema compilation</a></li>
<li><a href="#asynchronous-validation">Asynchronous validation</a></li>
</ul></li>
<li>Modifying data during validation

<ul>
<li><a href="#filtering-data">Filtering data</a></li>
<li><a href="#assigning-defaults">Assigning defaults</a></li>
<li><a href="#coercing-data-types">Coercing data types</a></li>
</ul></li>
<li>API

<ul>
<li><a href="#api">Methods</a></li>
<li><a href="#options">Options</a></li>
<li><a href="#validation-errors">Validation errors</a></li>
</ul></li>
<li><a href="#some-packages-using-ajv">Packages using Ajv</a></li>
<li><a href="#tests">Tests, Contributing, History, License</a></li>
</ul>

<h2 id="performance">Performance</h2>

<p>Ajv generates code using <a href="https://github.com/olado/doT">doT templates</a> to turn JSON schemas into super-fast validation functions that are efficient for v8 optimization.</p>

<p>Currently Ajv is the fastest and the most standard compliant validator according to these benchmarks:</p>

<ul>
<li><a href="https://github.com/ebdrup/json-schema-benchmark">json-schema-benchmark</a> - 50% faster than the second place</li>
<li><a href="https://github.com/pandastrike/jsck#benchmarks">jsck benchmark</a> - 20-190% faster</li>
<li><a href="https://rawgit.com/zaggino/z-schema/master/benchmark/results.html">z-schema benchmark</a></li>
<li><a href="https://cdn.rawgit.com/playlyfe/themis/master/benchmark/results.html">themis benchmark</a></li>
</ul>

<p>Performace of different validators by <a href="https://github.com/ebdrup/json-schema-benchmark">json-schema-benchmark</a>:</p>

<p><a href="https://github.com/ebdrup/json-schema-benchmark/blob/master/README.md#performance"><img alt="performance" src="https://chart.googleapis.com/chart?chxt=x,y&amp;cht=bhs&amp;chco=76A4FB&amp;chls=2.0&amp;chbh=32,4,1&amp;chs=600x416&amp;chxl=-1:%7Cajv%7Cis-my-json-valid%7Cjsen%7Cschemasaurus%7Cthemis%7Cz-schema%7Cjsck%7Cjsonschema%7Cskeemas%7Ctv4%7Cjayschema&amp;chd=t:100,68,61,22.8,17.6,6.6,2.7,0.9,0.7,0.4,0.1" /></a></p>

<h2 id="features">Features</h2>

<ul>
<li>Ajv implements full <a href="http://json-schema.org/">JSON Schema draft 4</a> standard:

<ul>
<li>all validation keywords (see <a href="https://github.com/epoberezkin/ajv/blob/master/KEYWORDS.md">JSON-Schema validation keywords</a>)</li>
<li>full support of remote refs (remote schemas have to be added with <code class="prettyprint">addSchema</code> or compiled to be available)</li>
<li>support of circular references between schemas</li>
<li>correct string lengths for strings with unicode pairs (can be turned off)</li>
<li><a href="#formats">formats</a> defined by JSON Schema draft 4 standard and custom formats (can be turned off)</li>
<li><a href="#api-validateschema">validates schemas against meta-schema</a></li>
</ul></li>
<li>supports <a href="#using-in-browser">browsers</a> and nodejs 0.10-5.0</li>
<li><a href="#asynchronous-compilation">asynchronous loading</a> of referenced schemas during compilation</li>
<li>&ldquo;All errors&rdquo; validation mode with <a href="#options">option allErrors</a></li>
<li><a href="#validation-errors">error messages with parameters</a> describing error reasons to allow creating custom error messages</li>
<li>i18n error messages support with <a href="https://github.com/epoberezkin/ajv-i18n">ajv-i18n</a> package (version &gt;= 1.0.0)</li>
<li><a href="#filtering-data">filtering data</a> from additional properties</li>
<li><a href="#assigning-defaults">assigning defaults</a> to missing properties and items</li>
<li><a href="#coercing-data-types">coercing data</a> to the types specified in <code class="prettyprint">type</code> keywords</li>
<li><a href="#defining-custom-keywords">custom keywords</a></li>
<li>keywords <code class="prettyprint">switch</code>, <code class="prettyprint">constant</code>, <code class="prettyprint">contains</code>, <code class="prettyprint">patternGroups</code>, <code class="prettyprint">patternRequired</code>, <code class="prettyprint">formatMaximum</code> / <code class="prettyprint">formatMinimum</code> and <code class="prettyprint">formatExclusiveMaximum</code> / <code class="prettyprint">formatExclusiveMinimum</code> from <a href="https://github.com/json-schema/json-schema/wiki/v5-Proposals">JSON-schema v5 proposals</a> with <a href="#options">option v5</a></li>
<li><a href="https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/json-schema-v5.json#">v5 meta-schema</a> for schemas using v5 keywords</li>
<li><a href="#data-reference">v5 $data reference</a> to use values from the validated data as values for the schema keywords</li>
<li><a href="#asynchronous-validation">asynchronous validation</a> of custom formats and keywords</li>
</ul>

<p>Currently Ajv is the only validator that passes all the tests from <a href="https://github.com/json-schema/JSON-Schema-Test-Suite">JSON Schema Test Suite</a> (according to <a href="https://github.com/ebdrup/json-schema-benchmark">json-schema-benchmark</a>, apart from the test that requires that <code class="prettyprint">1.0</code> is not an integer that is impossible to satisfy in JavaScript).</p>

<h2 id="install">Install</h2>
<pre class="highlight plaintext"><code>npm install ajv
</code></pre>

<h2 id="getting-started"><a name="usage"></a>Getting started</h2>

<p>Try it in the node REPL: https://tonicdev.com/npm/ajv</p>

<p>The fastest validation call:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">Ajv</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'ajv'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">ajv</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ajv</span><span class="p">();</span> <span class="c1">// options can be passed, e.g. {allErrors: true}</span>
<span class="kd">var</span> <span class="nx">validate</span> <span class="o">=</span> <span class="nx">ajv</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">schema</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">valid</span> <span class="o">=</span> <span class="nx">validate</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">valid</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">validate</span><span class="p">.</span><span class="nx">errors</span><span class="p">);</span>
</code></pre>

<p>or with less code</p>
<pre class="highlight javascript"><code><span class="c1">// ...</span>
<span class="kd">var</span> <span class="nx">valid</span> <span class="o">=</span> <span class="nx">ajv</span><span class="p">.</span><span class="nx">validate</span><span class="p">(</span><span class="nx">schema</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">valid</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ajv</span><span class="p">.</span><span class="nx">errors</span><span class="p">);</span>
<span class="c1">// ...</span>
</code></pre>

<p>or</p>
<pre class="highlight javascript"><code><span class="c1">// ...</span>
<span class="nx">ajv</span><span class="p">.</span><span class="nx">addSchema</span><span class="p">(</span><span class="nx">schema</span><span class="p">,</span> <span class="s1">'mySchema'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">valid</span> <span class="o">=</span> <span class="nx">ajv</span><span class="p">.</span><span class="nx">validate</span><span class="p">(</span><span class="s1">'mySchema'</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">valid</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ajv</span><span class="p">.</span><span class="nx">errorsText</span><span class="p">());</span>
<span class="c1">// ...</span>
</code></pre>

<p>See <a href="#api">API</a> and <a href="#options">Options</a> for more details.</p>

<p>Ajv compiles schemas to functions and caches them in all cases (using schema stringified with <a href="https://github.com/substack/json-stable-stringify">json-stable-stringify</a> as a key), so that the next time the same schema is used (not necessarily the same object instance) it won&rsquo;t be compiled again.</p>

<p>The best performance is achieved when using compiled functions returned by <code class="prettyprint">compile</code> or <code class="prettyprint">getSchema</code> methods (there is no additional function call).</p>

<p><strong>Please note</strong>: every time validation function or <code class="prettyprint">ajv.validate</code> are called <code class="prettyprint">errors</code> property is overwritten. You need to copy <code class="prettyprint">errors</code> array reference to another variable if you want to use it later (e.g., in the callback). See <a href="#validation-errors">Validation errors</a></p>

<h2 id="using-in-browser">Using in browser</h2>

<p>You can require Ajv directly from the code you browserify - in this case Ajv will be a part of your bundle.</p>

<p>If you need to use Ajv in several bundles you can create a separate UMD bundle using <code class="prettyprint">npm run bundle</code> script (thanks to <a href="https://github.com/siddo420">siddo420</a>).</p>

<p>Then you need to load Ajv in the browser:
<code class="prettyprint">html
&lt;script src=&quot;ajv.min.js&quot;&gt;&lt;/script&gt;
</code></p>

<p>This bundle can be used with different module systems or creates global <code class="prettyprint">Ajv</code> if no module system is found.</p>

<p>The browser bundle is available on <a href="https://cdnjs.com/libraries/ajv">cdnjs</a>.</p>

<p>Ajv is tested with these browsers:</p>

<p><a href="https://saucelabs.com/u/epoberezkin"><img alt="Sauce Test Status" src="https://saucelabs.com/browser-matrix/epoberezkin.svg" /></a></p>

<p><strong>Please note</strong>: some frameworks, e.g. Dojo, may redifine global require in such way that is not compatible with CommonJS module format. In such case Ajv bundle has to be loaded before the framework and then you can use global Ajv (see issue <a href="https://github.com/epoberezkin/ajv/issues/234">#234</a>).</p>

<h2 id="command-line-interface">Command line interface</h2>

<p>CLI is available as a separate npm package <a href="https://github.com/jessedc/ajv-cli">ajv-cli</a>. It supports:</p>

<ul>
<li>compiling JSON-schemas to test their validity</li>
<li>validating data file(s) against JSON-schema</li>
<li>testing expected validity of data against JSON-schema</li>
<li>referenced schemas</li>
<li>custom meta-schemas</li>
<li>files in JSON and JavaScript format</li>
<li>all Ajv options</li>
<li>reporting changes in data after validation in <a href="https://tools.ietf.org/html/rfc6902">JSON-patch</a> format</li>
</ul>

<h2 id="validation-keywords">Validation keywords</h2>

<p>Ajv supports all validation keywords from draft 4 of JSON-schema standard:</p>

<ul>
<li><a href="https://github.com/epoberezkin/ajv/blob/master/KEYWORDS.md#type">type</a></li>
<li><a href="https://github.com/epoberezkin/ajv/blob/master/KEYWORDS.md#keywords-for-numbers">for numbers</a> - maximum, minimum, exclusiveMaximum, exclusiveMinimum, multipleOf</li>
<li><a href="https://github.com/epoberezkin/ajv/blob/master/KEYWORDS.md#keywords-for-strings">for strings</a> - maxLength, minLength, pattern, format</li>
<li><a href="https://github.com/epoberezkin/ajv/blob/master/KEYWORDS.md#keywords-for-arrays">for arrays</a> - maxItems, minItems, uniqueItems, items, additionalItems</li>
<li><a href="https://github.com/epoberezkin/ajv/blob/master/KEYWORDS.md#keywords-for-objects">for objects</a> - maxProperties, minproperties, required, properties, patternProperties, additionalProperties, dependencies</li>
<li><a href="https://github.com/epoberezkin/ajv/blob/master/KEYWORDS.md#keywords-for-all-types">compound keywords</a> - enum, not, oneOf, anyOf, allOf</li>
</ul>

<p>With option <code class="prettyprint">v5: true</code> Ajv also supports all validation keywords and <a href="#data-reference">$data reference</a> from <a href="https://github.com/json-schema/json-schema/wiki/v5-Proposals">v5 proposals</a> for JSON-schema standard:</p>

<ul>
<li><a href="https://github.com/epoberezkin/ajv/blob/master/KEYWORDS.md#switch-v5-proposal">switch</a> - conditional validation with a sequence of if/then clauses</li>
<li><a href="https://github.com/epoberezkin/ajv/blob/master/KEYWORDS.md#contains-v5-proposal">contains</a> - check that array contains a valid item</li>
<li><a href="https://github.com/epoberezkin/ajv/blob/master/KEYWORDS.md#constant-v5-proposal">constant</a> - check that data is equal to some value</li>
<li><a href="https://github.com/epoberezkin/ajv/blob/master/KEYWORDS.md#patterngroups-v5-proposal">patternGroups</a> - a more powerful alternative to patternProperties</li>
<li><a href="https://github.com/epoberezkin/ajv/blob/master/KEYWORDS.md#patternrequired-v5-proposal">patternRequired</a> - like <code class="prettyprint">required</code> but with patterns that some property should match.</li>
<li><a href="https://github.com/epoberezkin/ajv/blob/master/KEYWORDS.md#formatmaximum--formatminimum-and-exclusiveformatmaximum--exclusiveformatminimum-v5-proposal">formatMaximum, formatMinimum, formatExclusiveMaximum, formatExclusiveMinimum</a> - setting limits for date, time, etc.</li>
</ul>

<p>See <a href="https://github.com/epoberezkin/ajv/blob/master/KEYWORDS.md">JSON-Schema validation keywords</a> for more details.</p>

<h2 id="formats">Formats</h2>

<p>The following formats are supported for string validation with &ldquo;format&rdquo; keyword:</p>

<ul>
<li><em>date</em>: full-date according to <a href="http://tools.ietf.org/html/rfc3339#section-5.6">RFC3339</a>.</li>
<li><em>time</em>: time with optional time-zone.</li>
<li><em>date-time</em>: date-time from the same source (time-zone is mandatory). <code class="prettyprint">date</code>, <code class="prettyprint">time</code> and <code class="prettyprint">date-time</code> validate ranges in <code class="prettyprint">full</code> mode and only regexp in <code class="prettyprint">fast</code> mode (see <a href="#options">options</a>).</li>
<li><em>uri</em>: full uri with optional protocol.</li>
<li><em>email</em>: email address.</li>
<li><em>hostname</em>: host name acording to <a href="http://tools.ietf.org/html/rfc1034#section-3.5">RFC1034</a>.</li>
<li><em>ipv4</em>: IP address v4.</li>
<li><em>ipv6</em>: IP address v6.</li>
<li><em>regex</em>: tests whether a string is a valid regular expression by passing it to RegExp constructor.</li>
<li><em>uuid</em>: Universally Unique IDentifier according to <a href="http://tools.ietf.org/html/rfc4122">RFC4122</a>.</li>
<li><em>json-pointer</em>: JSON-pointer according to <a href="https://tools.ietf.org/html/rfc6901">RFC6901</a>.</li>
<li><em>relative-json-pointer</em>: relative JSON-pointer according to <a href="http://tools.ietf.org/html/draft-luff-relative-json-pointer-00">this draft</a>.</li>
</ul>

<p>There are two modes of format validation: <code class="prettyprint">fast</code> and <code class="prettyprint">full</code>. This mode affects formats <code class="prettyprint">date</code>, <code class="prettyprint">time</code>, <code class="prettyprint">date-time</code>, <code class="prettyprint">uri</code>, <code class="prettyprint">email</code>, and <code class="prettyprint">hostname</code>. See <a href="#options">Options</a> for details.</p>

<p>You can add additional formats and replace any of the formats above using <a href="#api-addformat">addFormat</a> method.</p>

<p>You can find patterns used for format validation and the sources that were used in <a href="https://github.com/epoberezkin/ajv/blob/master/lib/compile/formats.js">formats.js</a>.</p>

<h2 id="data-reference">$data reference</h2>

<p>With <code class="prettyprint">v5</code> option you can use values from the validated data as the values for the schema keywords. See <a href="https://github.com/json-schema/json-schema/wiki/$data-(v5-proposal)">v5 proposal</a> for more information about how it works.</p>

<p><code class="prettyprint">$data</code> reference is supported in the keywords: constant, enum, format, maximum/minimum, exclusiveMaximum / exclusiveMinimum, maxLength / minLength, maxItems / minItems, maxProperties / minProperties, formatMaximum / formatMinimum, formatExclusiveMaximum / formatExclusiveMinimum, multipleOf, pattern, required, uniqueItems.</p>

<p>The value of &ldquo;$data&rdquo; should be a <a href="http://tools.ietf.org/html/draft-luff-relative-json-pointer-00">relative JSON-pointer</a>.</p>

<p>Examples.</p>

<p>This schema requires that the value in property <code class="prettyprint">smaller</code> is less or equal than the value in the property larger:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">schema</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s2">"properties"</span><span class="p">:</span> <span class="p">{</span>
    <span class="s2">"smaller"</span><span class="p">:</span> <span class="p">{</span>
      <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"number"</span><span class="p">,</span>
      <span class="s2">"maximum"</span><span class="p">:</span> <span class="p">{</span> <span class="s2">"$data"</span><span class="p">:</span> <span class="s2">"1/larger"</span> <span class="p">}</span>
    <span class="p">},</span>
    <span class="s2">"larger"</span><span class="err">:</span> <span class="p">{</span> <span class="s2">"type"</span><span class="err">:</span> <span class="s2">"number"</span> <span class="p">}</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">validData</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">smaller</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
  <span class="na">larger</span><span class="p">:</span> <span class="mi">7</span>
<span class="p">};</span>
</code></pre>

<p>This schema requires that the properties have the same format as their field names:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">schema</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s2">"additionalProperties"</span><span class="p">:</span> <span class="p">{</span>
    <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"string"</span><span class="p">,</span>
    <span class="s2">"format"</span><span class="p">:</span> <span class="p">{</span> <span class="s2">"$data"</span><span class="p">:</span> <span class="s2">"0#"</span> <span class="p">}</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">validData</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s1">'date-time'</span><span class="p">:</span> <span class="s1">'1963-06-19T08:30:06.283185Z'</span><span class="p">,</span>
  <span class="na">email</span><span class="p">:</span> <span class="s1">'joe.bloggs@example.com'</span>
<span class="p">}</span>
</code></pre>

<p><code class="prettyprint">$data</code> reference is resolved safely - it won&rsquo;t throw even if some property is undefined. If <code class="prettyprint">$data</code> resolves to <code class="prettyprint">undefined</code> the validation succeeds (with the exclusion of <code class="prettyprint">constant</code> keyword). If <code class="prettyprint">$data</code> resolves to incorrect type (e.g. not &ldquo;number&rdquo; for maximum keyword) the validation fails.</p>

<h2 id="merge-and-patch-keywords">$merge and $patch keywords</h2>

<p>With v5 option and the package <a href="https://github.com/epoberezkin/ajv-merge-patch">ajv-merge-patch</a> you can use the keywords <code class="prettyprint">$merge</code> and <code class="prettyprint">$patch</code> that allow extending JSON-schemas with patches using formats <a href="https://tools.ietf.org/html/rfc7396">JSON Merge Patch (RFC 7396)</a> and <a href="https://tools.ietf.org/html/rfc6902">JSON Patch (RFC 6902)</a>.</p>

<p>To add keywords <code class="prettyprint">$merge</code> and <code class="prettyprint">$patch</code> to Ajv instance use this code:</p>
<pre class="highlight javascript"><code><span class="nx">require</span><span class="p">(</span><span class="s1">'ajv-merge-patch'</span><span class="p">)(</span><span class="nx">ajv</span><span class="p">);</span>
</code></pre>

<p>Examples.</p>

<p>Using <code class="prettyprint">$merge</code>:</p>
<pre class="highlight json"><code><span class="p">{</span><span class="w">
  </span><span class="nt">"$merge"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nt">"source"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nt">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"object"</span><span class="p">,</span><span class="w">
      </span><span class="nt">"properties"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nt">"p"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nt">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"string"</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">},</span><span class="w">
      </span><span class="nt">"additionalProperties"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nt">"with"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nt">"properties"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nt">"q"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nt">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"number"</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>

<p>Using <code class="prettyprint">$patch</code>:</p>
<pre class="highlight json"><code><span class="p">{</span><span class="w">
  </span><span class="nt">"$patch"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nt">"source"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nt">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"object"</span><span class="p">,</span><span class="w">
      </span><span class="nt">"properties"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nt">"p"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nt">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"string"</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">},</span><span class="w">
      </span><span class="nt">"additionalProperties"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nt">"with"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="p">{</span><span class="w"> </span><span class="nt">"op"</span><span class="p">:</span><span class="w"> </span><span class="s2">"add"</span><span class="p">,</span><span class="w"> </span><span class="nt">"path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/properties/q"</span><span class="p">,</span><span class="w"> </span><span class="nt">"value"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nt">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"number"</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>

<p>The schemas above are equivalent to the schema:</p>
<pre class="highlight json"><code><span class="w">  </span><span class="s2">"type"</span><span class="err">:</span><span class="w"> </span><span class="s2">"object"</span><span class="err">,</span><span class="w">
  </span><span class="s2">"properties"</span><span class="err">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nt">"p"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nt">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"string"</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="nt">"q"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nt">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"number"</span><span class="w"> </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="err">,</span><span class="w">
  </span><span class="s2">"additionalProperties"</span><span class="err">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></code></pre>

<p>The properties <code class="prettyprint">source</code> and <code class="prettyprint">with</code> in the keywords <code class="prettyprint">$merge</code> and <code class="prettyprint">$patch</code> can use <code class="prettyprint">$ref</code> to point to other schemas previously added to the Ajv instance.</p>

<p>See the package <a href="https://github.com/epoberezkin/ajv-merge-patch">ajv-merge-patch</a> for more information.</p>

<h2 id="defining-custom-keywords">Defining custom keywords</h2>

<p>Starting from version 2.0.0 ajv supports custom keyword definitions.</p>

<p>The advantages of using custom keywords are:</p>

<ul>
<li>allow creating validation scenarios that cannot be expressed using JSON-Schema</li>
<li>simplify your schemas</li>
<li>help bringing a bigger part of the validation logic to your schemas</li>
<li>make your schemas more expressive, less verbose and closer to your application domain</li>
<li>implement custom data processors that modify your data and/or create side effects while the data is being validated</li>
</ul>

<p>The concerns you have to be aware of when extending JSON-schema standard with custom keywords are the portability and understanding of your schemas. You will have to support these custom keywords on other platforms and to properly document these keywords so that everybody can understand them in your schemas.</p>

<p>You can define custom keywords with <a href="#api-addkeyword">addKeyword</a> method. Keywords are defined on the <code class="prettyprint">ajv</code> instance level - new instances will not have previously defined keywords.</p>

<p>Ajv allows defining keywords with:
- validation function
- compilation function
- macro function
- inline compilation function that should return code (as string) that will be inlined in the currently compiled schema.</p>

<p>Example. <code class="prettyprint">range</code> and <code class="prettyprint">exclusiveRange</code> keywords using compiled schema:</p>
<pre class="highlight javascript"><code><span class="nx">ajv</span><span class="p">.</span><span class="nx">addKeyword</span><span class="p">(</span><span class="s1">'range'</span><span class="p">,</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="s1">'number'</span><span class="p">,</span> <span class="na">compile</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">sch</span><span class="p">,</span> <span class="nx">parentSchema</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">min</span> <span class="o">=</span> <span class="nx">sch</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
  <span class="kd">var</span> <span class="nx">max</span> <span class="o">=</span> <span class="nx">sch</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>

  <span class="k">return</span> <span class="nx">parentSchema</span><span class="p">.</span><span class="nx">exclusiveRange</span> <span class="o">===</span> <span class="kc">true</span>
          <span class="p">?</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">data</span> <span class="o">&gt;</span> <span class="nx">min</span> <span class="o">&amp;&amp;</span> <span class="nx">data</span> <span class="o">&lt;</span> <span class="nx">max</span><span class="p">;</span> <span class="p">}</span>
          <span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">data</span> <span class="o">&gt;=</span> <span class="nx">min</span> <span class="o">&amp;&amp;</span> <span class="nx">data</span> <span class="o">&lt;=</span> <span class="nx">max</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span> <span class="p">});</span>

<span class="kd">var</span> <span class="nx">schema</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">"range"</span><span class="p">:</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="s2">"exclusiveRange"</span><span class="p">:</span> <span class="kc">true</span> <span class="p">};</span>
<span class="kd">var</span> <span class="nx">validate</span> <span class="o">=</span> <span class="nx">ajv</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">schema</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">validate</span><span class="p">(</span><span class="mf">2.01</span><span class="p">));</span> <span class="c1">// true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">validate</span><span class="p">(</span><span class="mf">3.99</span><span class="p">));</span> <span class="c1">// true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">validate</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span> <span class="c1">// false</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">validate</span><span class="p">(</span><span class="mi">4</span><span class="p">));</span> <span class="c1">// false</span>
</code></pre>

<p>See <a href="https://github.com/epoberezkin/ajv/blob/master/CUSTOM.md">Defining custom keywords</a> for details.</p>

<h2 id="asynchronous-compilation">Asynchronous compilation</h2>

<p>During asynchronous compilation remote references are loaded using supplied function. See <code class="prettyprint">compileAsync</code> method and <code class="prettyprint">loadSchema</code> <a href="#options">option</a>.</p>

<p>Example:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">ajv</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ajv</span><span class="p">({</span> <span class="na">loadSchema</span><span class="p">:</span> <span class="nx">loadSchema</span> <span class="p">});</span>

<span class="nx">ajv</span><span class="p">.</span><span class="nx">compileAsync</span><span class="p">(</span><span class="nx">schema</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">validate</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">valid</span> <span class="o">=</span> <span class="nx">validate</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
<span class="p">});</span>

<span class="kd">function</span> <span class="nx">loadSchema</span><span class="p">(</span><span class="nx">uri</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">request</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">uri</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span> <span class="o">||</span> <span class="nx">res</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">&gt;=</span> <span class="mi">400</span><span class="p">)</span>
            <span class="nx">callback</span><span class="p">(</span><span class="nx">err</span> <span class="o">||</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">'Loading error: '</span> <span class="o">+</span> <span class="nx">res</span><span class="p">.</span><span class="nx">statusCode</span><span class="p">));</span>
        <span class="k">else</span>
            <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">body</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}</span>
</code></pre>

<p><strong>Please note</strong>: <a href="#options">Option</a> <code class="prettyprint">missingRefs</code> should NOT be set to <code class="prettyprint">&quot;ignore&quot;</code> or <code class="prettyprint">&quot;fail&quot;</code> for asynchronous compilation to work.</p>

<h2 id="asynchronous-validation">Asynchronous validation</h2>

<p>Example in node REPL: https://tonicdev.com/esp/ajv-asynchronous-validation</p>

<p>Starting from version 3.5.0 you can define custom formats and keywords that perform validation asyncronously by accessing database or some service. You should add <code class="prettyprint">async: true</code> in the keyword or format defnition (see <a href="#api-addformat">addFormat</a>, <a href="#api-addkeyword">addKeyword</a> and <a href="#defining-custom-keywords">Defining custom keywords</a>).</p>

<p>If your schema uses asynchronous formats/keywords or refers to some schema that contains them it should have <code class="prettyprint">&quot;$async&quot;: true</code> keyword so that Ajv can compile it correctly. If asynchronous format/keyword or reference to asynchronous schema is used in the schema without <code class="prettyprint">$async</code> keyword Ajv will throw an exception during schema compilation.</p>

<p><strong>Please note</strong>: all asynchronous subschemas that are referenced from the current or other schemas should have <code class="prettyprint">&quot;$async&quot;: true</code> keyword as well, otherwise the schema compilation will fail.</p>

<p>Validation function for an asynchronous custom format/keyword should return a promise that resolves to <code class="prettyprint">true</code> or <code class="prettyprint">false</code> (or rejects with <code class="prettyprint">new Ajv.ValidationError(errors)</code> if you want to return custom errors from the keyword function). Ajv compiles asynchronous schemas to either <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*">generator function</a> (default) that can be optionally transpiled with <a href="https://github.com/facebook/regenerator">regenerator</a> or to <a href="http://tc39.github.io/ecmascript-asyncawait/">es7 async function</a> that can be transpiled with <a href="https://github.com/MatAtBread/nodent">nodent</a> or with regenerator as well. You can also supply any other transpiler as a function. See <a href="#options">Options</a>.</p>

<p>The compiled validation function has <code class="prettyprint">$async: true</code> property (if the schema is asynchronous), so you can differentiate these functions if you are using both syncronous and asynchronous schemas.</p>

<p>If you are using generators, the compiled validation function can be either wrapped with <a href="https://github.com/tj/co">co</a> (default) or returned as generator function, that can be used directly, e.g. in <a href="http://koajs.com/">koa</a> 1.0. <code class="prettyprint">co</code> is a small library, it is included in Ajv (both as npm dependency and in the browser bundle).</p>

<p>Generator functions are currently supported in Chrome, Firefox and node.js (0.11+); if you are using Ajv in other browsers or in older versions of node.js you should use one of available transpiling options. All provided async modes use global Promise class. If your platform does not have Promise you should use a polyfill that defines it.</p>

<p>Validation result will be a promise that resolves to <code class="prettyprint">true</code> or rejects with an exception <code class="prettyprint">Ajv.ValidationError</code> that has the array of validation errors in <code class="prettyprint">errors</code> property.</p>

<p>Example:</p>
<pre class="highlight javascript"><code><span class="cm">/**
 * without "async" and "transpile" options (or with option {async: true})
 * Ajv will choose the first supported/installed option in this order:
 * 1. native generator function wrapped with co
 * 2. es7 async functions transpiled with nodent
 * 3. es7 async functions transpiled with regenerator
 */</span>

<span class="kd">var</span> <span class="nx">ajv</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ajv</span><span class="p">;</span>

<span class="nx">ajv</span><span class="p">.</span><span class="nx">addKeyword</span><span class="p">(</span><span class="s1">'idExists'</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">async</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="na">type</span><span class="p">:</span> <span class="s1">'number'</span><span class="p">,</span>
  <span class="na">validate</span><span class="p">:</span> <span class="nx">checkIdExists</span>
<span class="p">});</span>


<span class="kd">function</span> <span class="nx">checkIdExists</span><span class="p">(</span><span class="nx">schema</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">knex</span><span class="p">(</span><span class="nx">schema</span><span class="p">.</span><span class="nx">table</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s1">'id'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">where</span><span class="p">(</span><span class="s1">'id'</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">rows</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">!!</span><span class="nx">rows</span><span class="o">/</span><span class="nx">length</span><span class="p">;</span> <span class="c1">// true if record is found</span>
  <span class="p">});</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">schema</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s2">"$async"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="s2">"properties"</span><span class="p">:</span> <span class="p">{</span>
    <span class="s2">"userId"</span><span class="p">:</span> <span class="p">{</span>
      <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"integer"</span><span class="p">,</span>
      <span class="s2">"idExists"</span><span class="p">:</span> <span class="p">{</span> <span class="s2">"table"</span><span class="p">:</span> <span class="s2">"users"</span> <span class="p">}</span>
    <span class="p">},</span>
    <span class="s2">"postId"</span><span class="err">:</span> <span class="p">{</span>
      <span class="s2">"type"</span><span class="err">:</span> <span class="s2">"integer"</span><span class="p">,</span>
      <span class="s2">"idExists"</span><span class="err">:</span> <span class="p">{</span> <span class="s2">"table"</span><span class="err">:</span> <span class="s2">"posts"</span> <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">validate</span> <span class="o">=</span> <span class="nx">ajv</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">schema</span><span class="p">);</span>

<span class="nx">validate</span><span class="p">({</span> <span class="na">userId</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">postId</span><span class="p">:</span> <span class="mi">19</span> <span class="p">}))</span>
<span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">valid</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// "valid" is always true here</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Data is valid'</span><span class="p">);</span>
<span class="p">})</span>
<span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">err</span> <span class="k">instanceof</span> <span class="nx">Ajv</span><span class="p">.</span><span class="nx">ValidationError</span><span class="p">))</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>
  <span class="c1">// data is invalid</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Validation errors:'</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nx">errors</span><span class="p">);</span>
<span class="p">});</span>

</code></pre>

<h3 id="using-transpilers-with-asyncronous-validation-functions">Using transpilers with asyncronous validation functions.</h3>

<p>To use a transpiler you should separately install it (or load its bundle in the browser).</p>

<p>Ajv npm package includes minified browser bundles of regenerator and nodent in dist folder.</p>

<h4 id="using-nodent">Using nodent</h4>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">ajv</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ajv</span><span class="p">({</span> <span class="cm">/* async: 'es7', */</span> <span class="na">transpile</span><span class="p">:</span> <span class="s1">'nodent'</span> <span class="p">});</span>
<span class="kd">var</span> <span class="nx">validate</span> <span class="o">=</span> <span class="nx">ajv</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">schema</span><span class="p">);</span> <span class="c1">// transpiled es7 async function</span>
<span class="nx">validate</span><span class="p">(</span><span class="nx">data</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">successFunc</span><span class="p">).</span><span class="k">catch</span><span class="p">(</span><span class="nx">errorFunc</span><span class="p">);</span>
</code></pre>

<p><code class="prettyprint">npm install nodent</code> or use <code class="prettyprint">nodent.min.js</code> from dist folder of npm package.</p>

<h4 id="using-regenerator">Using regenerator</h4>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">ajv</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ajv</span><span class="p">({</span> <span class="cm">/* async: 'es7', */</span> <span class="na">transpile</span><span class="p">:</span> <span class="s1">'regenerator'</span> <span class="p">});</span>
<span class="kd">var</span> <span class="nx">validate</span> <span class="o">=</span> <span class="nx">ajv</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">schema</span><span class="p">);</span> <span class="c1">// transpiled es7 async function</span>
<span class="nx">validate</span><span class="p">(</span><span class="nx">data</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">successFunc</span><span class="p">).</span><span class="k">catch</span><span class="p">(</span><span class="nx">errorFunc</span><span class="p">);</span>
</code></pre>

<p><code class="prettyprint">npm install regenerator</code> or use <code class="prettyprint">regenerator.min.js</code> from dist folder of npm package.</p>

<h4 id="using-other-transpilers">Using other transpilers</h4>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">ajv</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ajv</span><span class="p">({</span> <span class="na">async</span><span class="p">:</span> <span class="s1">'es7'</span><span class="p">,</span> <span class="na">transpile</span><span class="p">:</span> <span class="nx">transpileFunc</span> <span class="p">});</span>
<span class="kd">var</span> <span class="nx">validate</span> <span class="o">=</span> <span class="nx">ajv</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">schema</span><span class="p">);</span> <span class="c1">// transpiled es7 async function</span>
<span class="nx">validate</span><span class="p">(</span><span class="nx">data</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">successFunc</span><span class="p">).</span><span class="k">catch</span><span class="p">(</span><span class="nx">errorFunc</span><span class="p">);</span>
</code></pre>

<p>See <a href="#options">Options</a>.</p>

<h4 id="comparison-of-async-modes">Comparison of async modes</h4>

<table><thead>
<tr>
<th>mode</th>
<th style="text-align: center">transpile<br>speed*</th>
<th style="text-align: center">run-time<br>speed*</th>
<th style="text-align: center">bundle<br>size</th>
</tr>
</thead><tbody>
<tr>
<td>generators<br>(native)</td>
<td style="text-align: center">-</td>
<td style="text-align: center">1.0</td>
<td style="text-align: center">-</td>
</tr>
<tr>
<td>es7.nodent</td>
<td style="text-align: center">1.35</td>
<td style="text-align: center">1.1</td>
<td style="text-align: center">183Kb</td>
</tr>
<tr>
<td>es7.regenerator</td>
<td style="text-align: center">1.0</td>
<td style="text-align: center">2.7</td>
<td style="text-align: center">322Kb</td>
</tr>
<tr>
<td>regenerator</td>
<td style="text-align: center">1.0</td>
<td style="text-align: center">3.2</td>
<td style="text-align: center">322Kb</td>
</tr>
</tbody></table>

<p>* Relative performance in node v.4, smaller is better.</p>

<p><a href="https://github.com/MatAtBread/nodent">nodent</a> has several advantages:</p>

<ul>
<li>much smaller browser bundle than regenerator</li>
<li>almost the same performance of generated code as native generators in nodejs and the latest Chrome</li>
<li>much better performace than native generators in other browsers</li>
<li>works in IE 9 (regenerator does not)</li>
</ul>

<p><a href="https://github.com/facebook/regenerator">regenerator</a> is a more widely adopted alternative.</p>

<h2 id="filtering-data">Filtering data</h2>

<p>With <a href="#options">option <code class="prettyprint">removeAdditional</code></a> (added by <a href="https://github.com/andyscott">andyscott</a>) you can filter data during the validation.</p>

<p>This option modifies original data.</p>

<p>Example:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">ajv</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ajv</span><span class="p">({</span> <span class="na">removeAdditional</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>
<span class="kd">var</span> <span class="nx">schema</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s2">"additionalProperties"</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
  <span class="s2">"properties"</span><span class="p">:</span> <span class="p">{</span>
    <span class="s2">"foo"</span><span class="p">:</span> <span class="p">{</span> <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"number"</span> <span class="p">},</span>
    <span class="s2">"bar"</span><span class="err">:</span> <span class="p">{</span>
      <span class="s2">"additionalProperties"</span><span class="err">:</span> <span class="p">{</span> <span class="s2">"type"</span><span class="err">:</span> <span class="s2">"number"</span> <span class="p">},</span>
      <span class="s2">"properties"</span><span class="err">:</span> <span class="p">{</span>
        <span class="s2">"baz"</span><span class="err">:</span> <span class="p">{</span> <span class="s2">"type"</span><span class="err">:</span> <span class="s2">"string"</span> <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s2">"foo"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="s2">"additional1"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="c1">// will be removed; `additionalProperties` == false</span>
  <span class="s2">"bar"</span><span class="p">:</span> <span class="p">{</span>
    <span class="s2">"baz"</span><span class="p">:</span> <span class="s2">"abc"</span><span class="p">,</span>
    <span class="s2">"additional2"</span><span class="p">:</span> <span class="mi">2</span> <span class="c1">// will NOT be removed; `additionalProperties` != false</span>
  <span class="p">},</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">validate</span> <span class="o">=</span> <span class="nx">ajv</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">schema</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">validate</span><span class="p">(</span><span class="nx">data</span><span class="p">));</span> <span class="c1">// true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span> <span class="c1">// { "foo": 0, "bar": { "baz": "abc", "additional2": 2 }</span>
</code></pre>

<p>If <code class="prettyprint">removeAdditional</code> option in the example above were <code class="prettyprint">&quot;all&quot;</code> then both <code class="prettyprint">additional1</code> and <code class="prettyprint">additional2</code> properties would have been removed.</p>

<p>If the option were <code class="prettyprint">&quot;failing&quot;</code> then property <code class="prettyprint">additional1</code> would have been removed regardless of its value and property <code class="prettyprint">additional2</code> would have been removed only if its value were failing the schema in the inner <code class="prettyprint">additionalProperties</code> (so in the example above it would have stayed because it passes the schema, but any non-number would have been removed).</p>

<p><strong>Please note</strong>: If you use <code class="prettyprint">removeAdditional</code> option with <code class="prettyprint">additionalProperties</code> keyword inside <code class="prettyprint">anyOf</code>/<code class="prettyprint">oneOf</code> keywords your validation can fail with this schema, for example:</p>
<pre class="highlight plaintext"><code>{
  "type": "object",
  "oneOf": [
    {
      "properties": {
        "foo": { "type": "string" }
      },
      "required": [ "foo" ],
      "additionalProperties": false
    },
    {
      "properties": {
        "bar": { "type": "integer" }
      },
      "required": [ "bar" ],
      "additionalProperties": false
    }
  ]
}
</code></pre>

<p>The intention of the schema above is to allow objects with either the string property &ldquo;foo&rdquo; or the integer property &ldquo;bar&rdquo;, but not with both and not with any other properties.</p>

<p>With the option <code class="prettyprint">removeAdditional: true</code> the validation will pass for the object <code class="prettyprint">{ &quot;foo&quot;: &quot;abc&quot;}</code> but will fail for the object <code class="prettyprint">{&quot;bar&quot;: 1}</code>. It happens because while the first subschema in <code class="prettyprint">oneOf</code> is validated, the property <code class="prettyprint">bar</code> is removed because it is an additional property according to the standard (because it is not included in <code class="prettyprint">properties</code> keyword in the same schema).</p>

<p>While this behaviour is unexpected (issues <a href="https://github.com/epoberezkin/ajv/issues/129">#129</a>, <a href="https://github.com/epoberezkin/ajv/issues/134">#134</a>), it is correct. To have the expected behaviour (both objects are allowed and additional properties are removed) the schema has to be refactored in this way:</p>
<pre class="highlight plaintext"><code>{
  "type": "object",
  "properties": {
    "foo": { "type": "string" },
    "bar": { "type": "integer" }
  },
  "additionalProperties": false,
  "oneOf": [
    { "required": [ "foo" ] },
    { "required": [ "bar" ] }
  ]
}
</code></pre>

<p>The schema above is also more efficient - it will compile into a faster function.</p>

<h2 id="assigning-defaults">Assigning defaults</h2>

<p>With <a href="#options">option <code class="prettyprint">useDefaults</code></a> Ajv will assign values from <code class="prettyprint">default</code> keyword in the schemas of <code class="prettyprint">properties</code> and <code class="prettyprint">items</code> (when it is the array of schemas) to the missing properties and items.</p>

<p>This option modifies original data.</p>

<p><strong>Please note</strong>: by default the default value is inserted in the generated validation code as a literal (starting from v4.0), so the value inserted in the data will be the deep clone of the default in the schema.</p>

<p>If you need to insert the default value in the data by reference pass the option <code class="prettyprint">useDefaults: &quot;shared&quot;</code>.</p>

<p>Inserting defaults by reference can be faster (in case you have an object in <code class="prettyprint">default</code>) and it allows to have dynamic values in defaults, e.g. timestamp, without recompiling the schema. The side effect is that modifying the default value in any validated data instance will change the default in the schema and in other validated data instances. See example 3 below.</p>

<p>Example 1 (<code class="prettyprint">default</code> in <code class="prettyprint">properties</code>):</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">ajv</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ajv</span><span class="p">({</span> <span class="na">useDefaults</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>
<span class="kd">var</span> <span class="nx">schema</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"object"</span><span class="p">,</span>
  <span class="s2">"properties"</span><span class="p">:</span> <span class="p">{</span>
    <span class="s2">"foo"</span><span class="p">:</span> <span class="p">{</span> <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"number"</span> <span class="p">},</span>
    <span class="s2">"bar"</span><span class="err">:</span> <span class="p">{</span> <span class="s2">"type"</span><span class="err">:</span> <span class="s2">"string"</span><span class="p">,</span> <span class="s2">"default"</span><span class="err">:</span> <span class="s2">"baz"</span> <span class="p">}</span>
  <span class="p">},</span>
  <span class="s2">"required"</span><span class="err">:</span> <span class="p">[</span> <span class="s2">"foo"</span><span class="p">,</span> <span class="s2">"bar"</span> <span class="p">]</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">"foo"</span><span class="p">:</span> <span class="mi">1</span> <span class="p">};</span>

<span class="kd">var</span> <span class="nx">validate</span> <span class="o">=</span> <span class="nx">ajv</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">schema</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">validate</span><span class="p">(</span><span class="nx">data</span><span class="p">));</span> <span class="c1">// true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span> <span class="c1">// { "foo": 1, "bar": "baz" }</span>
</code></pre>

<p>Example 2 (<code class="prettyprint">default</code> in <code class="prettyprint">items</code>):</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">schema</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"array"</span><span class="p">,</span>
  <span class="s2">"items"</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span> <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"number"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"string"</span><span class="p">,</span> <span class="s2">"default"</span><span class="p">:</span> <span class="s2">"foo"</span> <span class="p">}</span>
  <span class="p">]</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">[</span> <span class="mi">1</span> <span class="p">];</span>

<span class="kd">var</span> <span class="nx">validate</span> <span class="o">=</span> <span class="nx">ajv</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">schema</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">validate</span><span class="p">(</span><span class="nx">data</span><span class="p">));</span> <span class="c1">// true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span> <span class="c1">// [ 1, "foo" ]</span>
</code></pre>

<p>Example 3 (inserting &ldquo;defaults&rdquo; by reference):</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">ajv</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ajv</span><span class="p">({</span> <span class="na">useDefaults</span><span class="p">:</span> <span class="s1">'shared'</span> <span class="p">});</span>

<span class="kd">var</span> <span class="nx">schema</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">properties</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">foo</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">default</span><span class="p">:</span> <span class="p">{</span> <span class="na">bar</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">validate</span> <span class="o">=</span> <span class="nx">ajv</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">schema</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{};</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">validate</span><span class="p">(</span><span class="nx">data</span><span class="p">));</span> <span class="c1">// true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span> <span class="c1">// { foo: { bar: 1 } }</span>

<span class="nx">data</span><span class="p">.</span><span class="nx">foo</span><span class="p">.</span><span class="nx">bar</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">data2</span> <span class="o">=</span> <span class="p">{};</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">validate</span><span class="p">(</span><span class="nx">data2</span><span class="p">));</span> <span class="c1">// true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data2</span><span class="p">);</span> <span class="c1">// { foo: { bar: 2 } }</span>
</code></pre>

<p><code class="prettyprint">default</code> keywords in other cases are ignored:</p>

<ul>
<li>not in <code class="prettyprint">properties</code> or <code class="prettyprint">items</code> subschemas</li>
<li>in schemas inside <code class="prettyprint">anyOf</code>, <code class="prettyprint">oneOf</code> and <code class="prettyprint">not</code> (see <a href="https://github.com/epoberezkin/ajv/issues/42">#42</a>)</li>
<li>in <code class="prettyprint">if</code> subschema of v5 <code class="prettyprint">switch</code> keyword</li>
<li>in schemas generated by custom macro keywords</li>
</ul>

<h2 id="coercing-data-types">Coercing data types</h2>

<p>When you are validating user inputs all your data properties are usually strings. The option <code class="prettyprint">coerceTypes</code> allows you to have your data types coerced to the types specified in your schema <code class="prettyprint">type</code> keywords, both to pass the validation and to use the correctly typed data afterwards.</p>

<p>This option modifies original data.</p>

<p><strong>Please note</strong>: if you pass a scalar value to the validating function its type will be coerced and it will pass the validation, but the value of the variable you pass won&rsquo;t be updated because scalars are passed by value.</p>

<p>Example 1:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">ajv</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ajv</span><span class="p">({</span> <span class="na">coerceTypes</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>
<span class="kd">var</span> <span class="nx">schema</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"object"</span><span class="p">,</span>
  <span class="s2">"properties"</span><span class="p">:</span> <span class="p">{</span>
    <span class="s2">"foo"</span><span class="p">:</span> <span class="p">{</span> <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"number"</span> <span class="p">},</span>
    <span class="s2">"bar"</span><span class="err">:</span> <span class="p">{</span> <span class="s2">"type"</span><span class="err">:</span> <span class="s2">"boolean"</span> <span class="p">}</span>
  <span class="p">},</span>
  <span class="s2">"required"</span><span class="err">:</span> <span class="p">[</span> <span class="s2">"foo"</span><span class="p">,</span> <span class="s2">"bar"</span> <span class="p">]</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">"foo"</span><span class="p">:</span> <span class="s2">"1"</span><span class="p">,</span> <span class="s2">"bar"</span><span class="p">:</span> <span class="s2">"false"</span> <span class="p">};</span>

<span class="kd">var</span> <span class="nx">validate</span> <span class="o">=</span> <span class="nx">ajv</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">schema</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">validate</span><span class="p">(</span><span class="nx">data</span><span class="p">));</span> <span class="c1">// true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span> <span class="c1">// { "foo": 1, "bar": false }</span>
</code></pre>

<p>Example 2 (array coercions):</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">ajv</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ajv</span><span class="p">({</span> <span class="na">coerceTypes</span><span class="p">:</span> <span class="s1">'array'</span> <span class="p">});</span>
<span class="kd">var</span> <span class="nx">schema</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s2">"properties"</span><span class="p">:</span> <span class="p">{</span>
    <span class="s2">"foo"</span><span class="p">:</span> <span class="p">{</span> <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"array"</span><span class="p">,</span> <span class="s2">"items"</span><span class="p">:</span> <span class="p">{</span> <span class="s2">"type"</span><span class="p">:</span> <span class="s2">"number"</span> <span class="p">}</span> <span class="p">},</span>
    <span class="s2">"bar"</span><span class="err">:</span> <span class="p">{</span> <span class="s2">"type"</span><span class="err">:</span> <span class="s2">"boolean"</span> <span class="p">}</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">"foo"</span><span class="p">:</span> <span class="s2">"1"</span><span class="p">,</span> <span class="s2">"bar"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"false"</span><span class="p">]</span> <span class="p">};</span>

<span class="kd">var</span> <span class="nx">validate</span> <span class="o">=</span> <span class="nx">ajv</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">schema</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">validate</span><span class="p">(</span><span class="nx">data</span><span class="p">));</span> <span class="c1">// true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span> <span class="c1">// { "foo": [1], "bar": false }</span>
</code></pre>

<p>The coercion rules, as you can see from the example, are different from JavaScript both to validate user input as expected and to have the coercion reversible (to correctly validate cases where different types are defined in subschemas of &ldquo;anyOf&rdquo; and other compound keywords).</p>

<p>See <a href="https://github.com/epoberezkin/ajv/blob/master/COERCION.md">Coercion rules</a> for details.</p>

<h2 id="api">API</h2>

<h5 id="new-ajv-object-options-gt-object">new Ajv(Object options) -&gt; Object</h5>

<p>Create Ajv instance.</p>

<p>All the instance methods below are bound to the instance, so they can be used without the instance.</p>

<h5 id="compile-object-schema-gt-function-lt-object-data-gt">.compile(Object schema) -&gt; Function&lt;Object data&gt;</h5>

<p>Generate validating function and cache the compiled schema for future use.</p>

<p>Validating function returns boolean and has properties <code class="prettyprint">errors</code> with the errors from the last validation (<code class="prettyprint">null</code> if there were no errors) and <code class="prettyprint">schema</code> with the reference to the original schema.</p>

<p>Unless the option <code class="prettyprint">validateSchema</code> is false, the schema will be validated against meta-schema and if schema is invalid the error will be thrown. See <a href="#options">options</a>.</p>

<h5 id="compileasync-object-schema-function-callback">.compileAsync(Object schema, Function callback)</h5>

<p>Asyncronous version of <code class="prettyprint">compile</code> method that loads missing remote schemas using asynchronous function in <code class="prettyprint">options.loadSchema</code>. Callback will always be called with 2 parameters: error (or null) and validating function. Error will be not null in the following cases:</p>

<ul>
<li>missing schema can&rsquo;t be loaded (<code class="prettyprint">loadSchema</code> calls callback with error).</li>
<li>the schema containing missing reference is loaded, but the reference cannot be resolved.</li>
<li>schema (or some referenced schema) is invalid.</li>
</ul>

<p>The function compiles schema and loads the first missing schema multiple times, until all missing schemas are loaded.</p>

<p>See example in <a href="#asynchronous-compilation">Asynchronous compilation</a>.</p>

<h5 id="validate-object-schema-string-key-string-ref-data-gt-boolean">.validate(Object schema|String key|String ref, data) -&gt; Boolean</h5>

<p>Validate data using passed schema (it will be compiled and cached).</p>

<p>Instead of the schema you can use the key that was previously passed to <code class="prettyprint">addSchema</code>, the schema id if it was present in the schema or any previously resolved reference.</p>

<p>Validation errors will be available in the <code class="prettyprint">errors</code> property of Ajv instance (<code class="prettyprint">null</code> if there were no errors).</p>

<p><strong>Please note</strong>: every time this method is called the errors are overwritten so you need to copy them to another variable if you want to use them later.</p>

<p>If the schema is asynchronous (has <code class="prettyprint">$async</code> keyword on the top level) this method returns a Promise. See <a href="#asynchronous-validation">Asynchronous validation</a>.</p>

<h5 id="addschema-array-lt-object-gt-object-schema-string-key">.addSchema(Array&lt;Object&gt;|Object schema [, String key])</h5>

<p>Add schema(s) to validator instance. From version 1.0.0 this method does not compile schemas (but it still validates them). Because of that change, dependencies can be added in any order and circular dependencies are supported. It also prevents unnecessary compilation of schemas that are containers for other schemas but not used as a whole.</p>

<p>Array of schemas can be passed (schemas should have ids), the second parameter will be ignored.</p>

<p>Key can be passed that can be used to reference the schema and will be used as the schema id if there is no id inside the schema. If the key is not passed, the schema id will be used as the key.</p>

<p>Once the schema is added, it (and all the references inside it) can be referenced in other schemas and used to validate data.</p>

<p>Although <code class="prettyprint">addSchema</code> does not compile schemas, explicit compilation is not required - the schema will be compiled when it is used first time.</p>

<p>By default the schema is validated against meta-schema before it is added, and if the schema does not pass validation the exception is thrown. This behaviour is controlled by <code class="prettyprint">validateSchema</code> option.</p>

<h5 id="addmetaschema-array-lt-object-gt-object-schema-string-key">.addMetaSchema(Array&lt;Object&gt;|Object schema [, String key])</h5>

<p>Adds meta schema(s) that can be used to validate other schemas. That function should be used instead of <code class="prettyprint">addSchema</code> because there may be instance options that would compile a meta schema incorrectly (at the moment it is <code class="prettyprint">removeAdditional</code> option).</p>

<p>There is no need to explicitly add draft 4 meta schema (http://json-schema.org/draft-04/schema and http://json-schema.org/schema) - it is added by default, unless option <code class="prettyprint">meta</code> is set to <code class="prettyprint">false</code>. You only need to use it if you have a changed meta-schema that you want to use to validate your schemas. See <code class="prettyprint">validateSchema</code>.</p>

<p>With option <code class="prettyprint">v5: true</code> <a href="https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/json-schema-v5.json">meta-schema that includes v5 keywords</a> also added.</p>

<h5 id="validateschema-object-schema-gt-boolean"><a name="api-validateschema"></a>.validateSchema(Object schema) -&gt; Boolean</h5>

<p>Validates schema. This method should be used to validate schemas rather than <code class="prettyprint">validate</code> due to the inconsistency of <code class="prettyprint">uri</code> format in JSON-Schema standard.</p>

<p>By default this method is called automatically when the schema is added, so you rarely need to use it directly.</p>

<p>If schema doesn&rsquo;t have <code class="prettyprint">$schema</code> property it is validated against draft 4 meta-schema (option <code class="prettyprint">meta</code> should not be false) or against <a href="https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/json-schema-v5.json#">v5 meta-schema</a> if option <code class="prettyprint">v5</code> is true.</p>

<p>If schema has <code class="prettyprint">$schema</code> property then the schema with this id (that should be previously added) is used to validate passed schema.</p>

<p>Errors will be available at <code class="prettyprint">ajv.errors</code>.</p>

<h5 id="getschema-string-key-gt-function-lt-object-data-gt">.getSchema(String key) -&gt; Function&lt;Object data&gt;</h5>

<p>Retrieve compiled schema previously added with <code class="prettyprint">addSchema</code> by the key passed to <code class="prettyprint">addSchema</code> or by its full reference (id). Returned validating function has <code class="prettyprint">schema</code> property with the reference to the original schema.</p>

<h5 id="removeschema-object-schema-string-key-string-ref-regexp-pattern">.removeSchema([Object schema|String key|String ref|RegExp pattern])</h5>

<p>Remove added/cached schema. Even if schema is referenced by other schemas it can be safely removed as dependent schemas have local references.</p>

<p>Schema can be removed using:
- key passed to <code class="prettyprint">addSchema</code>
- it&rsquo;s full reference (id)
- RegExp that should match schema id or key (meta-schemas won&rsquo;t be removed)
- actual schema object that will be stable-stringified to remove schema from cache</p>

<p>If no parameter is passed all schemas but meta-schemas will be removed and the cache will be cleared.</p>

<h5 id="addformat-string-name-string-regexp-function-object-format"><a name="api-addformat"></a>.addFormat(String name, String|RegExp|Function|Object format)</h5>

<p>Add custom format to validate strings. It can also be used to replace pre-defined formats for Ajv instance.</p>

<p>Strings are converted to RegExp.</p>

<p>Function should return validation result as <code class="prettyprint">true</code> or <code class="prettyprint">false</code>.</p>

<p>If object is passed it should have properties <code class="prettyprint">validate</code>, <code class="prettyprint">compare</code> and <code class="prettyprint">async</code>:</p>

<ul>
<li><em>validate</em>: a string, RegExp or a function as described above.</li>
<li><em>compare</em>: an optional comparison function that accepts two strings and compares them according to the format meaning. This function is used with keywords <code class="prettyprint">formatMaximum</code>/<code class="prettyprint">formatMinimum</code> (from <a href="https://github.com/json-schema/json-schema/wiki/v5-Proposals">v5 proposals</a> - <code class="prettyprint">v5</code> option should be used). It should return <code class="prettyprint">1</code> if the first value is bigger than the second value, <code class="prettyprint">-1</code> if it is smaller and <code class="prettyprint">0</code> if it is equal.</li>
<li><em>async</em>: an optional <code class="prettyprint">true</code> value if <code class="prettyprint">validate</code> is an asynchronous function; in this case it should return a promise that resolves with a value <code class="prettyprint">true</code> or <code class="prettyprint">false</code>.</li>
</ul>

<p>Custom formats can be also added via <code class="prettyprint">formats</code> option.</p>

<h5 id="addkeyword-string-keyword-object-definition"><a name="api-addkeyword"></a>.addKeyword(String keyword, Object definition)</h5>

<p>Add custom validation keyword to Ajv instance.</p>

<p>Keyword should be a valid JavaScript identifier.</p>

<p>Keyword should be different from all standard JSON schema keywords and different from previously defined keywords. There is no way to redefine keywords or to remove keyword definition from the instance.</p>

<p>Keyword definition is an object with the following properties:</p>

<ul>
<li><em>type</em>: optional string or array of strings with data type(s) that the keyword applies to. If not present, the keyword will apply to all types.</li>
<li><em>validate</em>: validating function</li>
<li><em>compile</em>: compiling function</li>
<li><em>macro</em>: macro function</li>
<li><em>inline</em>: compiling function that returns code (as string)</li>
<li><em>schema</em>: an optional <code class="prettyprint">false</code> value used with &ldquo;validate&rdquo; keyword to not pass schema</li>
<li><em>metaSchema</em>: an optional meta-schema for keyword schema</li>
<li><em>$data</em>: an optional <code class="prettyprint">true</code> value to support <a href="#data-reference">$data reference</a> as the value of custom keyword. The reference will be resolved at validation time. If the keyword has meta-schema it would be extended to allow $data and it will be used to validate the resolved value. Supporting $data reference requires that keyword has validating function (as the only option or in addition to compile, macro or inline function).</li>
<li><em>async</em>: an optional <code class="prettyprint">true</code> value if the validation function is asynchronous (whether it is compiled or passed in <em>validate</em> property); in this case it should return a promise that resolves with a value <code class="prettyprint">true</code> or <code class="prettyprint">false</code>. This option is ignored in case of &ldquo;macro&rdquo; and &ldquo;inline&rdquo; keywords.</li>
<li><em>errors</em>: an optional boolean indicating whether keyword returns errors. If this property is not set Ajv will determine if the errors were set in case of failed validation.</li>
</ul>

<p><em>compile</em>, <em>macro</em> and <em>inline</em> are mutually exclusive, only one should be used at a time. <em>validate</em> can be used separately or in addition to them to support $data reference.</p>

<p><strong>Please note</strong>: If the keyword is validating data type that is different from the type(s) in its definition, the validation function will not be called (and expanded macro will not be used), so there is no need to check for data type inside validation function or inside schema returned by macro function (unless you want to enforce a specific type and for some reason do not want to use a separate <code class="prettyprint">type</code> keyword for that). In the same way as standard keywords work, if the keyword does not apply to the data type being validated, the validation of this keyword will succeed.</p>

<p>See <a href="#defining-custom-keywords">Defining custom keywords</a> for more details.</p>

<h5 id="errorstext-array-lt-object-gt-errors-object-options-gt-string">.errorsText([Array&lt;Object&gt; errors [, Object options]]) -&gt; String</h5>

<p>Returns the text with all errors in a String.</p>

<p>Options can have properties <code class="prettyprint">separator</code> (string used to separate errors, &ldquo;, &rdquo; by default) and <code class="prettyprint">dataVar</code> (the variable name that dataPaths are prefixed with, &ldquo;data&rdquo; by default).</p>

<h2 id="options">Options</h2>

<p>Defaults:</p>
<pre class="highlight javascript"><code><span class="p">{</span>
  <span class="c1">// validation and reporting options:</span>
  <span class="nl">v5</span><span class="p">:</span>               <span class="kc">false</span><span class="p">,</span>
  <span class="nx">allErrors</span><span class="err">:</span>        <span class="kc">false</span><span class="p">,</span>
  <span class="nx">verbose</span><span class="err">:</span>          <span class="kc">false</span><span class="p">,</span>
  <span class="nx">jsonPointers</span><span class="err">:</span>     <span class="kc">false</span><span class="p">,</span>
  <span class="nx">uniqueItems</span><span class="err">:</span>      <span class="kc">true</span><span class="p">,</span>
  <span class="nx">unicode</span><span class="err">:</span>          <span class="kc">true</span><span class="p">,</span>
  <span class="nx">format</span><span class="err">:</span>           <span class="s1">'fast'</span><span class="p">,</span>
  <span class="nx">formats</span><span class="err">:</span>          <span class="p">{},</span>
  <span class="nx">schemas</span><span class="err">:</span>          <span class="p">{},</span>
  <span class="c1">// referenced schema options:</span>
  <span class="nx">missingRefs</span><span class="err">:</span>      <span class="kc">true</span><span class="p">,</span>
  <span class="nx">extendRefs</span><span class="err">:</span>       <span class="kc">true</span><span class="p">,</span>
  <span class="nx">loadSchema</span><span class="err">:</span>       <span class="kc">undefined</span><span class="p">,</span> <span class="c1">// function(uri, cb) { /* ... */ cb(err, schema); },</span>
  <span class="c1">// options to modify validated data:</span>
  <span class="nx">removeAdditional</span><span class="err">:</span> <span class="kc">false</span><span class="p">,</span>
  <span class="nx">useDefaults</span><span class="err">:</span>      <span class="kc">false</span><span class="p">,</span>
  <span class="nx">coerceTypes</span><span class="err">:</span>      <span class="kc">false</span><span class="p">,</span>
  <span class="c1">// asynchronous validation options:</span>
  <span class="nx">async</span><span class="err">:</span>            <span class="kc">undefined</span><span class="p">,</span>
  <span class="nx">transpile</span><span class="err">:</span>        <span class="kc">undefined</span><span class="p">,</span>
  <span class="c1">// advanced options:</span>
  <span class="nx">meta</span><span class="err">:</span>             <span class="kc">true</span><span class="p">,</span>
  <span class="nx">validateSchema</span><span class="err">:</span>   <span class="kc">true</span><span class="p">,</span>
  <span class="nx">addUsedSchema</span><span class="err">:</span>    <span class="kc">true</span><span class="p">,</span>
  <span class="nx">inlineRefs</span><span class="err">:</span>       <span class="kc">true</span><span class="p">,</span>
  <span class="nx">passContext</span><span class="err">:</span>      <span class="kc">false</span><span class="p">,</span>
  <span class="nx">loopRequired</span><span class="err">:</span>     <span class="kc">Infinity</span><span class="p">,</span>
  <span class="nx">ownProperties</span><span class="err">:</span>    <span class="kc">false</span><span class="p">,</span>
  <span class="nx">multipleOfPrecision</span><span class="err">:</span> <span class="kc">false</span><span class="p">,</span>
  <span class="nx">errorDataPath</span><span class="err">:</span>    <span class="s1">'object'</span><span class="p">,</span>
  <span class="nx">messages</span><span class="err">:</span>         <span class="kc">true</span><span class="p">,</span>
  <span class="nx">beautify</span><span class="err">:</span>         <span class="kc">false</span><span class="p">,</span>
  <span class="nx">cache</span><span class="err">:</span>            <span class="k">new</span> <span class="nx">Cache</span>
<span class="p">}</span>
</code></pre>

<h5 id="validation-and-reporting-options">Validation and reporting options</h5>

<ul>
<li><em>v5</em>: add keywords <code class="prettyprint">switch</code>, <code class="prettyprint">constant</code>, <code class="prettyprint">contains</code>, <code class="prettyprint">patternGroups</code>, <code class="prettyprint">patternRequired</code>, <code class="prettyprint">formatMaximum</code> / <code class="prettyprint">formatMinimum</code> and <code class="prettyprint">formatExclusiveMaximum</code> / <code class="prettyprint">formatExclusiveMinimum</code> from <a href="https://github.com/json-schema/json-schema/wiki/v5-Proposals">JSON-schema v5 proposals</a>. With this option added schemas without <code class="prettyprint">$schema</code> property are validated against <a href="https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/json-schema-v5.json#">v5 meta-schema</a>. <code class="prettyprint">false</code> by default.</li>
<li><em>allErrors</em>: check all rules collecting all errors. Default is to return after the first error.</li>
<li><em>verbose</em>: include the reference to the part of the schema (<code class="prettyprint">schema</code> and <code class="prettyprint">parentSchema</code>) and validated data in errors (false by default).</li>
<li><em>jsonPointers</em>: set <code class="prettyprint">dataPath</code> propery of errors using <a href="https://tools.ietf.org/html/rfc6901">JSON Pointers</a> instead of JavaScript property access notation.</li>
<li><em>uniqueItems</em>: validate <code class="prettyprint">uniqueItems</code> keyword (true by default).</li>
<li><em>unicode</em>: calculate correct length of strings with unicode pairs (true by default). Pass <code class="prettyprint">false</code> to use <code class="prettyprint">.length</code> of strings that is faster, but gives &ldquo;incorrect&rdquo; lengths of strings with unicode pairs - each unicode pair is counted as two characters.</li>
<li><em>format</em>: formats validation mode (&lsquo;fast&rsquo; by default). Pass &#39;full&rsquo; for more correct and slow validation or <code class="prettyprint">false</code> not to validate formats at all. E.g., 25:00:00 and 2015/14/33 will be invalid time and date in &#39;full&rsquo; mode but it will be valid in &#39;fast&rsquo; mode.</li>
<li><em>formats</em>: an object with custom formats. Keys and values will be passed to <code class="prettyprint">addFormat</code> method.</li>
<li><em>schemas</em>: an array or object of schemas that will be added to the instance. If the order is important, pass array. In this case schemas must have IDs in them. Otherwise the object can be passed - <code class="prettyprint">addSchema(value, key)</code> will be called for each schema in this object.</li>
</ul>

<h5 id="referenced-schema-options">Referenced schema options</h5>

<ul>
<li><em>missingRefs</em>: handling of missing referenced schemas. Option values:

<ul>
<li><code class="prettyprint">true</code> (default) - if the reference cannot be resolved during compilation the exception is thrown. The thrown error has properties <code class="prettyprint">missingRef</code> (with hash fragment) and <code class="prettyprint">missingSchema</code> (without it). Both properties are resolved relative to the current base id (usually schema id, unless it was substituted).</li>
<li><code class="prettyprint">&quot;ignore&quot;</code> - to log error during compilation and always pass validation.</li>
<li><code class="prettyprint">&quot;fail&quot;</code> - to log error and successfully compile schema but fail validation if this rule is checked.</li>
</ul></li>
<li><em>extendRefs</em>: validation of other keywords when <code class="prettyprint">$ref</code> is present in the schema. Option values:

<ul>
<li><code class="prettyprint">true</code> (default) - validate all keywords in the schemas with <code class="prettyprint">$ref</code>.</li>
<li><code class="prettyprint">&quot;ignore&quot;</code> - when <code class="prettyprint">$ref</code> is used other keywords are ignored (as per <a href="https://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03#section-3">JSON Reference</a> standard). A warning will be logged during the schema compilation.</li>
<li><code class="prettyprint">&quot;fail&quot;</code> - if other validation keywords are used together with <code class="prettyprint">$ref</code> the exception will be throw when the schema is compiled.</li>
</ul></li>
<li><em>loadSchema</em>: asynchronous function that will be used to load remote schemas when the method <code class="prettyprint">compileAsync</code> is used and some reference is missing (option <code class="prettyprint">missingRefs</code> should NOT be &#39;fail&rsquo; or &#39;ignore&rsquo;). This function should accept 2 parameters: remote schema uri and node-style callback. See example in <a href="#asynchronous-compilation">Asynchronous compilation</a>.</li>
</ul>

<h5 id="options-to-modify-validated-data">Options to modify validated data</h5>

<ul>
<li><em>removeAdditional</em>: remove additional properties - see example in <a href="#filtering-data">Filtering data</a>. This option is not used if schema is added with <code class="prettyprint">addMetaSchema</code> method. Option values:

<ul>
<li><code class="prettyprint">false</code> (default) - not to remove additional properties</li>
<li><code class="prettyprint">&quot;all&quot;</code> - all additional properties are removed, regardless of <code class="prettyprint">additionalProperties</code> keyword in schema (and no validation is made for them).</li>
<li><code class="prettyprint">true</code> - only additional properties with <code class="prettyprint">additionalProperties</code> keyword equal to <code class="prettyprint">false</code> are removed.</li>
<li><code class="prettyprint">&quot;failing&quot;</code> - additional properties that fail schema validation will be removed (where <code class="prettyprint">additionalProperties</code> keyword is <code class="prettyprint">false</code> or schema).</li>
</ul></li>
<li><em>useDefaults</em>: replace missing properties and items with the values from corresponding <code class="prettyprint">default</code> keywords. Default behaviour is to ignore <code class="prettyprint">default</code> keywords. This option is not used if schema is added with <code class="prettyprint">addMetaSchema</code> method. See examples in <a href="#assigning-defaults">Assigning defaults</a>. Option values:

<ul>
<li><code class="prettyprint">false</code> (default) - do not use defaults</li>
<li><code class="prettyprint">true</code> - insert defaults by value (safer and slower, object literal is used).</li>
<li><code class="prettyprint">&quot;shared&quot;</code> - insert defaults by reference (faster). If the default is an object, it will be shared by all instances of validated data. If you modify the inserted default in the validated data, it will be modified in the schema as well.</li>
</ul></li>
<li><em>coerceTypes</em>: change data type of data to match <code class="prettyprint">type</code> keyword. See the example in <a href="#coercing-data-types">Coercing data types</a> and <a href="https://github.com/epoberezkin/ajv/blob/master/COERCION.md">coercion rules</a>. Option values:

<ul>
<li><code class="prettyprint">false</code> (default) - no type coercion.</li>
<li><code class="prettyprint">true</code> - coerce scalar data types.</li>
<li><code class="prettyprint">&quot;array&quot;</code> - in addition to coercions between scalar types, coerce scalar data to an array with one element and vice versa (as required by the schema).</li>
</ul></li>
</ul>

<h5 id="asynchronous-validation-options">Asynchronous validation options</h5>

<ul>
<li><em>async</em>: determines how Ajv compiles asynchronous schemas (see <a href="#asynchronous-validation">Asynchronous validation</a>) to functions. Option values:

<ul>
<li><code class="prettyprint">&quot;*&quot;</code> / <code class="prettyprint">&quot;co*&quot;</code> - compile to generator function (&ldquo;co*&rdquo; - wrapped with <code class="prettyprint">co.wrap</code>). If generators are not supported and you don&rsquo;t provide <code class="prettyprint">transpile</code> option, the exception will be thrown when Ajv instance is created.</li>
<li><code class="prettyprint">&quot;es7&quot;</code> - compile to es7 async function. Unless your platform supports them you need to provide <code class="prettyprint">transpile</code> option. Currently only MS Edge 13 with flag supports es7 async functions according to <a href="http://kangax.github.io/compat-table/es7/">compatibility table</a>).</li>
<li><code class="prettyprint">true</code> - if transpile option is not passed Ajv will choose the first supported/installed async/transpile modes in this order: &ldquo;co*&rdquo; (native generator with co.wrap), &ldquo;es7&rdquo;/&ldquo;nodent&rdquo;, &ldquo;co*&rdquo;/&ldquo;regenerator&rdquo; during the creation of the Ajv instance. If none of the options is available the exception will be thrown.</li>
<li><code class="prettyprint">undefined</code>- Ajv will choose the first available async mode in the same way as with <code class="prettyprint">true</code> option but when the first asynchronous schema is compiled.</li>
</ul></li>
<li><em>transpile</em>: determines whether Ajv transpiles compiled asynchronous validation function. Option values:

<ul>
<li><code class="prettyprint">&quot;nodent&quot;</code> - transpile with <a href="https://github.com/MatAtBread/nodent">nodent</a>. If nodent is not installed, the exception will be thrown. nodent can only transpile es7 async functions; it will enforce this mode.</li>
<li><code class="prettyprint">&quot;regenerator&quot;</code> - transpile with <a href="https://github.com/facebook/regenerator">regenerator</a>. If regenerator is not installed, the exception will be thrown.</li>
<li>a function - this function should accept the code of validation function as a string and return transpiled code. This option allows you to use any other transpiler you prefer.</li>
</ul></li>
</ul>

<h5 id="advanced-options">Advanced options</h5>

<ul>
<li><em>meta</em>: add <a href="http://json-schema.org/documentation.html">meta-schema</a> so it can be used by other schemas (true by default). With option <code class="prettyprint">v5: true</code> <a href="https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/json-schema-v5.json#">v5 meta-schema</a> will be added as well. If an object is passed, it will be used as the default meta-schema for schemas that have no <code class="prettyprint">$schema</code> keyword. This default meta-schema MUST have <code class="prettyprint">$schema</code> keyword.</li>
<li><em>validateSchema</em>: validate added/compiled schemas against meta-schema (true by default). <code class="prettyprint">$schema</code> property in the schema can either be http://json-schema.org/schema or http://json-schema.org/draft-04/schema or absent (draft-4 meta-schema will be used) or can be a reference to the schema previously added with <code class="prettyprint">addMetaSchema</code> method. Option values:

<ul>
<li><code class="prettyprint">true</code> (default) -  if the validation fails, throw the exception.</li>
<li><code class="prettyprint">&quot;log&quot;</code> - if the validation fails, log error.</li>
<li><code class="prettyprint">false</code> - skip schema validation.</li>
</ul></li>
<li><em>addUsedSchema</em>: by default methods <code class="prettyprint">compile</code> and <code class="prettyprint">validate</code> add schemas to the instance if they have <code class="prettyprint">id</code> property that doesn&rsquo;t start with &ldquo;#&rdquo;. If <code class="prettyprint">id</code> is present and it is not unique the exception will be thrown. Set this option to <code class="prettyprint">false</code> to skip adding schemas to the instance and the <code class="prettyprint">id</code> uniqueness check when these methods are used. This option does not affect <code class="prettyprint">addSchema</code> method.</li>
<li><em>inlineRefs</em>: Affects compilation of referenced schemas. Option values:

<ul>
<li><code class="prettyprint">true</code> (default) - the referenced schemas that don&rsquo;t have refs in them are inlined, regardless of their size - that substantially improves performance at the cost of the bigger size of compiled schema functions.</li>
<li><code class="prettyprint">false</code> - to not inline referenced schemas (they will be compiled as separate functions).</li>
<li>integer number - to limit the maximum number of keywords of the schema that will be inlined.</li>
</ul></li>
<li><em>passContext</em>: pass validation context to custom keyword functions. If this option is <code class="prettyprint">true</code> and you pass some context to the compiled validation function with <code class="prettyprint">validate.call(context, data)</code>, the <code class="prettyprint">context</code> will be available as <code class="prettyprint">this</code> in your custom keywords. By default <code class="prettyprint">this</code> is Ajv instance.</li>
<li><em>loopRequired</em>: by default <code class="prettyprint">required</code> keyword is compiled into a single expression (or a sequence of statements in <code class="prettyprint">allErrors</code> mode). In case of a very large number of properties in this keyword it may result in a very big validation function. Pass integer to set the number of properties above which <code class="prettyprint">required</code> keyword will be validated in a loop - smaller validation function size but also worse performance.</li>
<li><em>ownProperties</em>: by default ajv iterates over all enumerable object properties; when this option is <code class="prettyprint">true</code> only own enumerable object properties (i.e. found directly on the object rather than on its prototype) are iterated. Contributed by @mbroadst.</li>
<li><em>multipleOfPrecision</em>: by default <code class="prettyprint">multipleOf</code> keyword is validated by comparing the result of division with parseInt() of that result. It works for dividers that are bigger than 1. For small dividers such as 0.01 the result of the division is usually not integer (even when it should be integer, see issue <a href="https://github.com/epoberezkin/ajv/issues/84">#84</a>). If you need to use fractional dividers set this option to some positive integer N to have <code class="prettyprint">multipleOf</code> validated using this formula: <code class="prettyprint">Math.abs(Math.round(division) - division) &lt; 1e-N</code> (it is slower but allows for float arithmetics deviations).</li>
<li><em>errorDataPath</em>: set <code class="prettyprint">dataPath</code> to point to &#39;object&rsquo; (default) or to &#39;property&rsquo; (default behavior in versions before 2.0) when validating keywords <code class="prettyprint">required</code>, <code class="prettyprint">additionalProperties</code> and <code class="prettyprint">dependencies</code>.</li>
<li><em>messages</em>: Include human-readable messages in errors. <code class="prettyprint">true</code> by default. <code class="prettyprint">false</code> can be passed when custom messages are used (e.g. with <a href="https://github.com/epoberezkin/ajv-i18n">ajv-i18n</a>).</li>
<li><em>beautify</em>: format the generated function with <a href="https://github.com/beautify-web/js-beautify">js-beautify</a> (the validating function is generated without line-breaks). <code class="prettyprint">npm install js-beautify</code> to use this option. <code class="prettyprint">true</code> or js-beautify options can be passed.</li>
<li><em>cache</em>: an optional instance of cache to store compiled schemas using stable-stringified schema as a key. For example, set-associative cache <a href="https://github.com/epoberezkin/sacjs">sacjs</a> can be used. If not passed then a simple hash is used which is good enough for the common use case (a limited number of statically defined schemas). Cache should have methods <code class="prettyprint">put(key, value)</code>, <code class="prettyprint">get(key)</code>, <code class="prettyprint">del(key)</code> and <code class="prettyprint">clear()</code>.</li>
</ul>

<h2 id="validation-errors">Validation errors</h2>

<p>In case of validation failure Ajv assigns the array of errors to <code class="prettyprint">.errors</code> property of validation function (or to <code class="prettyprint">.errors</code> property of Ajv instance in case <code class="prettyprint">validate</code> or <code class="prettyprint">validateSchema</code> methods were called). In case of <a href="#asynchronous-validation">asynchronous validation</a> the returned promise is rejected with the exception of the class <code class="prettyprint">Ajv.ValidationError</code> that has <code class="prettyprint">.errors</code> poperty.</p>

<h3 id="error-objects">Error objects</h3>

<p>Each error is an object with the following properties:</p>

<ul>
<li><em>keyword</em>: validation keyword.</li>
<li><em>dataPath</em>: the path to the part of the data that was validated. By default <code class="prettyprint">dataPath</code> uses JavaScript property access notation (e.g., <code class="prettyprint">&quot;.prop[1].subProp&quot;</code>). When the option <code class="prettyprint">jsonPointers</code> is true (see <a href="#options">Options</a>) <code class="prettyprint">dataPath</code> will be set using JSON pointer standard (e.g., <code class="prettyprint">&quot;/prop/1/subProp&quot;</code>).</li>
<li><em>schemaPath</em>: the path (JSON-pointer as a URI fragment) to the schema of the keyword that failed validation.</li>
<li><em>params</em>: the object with the additional information about error that can be used to create custom error messages (e.g., using <a href="https://github.com/epoberezkin/ajv-i18n">ajv-i18n</a> package). See below for parameters set by all keywords.</li>
<li><em>message</em>: the standard error message (can be excluded with option <code class="prettyprint">messages</code> set to false).</li>
<li><em>schema</em>: the schema of the keyword (added with <code class="prettyprint">verbose</code> option).</li>
<li><em>parentSchema</em>: the schema containing the keyword (added with <code class="prettyprint">verbose</code> option)</li>
<li><em>data</em>: the data validated by the keyword (added with <code class="prettyprint">verbose</code> option).</li>
</ul>

<h3 id="error-parameters">Error parameters</h3>

<p>Properties of <code class="prettyprint">params</code> object in errors depend on the keyword that failed validation.</p>

<ul>
<li><code class="prettyprint">maxItems</code>, <code class="prettyprint">minItems</code>, <code class="prettyprint">maxLength</code>, <code class="prettyprint">minLength</code>, <code class="prettyprint">maxProperties</code>, <code class="prettyprint">minProperties</code> - property <code class="prettyprint">limit</code> (number, the schema of the keyword).</li>
<li><code class="prettyprint">additionalItems</code> - property <code class="prettyprint">limit</code> (the maximum number of allowed items in case when <code class="prettyprint">items</code> keyword is an array of schemas and <code class="prettyprint">additionalItems</code> is false).</li>
<li><code class="prettyprint">additionalProperties</code> - property <code class="prettyprint">additionalProperty</code> (the property not used in <code class="prettyprint">properties</code> and <code class="prettyprint">patternProperties</code> keywords).</li>
<li><code class="prettyprint">patternGroups</code> (with v5 option) - properties:

<ul>
<li><code class="prettyprint">pattern</code></li>
<li><code class="prettyprint">reason</code> (&ldquo;minimum&rdquo;/&ldquo;maximum&rdquo;),</li>
<li><code class="prettyprint">limit</code> (max/min allowed number of properties matching number)</li>
</ul></li>
<li><code class="prettyprint">dependencies</code> - properties:

<ul>
<li><code class="prettyprint">property</code> (dependent property),</li>
<li><code class="prettyprint">missingProperty</code> (required missing dependency - only the first one is reported currently)</li>
<li><code class="prettyprint">deps</code> (required dependencies, comma separated list as a string),</li>
<li><code class="prettyprint">depsCount</code> (the number of required dependedncies).</li>
</ul></li>
<li><code class="prettyprint">format</code> - property <code class="prettyprint">format</code> (the schema of the keyword).</li>
<li><code class="prettyprint">maximum</code>, <code class="prettyprint">minimum</code> - properties:

<ul>
<li><code class="prettyprint">limit</code> (number, the schema of the keyword),</li>
<li><code class="prettyprint">exclusive</code> (boolean, the schema of <code class="prettyprint">exclusiveMaximum</code> or <code class="prettyprint">exclusiveMinimum</code>),</li>
<li><code class="prettyprint">comparison</code> (string, comparison operation to compare the data to the limit, with the data on the left and the limit on the right; can be &ldquo;&lt;&rdquo;, &ldquo;&lt;=&rdquo;, &ldquo;&gt;&rdquo;, &ldquo;&gt;=&rdquo;)</li>
</ul></li>
<li><code class="prettyprint">multipleOf</code> - property <code class="prettyprint">multipleOf</code> (the schema of the keyword)</li>
<li><code class="prettyprint">pattern</code> - property <code class="prettyprint">pattern</code> (the schema of the keyword)</li>
<li><code class="prettyprint">required</code> - property <code class="prettyprint">missingProperty</code> (required property that is missing).</li>
<li><code class="prettyprint">patternRequired</code> (with v5 option) - property <code class="prettyprint">missingPattern</code> (required pattern that did not match any property).</li>
<li><code class="prettyprint">type</code> - property <code class="prettyprint">type</code> (required type(s), a string, can be a comma-separated list)</li>
<li><code class="prettyprint">uniqueItems</code> - properties <code class="prettyprint">i</code> and <code class="prettyprint">j</code> (indices of duplicate items).</li>
<li><code class="prettyprint">$ref</code> - property <code class="prettyprint">ref</code> with the referenced schema URI.</li>
<li>custom keywords (in case keyword definition doesn&rsquo;t create errors) - property <code class="prettyprint">keyword</code> (the keyword name).</li>
</ul>

<h2 id="some-packages-using-ajv">Some packages using Ajv</h2>

<ul>
<li><a href="https://github.com/JSONScript/jsonscript-js">jsonscript-js</a> - the interpreter for <a href="http://www.json-script.com">JSONScript</a>, asynchronous scripting language using JSON format</li>
<li><a href="https://github.com/mulesoft-labs/osprey-method-handler">osprey-method-handler</a> - Express middleware for validating requests and responses based on a RAML method object, used in <a href="https://github.com/mulesoft/osprey">osprey</a> - validating API proxy generated from a RAML definition</li>
<li><a href="https://github.com/josdejong/jsoneditor">jsoneditor</a> - A web-based tool to view, edit, format, and validate JSON http://jsoneditoronline.org</li>
<li><a href="https://github.com/vincit/objection.js">objection</a> - SQL-friendly ORM for node.js</li>
<li><a href="https://github.com/ripple/ripple-lib">ripple-lib</a> - A JavaScript API for interacting with <a href="https://ripple.com">Ripple</a> in Node.js and the browser</li>
<li><a href="https://github.com/wikimedia/restbase">restbase</a> - Distributed storage with REST API &amp; dispatcher for backend services built to provide a low-latency &amp; high-throughput API for Wikipedia / Wikimedia content</li>
<li><a href="https://github.com/CacheControl/hippie-swagger">hippie-swagger</a> - <a href="https://github.com/vesln/hippie">Hippie</a> wrapper that provides end to end API testing with swagger validation</li>
<li><a href="https://github.com/seeden/react-form-controlled">react-form-controlled</a> - React controlled form components with validation</li>
<li><a href="https://github.com/tjmehta/rabbitmq-schema">rabbitmq-schema</a> - A schema definition module for RabbitMQ graphs and messages</li>
<li><a href="https://www.npmjs.com/package/@query/schema">@query/schema</a> - stream filtering with a URI-safe query syntax parsing to JSON Schema</li>
<li><a href="https://github.com/peon374/chai-ajv-json-schema">chai-ajv-json-schema</a> - chai plugin to us JSON-schema with expect in mocha tests</li>
<li><a href="https://github.com/SignpostMarv/grunt-jsonschema-ajv">grunt-jsonschema-ajv</a> - Grunt plugin for validating files against JSON-Schema</li>
<li><a href="https://github.com/epoberezkin/gh-pages-generator">gh-pages-generator</a> - multi-page site generator converting markdown files to GitHub pages</li>
</ul>

<h2 id="tests">Tests</h2>
<pre class="highlight plaintext"><code>npm install
git submodule update --init
npm test
</code></pre>

<h2 id="contributing">Contributing</h2>

<p>All validation functions are generated using doT templates in <a href="https://github.com/epoberezkin/ajv/tree/master/lib/dot">dot</a> folder. Templates are precompiled so doT is not a run-time dependency.</p>

<p><code class="prettyprint">npm run build</code> - compiles templates to <a href="https://github.com/epoberezkin/ajv/tree/master/lib/dotjs">dotjs</a> folder.</p>

<p><code class="prettyprint">npm run watch</code> - automatically compiles templates when files in dot folder change</p>

<p>Please see <a href="https://github.com/epoberezkin/ajv/blob/master/CONTRIBUTING.md">Contributing guidelines</a></p>

<h2 id="changes-history">Changes history</h2>

<p>See https://github.com/epoberezkin/ajv/releases</p>

<p><strong>Please note</strong>: <a href="https://github.com/epoberezkin/ajv/releases/tag/4.0.0">Changes in version 4.0.0</a>.</p>

<p><a href="https://github.com/epoberezkin/ajv/releases/tag/3.0.0">Changes in version 3.0.0</a>.</p>

<h2 id="license">License</h2>

<p><a href="https://github.com/epoberezkin/ajv/blob/master/LICENSE">MIT</a></p>
