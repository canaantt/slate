"use strict";module.exports=function(a,r){var e,t,s=" ",o=a.level,h=a.dataLevel,c=a.schema[r],l=a.schemaPath+"."+r,m=a.errSchemaPath+"/"+r,v=!a.opts.allErrors,d="data"+(h||""),i="valid"+o,n=a.opts.v5&&c.$data;n?(s+=" var schema"+o+" = "+a.util.getData(c.$data,h,a.dataPathArr)+"; ",t="schema"+o):t=c,n||(s+=" var schema"+o+" = validate.schema"+l+";"),s+="var "+i+" = equal("+d+", schema"+o+"); if (!"+i+") {   ";var u=u||[];u.push(s),s="",a.createErrors!==!1?(s+=" { keyword: '"+(e||"constant")+"' , dataPath: (dataPath || '') + "+a.errorPath+' , schemaPath: "'+m+'" , params: {} ',a.opts.messages!==!1&&(s+=" , message: 'should be equal to constant' "),a.opts.verbose&&(s+=" , schema: validate.schema"+l+" , parentSchema: validate.schema"+a.schemaPath+" , data: "+d+" "),s+=" } "):s+=" {} ";var p=s;return s=u.pop(),s+=!a.compositeRule&&v?a.async?" throw new ValidationError(["+p+"]); ":" validate.errors = ["+p+"]; return false; ":" var err = "+p+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",s+=" }"};