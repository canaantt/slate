"use strict";module.exports=function(a,e){var r,s,t=" ",h=a.level,l=a.dataLevel,o=a.schema[e],m=a.schemaPath+"."+e,c=a.errSchemaPath+"/"+e,v=!a.opts.allErrors,d="data"+(l||""),i="valid"+h,u=a.opts.v5&&o.$data;u?(t+=" var schema"+h+" = "+a.util.getData(o.$data,l,a.dataPathArr)+"; ",s="schema"+h):s=o;var n="i"+h;u||(t+=" var schema"+h+" = validate.schema"+m+";"),t+="var "+i+";",u&&(t+=" if (schema"+h+" === undefined) "+i+" = true; else if (!Array.isArray(schema"+h+")) "+i+" = false; else {"),t+=""+i+" = false;for (var "+n+"=0; "+n+"<schema"+h+".length; "+n+"++) if (equal("+d+", schema"+h+"["+n+"])) { "+i+" = true; break; }",u&&(t+="  }  "),t+=" if (!"+i+") {   ";var f=f||[];f.push(t),t="",a.createErrors!==!1?(t+=" { keyword: '"+(r||"enum")+"' , dataPath: (dataPath || '') + "+a.errorPath+' , schemaPath: "'+c+'" , params: {} ',a.opts.messages!==!1&&(t+=" , message: 'should be equal to one of the allowed values' "),a.opts.verbose&&(t+=" , schema: validate.schema"+m+" , parentSchema: validate.schema"+a.schemaPath+" , data: "+d+" "),t+=" } "):t+=" {} ";var p=t;return t=f.pop(),t+=!a.compositeRule&&v?a.async?" throw new ValidationError(["+p+"]); ":" validate.errors = ["+p+"]; return false; ":" var err = "+p+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",t+=" }",v&&(t+=" else { "),t};