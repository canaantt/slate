"use strict";module.exports=function(a,e){var r,s,t=" ",i=a.level,o=a.dataLevel,l=a.schema[e],h=a.schemaPath+"."+e,d=a.errSchemaPath+"/"+e,m=!a.opts.allErrors,n="data"+(o||""),v=a.opts.v5&&l.$data;v?(t+=" var schema"+i+" = "+a.util.getData(l.$data,o,a.dataPathArr)+"; ",s="schema"+i):s=l,t+="var division"+i+";if (",v&&(t+=" "+s+" !== undefined && ( typeof "+s+" != 'number' || "),t+=" (division"+i+" = "+n+" / "+s+", ",t+=a.opts.multipleOfPrecision?" Math.abs(Math.round(division"+i+") - division"+i+") > 1e-"+a.opts.multipleOfPrecision+" ":" division"+i+" !== parseInt(division"+i+") ",t+=" ) ",v&&(t+="  )  "),t+=" ) {   ";var p=p||[];p.push(t),t="",a.createErrors!==!1?(t+=" { keyword: '"+(r||"multipleOf")+"' , dataPath: (dataPath || '') + "+a.errorPath+' , schemaPath: "'+d+'" , params: { multipleOf: '+s+" } ",a.opts.messages!==!1&&(t+=" , message: 'should be multiple of ",t+=v?"' + "+s:""+l+"'"),a.opts.verbose&&(t+=" , schema:  ",t+=v?"validate.schema"+h:""+l,t+="         , parentSchema: validate.schema"+a.schemaPath+" , data: "+n+" "),t+=" } "):t+=" {} ";var u=t;return t=p.pop(),t+=!a.compositeRule&&m?a.async?" throw new ValidationError(["+u+"]); ":" validate.errors = ["+u+"]; return false; ":" var err = "+u+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",t+="} ",m&&(t+=" else { "),t};