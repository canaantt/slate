<h1 id="co">co</h1>

<p><a href="https://gitter.im/tj/co?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge"><img alt="Gitter" src="https://badges.gitter.im/Join%20Chat.svg" /></a>
<a href="https://npmjs.org/package/co"><img alt="NPM version" src="https://img.shields.io/npm/v/co.svg?style=flat-square" /></a>
<a href="https://travis-ci.org/tj/co"><img alt="Build status" src="https://img.shields.io/travis/tj/co.svg?style=flat-square" /></a>
<a href="https://coveralls.io/r/tj/co"><img alt="Test coverage" src="https://img.shields.io/coveralls/tj/co.svg?style=flat-square" /></a>
<a href="https://npmjs.org/package/co"><img alt="Downloads" src="http://img.shields.io/npm/dm/co.svg?style=flat-square" /></a></p>

<p>Generator based control flow goodness for nodejs and the browser,
  using promises, letting you write non-blocking code in a nice-ish way.</p>

<h2 id="co-v4">Co v4</h2>

<p><code class="prettyprint">co@4.0.0</code> has been released, which now relies on promises.
  It is a stepping stone towards <a href="https://github.com/lukehoban/ecmascript-asyncawait">ES7 async/await</a>.
  The primary API change is how <code class="prettyprint">co()</code> is invoked.
  Before, <code class="prettyprint">co</code> returned a &ldquo;thunk&rdquo;, which you then called with a callback and optional arguments.
  Now, <code class="prettyprint">co()</code> returns a promise.</p>
<pre class="highlight javascript"><code><span class="nx">co</span><span class="p">(</span><span class="kd">function</span><span class="o">*</span> <span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="k">yield</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
<span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
<span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">stack</span><span class="p">);</span>
<span class="p">});</span>
</code></pre>

<p>If you want to convert a <code class="prettyprint">co</code>-generator-function into a regular function that returns a promise,
  you now use <code class="prettyprint">co.wrap(fn*)</code>.</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">fn</span> <span class="o">=</span> <span class="nx">co</span><span class="p">.</span><span class="nx">wrap</span><span class="p">(</span><span class="kd">function</span><span class="o">*</span> <span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">yield</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">fn</span><span class="p">(</span><span class="kc">true</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>

<span class="p">});</span>
</code></pre>

<h2 id="platform-compatibility">Platform Compatibility</h2>

<p><code class="prettyprint">co@4+</code> requires a <code class="prettyprint">Promise</code> implementation.
  For versions of node <code class="prettyprint">&lt; 0.11</code> and for many older browsers,
  you should/must include your own <code class="prettyprint">Promise</code> polyfill.</p>

<p>When using node 0.11.x or greater, you must use the <code class="prettyprint">--harmony-generators</code>
  flag or just <code class="prettyprint">--harmony</code> to get access to generators.</p>

<p>When using node 0.10.x and lower or browsers without generator support,
  you must use <a href="https://github.com/TooTallNate/gnode">gnode</a> and/or <a href="http://facebook.github.io/regenerator/">regenerator</a>.</p>

<p>io.js is supported out of the box, you can use <code class="prettyprint">co</code> without flags or polyfills.</p>

<h2 id="installation">Installation</h2>
<pre class="highlight plaintext"><code>$ npm install co
</code></pre>

<h2 id="associated-libraries">Associated libraries</h2>

<p>Any library that returns promises work well with <code class="prettyprint">co</code>.</p>

<ul>
<li><a href="https://github.com/normalize/mz">mz</a> - wrap all of node&rsquo;s code libraries as promises.</li>
</ul>

<p>View the <a href="https://github.com/visionmedia/co/wiki">wiki</a> for more libraries.</p>

<h2 id="examples">Examples</h2>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">co</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'co'</span><span class="p">);</span>

<span class="nx">co</span><span class="p">(</span><span class="kd">function</span> <span class="o">*</span><span class="p">(){</span>
  <span class="c1">// yield any promise</span>
  <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="k">yield</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
<span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="nx">onerror</span><span class="p">);</span>

<span class="nx">co</span><span class="p">(</span><span class="kd">function</span> <span class="o">*</span><span class="p">(){</span>
  <span class="c1">// resolve multiple promises in parallel</span>
  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">yield</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">];</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">);</span>
  <span class="c1">// =&gt; [1, 2, 3]</span>
<span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="nx">onerror</span><span class="p">);</span>

<span class="c1">// errors can be try/catched</span>
<span class="nx">co</span><span class="p">(</span><span class="kd">function</span> <span class="o">*</span><span class="p">(){</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="k">yield</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">'boom'</span><span class="p">));</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span> <span class="c1">// "boom"</span>
 <span class="p">}</span>
<span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="nx">onerror</span><span class="p">);</span>

<span class="kd">function</span> <span class="nx">onerror</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// log any uncaught errors</span>
  <span class="c1">// co will not throw any errors you do not handle!!!</span>
  <span class="c1">// HANDLE ALL YOUR ERRORS!!!</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">stack</span><span class="p">);</span>
<span class="p">}</span>
</code></pre>

<h2 id="yieldables">Yieldables</h2>

<p>The <code class="prettyprint">yieldable</code> objects currently supported are:</p>

<ul>
<li>promises</li>
<li>thunks (functions)</li>
<li>array (parallel execution)</li>
<li>objects (parallel execution)</li>
<li>generators (delegation)</li>
<li>generator functions (delegation)</li>
</ul>

<p>Nested <code class="prettyprint">yieldable</code> objects are supported, meaning you can nest
promises within objects within arrays, and so on!</p>

<h3 id="promises">Promises</h3>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Read more on promises!</a></p>

<h3 id="thunks">Thunks</h3>

<p>Thunks are functions that only have a single argument, a callback.
Thunk support only remains for backwards compatibility and may
be removed in future versions of <code class="prettyprint">co</code>.</p>

<h3 id="arrays">Arrays</h3>

<p><code class="prettyprint">yield</code>ing an array will resolve all the <code class="prettyprint">yieldables</code> in parallel.</p>
<pre class="highlight javascript"><code><span class="nx">co</span><span class="p">(</span><span class="kd">function</span><span class="o">*</span> <span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">yield</span> <span class="p">[</span>
    <span class="nx">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span>
    <span class="nx">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span>
    <span class="nx">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="mi">3</span><span class="p">),</span>
  <span class="p">];</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">);</span> <span class="c1">// =&gt; [1, 2, 3]</span>
<span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="nx">onerror</span><span class="p">);</span>
</code></pre>

<h3 id="objects">Objects</h3>

<p>Just like arrays, objects resolve all <code class="prettyprint">yieldable</code>s in parallel.</p>
<pre class="highlight javascript"><code><span class="nx">co</span><span class="p">(</span><span class="kd">function</span><span class="o">*</span> <span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">yield</span> <span class="p">{</span>
    <span class="mi">1</span><span class="p">:</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span>
    <span class="mi">2</span><span class="p">:</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span>
  <span class="p">};</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">);</span> <span class="c1">// =&gt; { 1: 1, 2: 2 }</span>
<span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="nx">onerror</span><span class="p">);</span>
</code></pre>

<h3 id="generators-and-generator-functions">Generators and Generator Functions</h3>

<p>Any generator or generator function you can pass into <code class="prettyprint">co</code>
can be yielded as well. This should generally be avoided
as we should be moving towards spec-compliant <code class="prettyprint">Promise</code>s instead.</p>

<h2 id="api">API</h2>

<h3 id="co-fn-then-val-gt">co(fn*).then( val =&gt; )</h3>

<p>Returns a promise that resolves a generator, generator function,
or any function that returns a generator.</p>
<pre class="highlight javascript"><code><span class="nx">co</span><span class="p">(</span><span class="kd">function</span><span class="o">*</span> <span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">yield</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
<span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>
<span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">stack</span><span class="p">);</span>
<span class="p">});</span>
</code></pre>

<h3 id="var-fn-co-wrap-fn">var fn = co.wrap(fn*)</h3>

<p>Convert a generator into a regular function that returns a <code class="prettyprint">Promise</code>.</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">fn</span> <span class="o">=</span> <span class="nx">co</span><span class="p">.</span><span class="nx">wrap</span><span class="p">(</span><span class="kd">function</span><span class="o">*</span> <span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">yield</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">fn</span><span class="p">(</span><span class="kc">true</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>

<span class="p">});</span>
</code></pre>

<h2 id="license">License</h2>

<p>MIT</p>
