<h1 id="4-6-0-2015-07-09">4.6.0 / 2015-07-09</h1>

<ul>
<li>support passing the rest of the arguments to co into the generator</li>
</ul>
<pre class="highlight javascript"><code> <span class="kd">function</span> <span class="o">*</span><span class="nx">gen</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
 <span class="nx">co</span><span class="p">(</span><span class="nx">gen</span><span class="p">,</span> <span class="p">...</span><span class="nx">args</span><span class="p">);</span>
</code></pre>

<h1 id="4-5-0-2015-03-17">4.5.0 / 2015-03-17</h1>

<ul>
<li>support regular functions (that return promises)</li>
</ul>

<h1 id="4-4-0-2015-02-14">4.4.0 / 2015-02-14</h1>

<ul>
<li>refactor <code class="prettyprint">isGeneratorFunction</code></li>
<li>expose generator function from <code class="prettyprint">co.wrap()</code></li>
<li>drop support for node &lt; 0.12</li>
</ul>

<h1 id="4-3-0-2015-02-05">4.3.0 / 2015-02-05</h1>

<ul>
<li>check for generator functions in a ES5-transpiler-friendly way</li>
</ul>

<h1 id="4-2-0-2015-01-20">4.2.0 / 2015-01-20</h1>

<ul>
<li>support comparing generator functions with ES6 transpilers</li>
</ul>

<h1 id="4-1-0-2014-12-26">4.1.0 / 2014-12-26</h1>

<ul>
<li>fix memory leak #180</li>
</ul>

<h1 id="4-0-2-2014-12-18">4.0.2 / 2014-12-18</h1>

<ul>
<li>always return a global promise implementation</li>
</ul>

<h1 id="4-0-1-2014-11-30">4.0.1 / 2014-11-30</h1>

<ul>
<li>friendlier ES6 module exports</li>
</ul>

<h1 id="4-0-0-2014-11-15">4.0.0 / 2014-11-15</h1>

<ul>
<li>co now returns a promise and uses promises underneath</li>
<li><code class="prettyprint">co.wrap()</code> for wrapping generator functions</li>
</ul>

<h1 id="3-1-0-2014-06-30">3.1.0 / 2014-06-30</h1>

<ul>
<li>remove <code class="prettyprint">setImmediate()</code> shim for node 0.8. semi-backwards breaking.
Users are expected to shim themselves. Also returns CommonJS browser support.</li>
<li>added key order preservation for objects. thanks @greim</li>
<li>replace <code class="prettyprint">q</code> with <code class="prettyprint">bluebird</code> in benchmarks and tests</li>
</ul>

<h1 id="3-0-6-2014-05-03">3.0.6 / 2014-05-03</h1>

<ul>
<li>add <code class="prettyprint">setImmediate()</code> fallback to <code class="prettyprint">process.nextTick</code></li>
<li>remove duplicate code in toThunk</li>
<li>update thunkify</li>
</ul>

<h1 id="3-0-5-2014-03-17">3.0.5 / 2014-03-17</h1>

<ul>
<li>fix object/array test failure which tries to enumerate dates. Closes #98</li>
<li>fix final callback error propagation. Closes #92</li>
</ul>

<h1 id="3-0-4-2014-02-17">3.0.4 / 2014-02-17</h1>

<ul>
<li>fix toThunk object check regression. Closes #89</li>
</ul>

<h1 id="3-0-3-2014-02-08">3.0.3 / 2014-02-08</h1>

<ul>
<li>refactor: arrayToThunk @AutoSponge #88</li>
</ul>

<h1 id="3-0-2-2014-01-01">3.0.2 / 2014-01-01</h1>

<ul>
<li>fixed: nil arguments replaced with error fn</li>
</ul>

<h1 id="3-0-1-2013-12-19">3.0.1 / 2013-12-19</h1>

<ul>
<li>fixed: callback passed as an argument to generators</li>
</ul>

<h1 id="3-0-0-2013-12-19">3.0.0 / 2013-12-19</h1>

<ul>
<li>fixed: callback passed as an argument to generators</li>
<li>change: <code class="prettyprint">co(function *(){})</code> now returns a reusable thunk</li>
<li>change: <code class="prettyprint">this</code> must now be passed through the returned thunk, ex. <code class="prettyprint">co(function *(){}).call(this)</code></li>
<li>fix &ldquo;generator already finished&rdquo; errors</li>
</ul>

<h1 id="2-3-0-2013-11-12">2.3.0 / 2013-11-12</h1>

<ul>
<li>add <code class="prettyprint">yield object</code> support</li>
</ul>

<h1 id="2-2-0-2013-11-05">2.2.0 / 2013-11-05</h1>

<ul>
<li>change: make the <code class="prettyprint">isGenerator()</code> function more generic</li>
</ul>

<h1 id="2-1-0-2013-10-21">2.1.0 / 2013-10-21</h1>

<ul>
<li>add passing of arguments into the generator. closes #33.</li>
</ul>

<h1 id="2-0-0-2013-10-14">2.0.0 / 2013-10-14</h1>

<ul>
<li>remove callback in favour of thunk-only co(). Closes #30 [breaking change]</li>
<li>remove <code class="prettyprint">co.wrap()</code> [breaking change]</li>
</ul>

<h1 id="1-5-2-2013-09-02">1.5.2 / 2013-09-02</h1>

<ul>
<li>fix: preserve receiver with co.wrap()</li>
</ul>

<h1 id="1-5-1-2013-08-11">1.5.1 / 2013-08-11</h1>

<ul>
<li>remove setImmediate() usage - ~110% perf increase. Closes #14</li>
</ul>

<h1 id="0-5-0-2013-08-10">0.5.0 / 2013-08-10</h1>

<ul>
<li>add receiver propagation support</li>
<li>examples: update streams.js example to use <code class="prettyprint">http.get()</code> and streams2 API</li>
</ul>

<h1 id="1-4-1-2013-07-01">1.4.1 / 2013-07-01</h1>

<ul>
<li>fix gen.next(val) for latest v8. Closes #8</li>
</ul>

<h1 id="1-4-0-2013-06-21">1.4.0 / 2013-06-21</h1>

<ul>
<li>add promise support to joins</li>
<li>add <code class="prettyprint">yield generatorFunction</code> support</li>
<li>add <code class="prettyprint">yield generator</code> support</li>
<li>add nested join support</li>
</ul>

<h1 id="1-3-0-2013-06-10">1.3.0 / 2013-06-10</h1>

<ul>
<li>add passing of arguments</li>
</ul>

<h1 id="1-2-1-2013-06-08">1.2.1 / 2013-06-08</h1>

<ul>
<li>fix join() of zero thunks</li>
</ul>

<h1 id="1-2-0-2013-06-08">1.2.0 / 2013-06-08</h1>

<ul>
<li>add array yielding support. great suggestion by @domenic</li>
</ul>

<h1 id="1-1-0-2013-06-06">1.1.0 / 2013-06-06</h1>

<ul>
<li>add promise support</li>
<li>change nextTick to setImmediate</li>
</ul>
