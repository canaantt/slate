<h1 id="json-stable-stringify">json-stable-stringify</h1>

<p>deterministic version of <code class="prettyprint">JSON.stringify()</code> so you can get a consistent hash
from stringified results</p>

<p>You can also pass in a custom comparison function.</p>

<p><a href="https://ci.testling.com/substack/json-stable-stringify"><img alt="browser support" src="https://ci.testling.com/substack/json-stable-stringify.png" /></a></p>

<p><a href="http://travis-ci.org/substack/json-stable-stringify"><img alt="build status" src="https://secure.travis-ci.org/substack/json-stable-stringify.png" /></a></p>

<h1 id="example">example</h1>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">stringify</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'json-stable-stringify'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">c</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span> <span class="na">b</span><span class="p">:</span> <span class="p">[{</span><span class="na">z</span><span class="p">:</span><span class="mi">6</span><span class="p">,</span><span class="na">y</span><span class="p">:</span><span class="mi">5</span><span class="p">,</span><span class="na">x</span><span class="p">:</span><span class="mi">4</span><span class="p">},</span><span class="mi">7</span><span class="p">],</span> <span class="na">a</span><span class="p">:</span> <span class="mi">3</span> <span class="p">};</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">obj</span><span class="p">));</span>
</code></pre>

<p>output:</p>
<pre class="highlight json"><code><span class="p">{</span><span class="nt">"a"</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span><span class="nt">"b"</span><span class="p">:[{</span><span class="nt">"x"</span><span class="p">:</span><span class="mi">4</span><span class="p">,</span><span class="nt">"y"</span><span class="p">:</span><span class="mi">5</span><span class="p">,</span><span class="nt">"z"</span><span class="p">:</span><span class="mi">6</span><span class="p">},</span><span class="mi">7</span><span class="p">],</span><span class="nt">"c"</span><span class="p">:</span><span class="mi">8</span><span class="p">}</span><span class="w">
</span></code></pre>

<h1 id="methods">methods</h1>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">stringify</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'json-stable-stringify'</span><span class="p">)</span>
</code></pre>

<h2 id="var-str-stringify-obj-opts">var str = stringify(obj, opts)</h2>

<p>Return a deterministic stringified string <code class="prettyprint">str</code> from the object <code class="prettyprint">obj</code>.</p>

<h2 id="options">options</h2>

<h3 id="cmp">cmp</h3>

<p>If <code class="prettyprint">opts</code> is given, you can supply an <code class="prettyprint">opts.cmp</code> to have a custom comparison
function for object keys. Your function <code class="prettyprint">opts.cmp</code> is called with these
parameters:</p>
<pre class="highlight javascript"><code><span class="nx">opts</span><span class="p">.</span><span class="nx">cmp</span><span class="p">({</span> <span class="na">key</span><span class="p">:</span> <span class="nx">akey</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="nx">avalue</span> <span class="p">},</span> <span class="p">{</span> <span class="na">key</span><span class="p">:</span> <span class="nx">bkey</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="nx">bvalue</span> <span class="p">})</span>
</code></pre>

<p>For example, to sort on the object key names in reverse order you could write:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">stringify</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'json-stable-stringify'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">c</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span> <span class="na">b</span><span class="p">:</span> <span class="p">[{</span><span class="na">z</span><span class="p">:</span><span class="mi">6</span><span class="p">,</span><span class="na">y</span><span class="p">:</span><span class="mi">5</span><span class="p">,</span><span class="na">x</span><span class="p">:</span><span class="mi">4</span><span class="p">},</span><span class="mi">7</span><span class="p">],</span> <span class="na">a</span><span class="p">:</span> <span class="mi">3</span> <span class="p">};</span>
<span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">stringify</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">key</span> <span class="o">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">key</span> <span class="p">?</span> <span class="mi">1</span> <span class="p">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="p">});</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</code></pre>

<p>which results in the output string:</p>
<pre class="highlight json"><code><span class="p">{</span><span class="nt">"c"</span><span class="p">:</span><span class="mi">8</span><span class="p">,</span><span class="nt">"b"</span><span class="p">:[{</span><span class="nt">"z"</span><span class="p">:</span><span class="mi">6</span><span class="p">,</span><span class="nt">"y"</span><span class="p">:</span><span class="mi">5</span><span class="p">,</span><span class="nt">"x"</span><span class="p">:</span><span class="mi">4</span><span class="p">},</span><span class="mi">7</span><span class="p">],</span><span class="nt">"a"</span><span class="p">:</span><span class="mi">3</span><span class="p">}</span><span class="w">
</span></code></pre>

<p>Or if you wanted to sort on the object values in reverse order, you could write:</p>
<pre class="highlight plaintext"><code>var stringify = require('json-stable-stringify');

var obj = { d: 6, c: 5, b: [{z:3,y:2,x:1},9], a: 10 };
var s = stringify(obj, function (a, b) {
    return a.value &lt; b.value ? 1 : -1;
});
console.log(s);
</code></pre>

<p>which outputs:</p>
<pre class="highlight json"><code><span class="p">{</span><span class="nt">"d"</span><span class="p">:</span><span class="mi">6</span><span class="p">,</span><span class="nt">"c"</span><span class="p">:</span><span class="mi">5</span><span class="p">,</span><span class="nt">"b"</span><span class="p">:[{</span><span class="nt">"z"</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span><span class="nt">"y"</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="nt">"x"</span><span class="p">:</span><span class="mi">1</span><span class="p">},</span><span class="mi">9</span><span class="p">],</span><span class="nt">"a"</span><span class="p">:</span><span class="mi">10</span><span class="p">}</span><span class="w">
</span></code></pre>

<h3 id="space">space</h3>

<p>If you specify <code class="prettyprint">opts.space</code>, it will indent the output for pretty-printing.
Valid values are strings (e.g. <code class="prettyprint">{space: \t}</code>) or a number of spaces
(<code class="prettyprint">{space: 3}</code>).</p>

<p>For example:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">b</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">a</span><span class="p">:</span> <span class="p">{</span> <span class="na">foo</span><span class="p">:</span> <span class="s1">'bar'</span><span class="p">,</span> <span class="na">and</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="p">}</span> <span class="p">};</span>
<span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">stringify</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="p">{</span> <span class="na">space</span><span class="p">:</span> <span class="s1">'  '</span> <span class="p">});</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</code></pre>

<p>which outputs:</p>
<pre class="highlight json"><code><span class="p">{</span><span class="w">
  </span><span class="nt">"a"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nt">"and"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="mi">1</span><span class="p">,</span><span class="w">
      </span><span class="mi">2</span><span class="p">,</span><span class="w">
      </span><span class="mi">3</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nt">"foo"</span><span class="p">:</span><span class="w"> </span><span class="s2">"bar"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nt">"b"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>

<h3 id="replacer">replacer</h3>

<p>The replacer parameter is a function <code class="prettyprint">opts.replacer(key, value)</code> that behaves
the same as the replacer
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_native_JSON#The_replacer_parameter">from the core JSON object</a>.</p>

<h1 id="install">install</h1>

<p>With <a href="https://npmjs.org">npm</a> do:</p>
<pre class="highlight plaintext"><code>npm install json-stable-stringify
</code></pre>

<h1 id="license">license</h1>

<p>MIT</p>
