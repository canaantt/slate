<h1 id="kareem">kareem</h1>

<p><a href="https://travis-ci.org/vkarpov15/kareem"><img alt="Build Status" src="https://travis-ci.org/vkarpov15/kareem.svg?branch=master" /></a>
  <a href="https://coveralls.io/r/vkarpov15/kareem"><img alt="Coverage Status" src="https://img.shields.io/coveralls/vkarpov15/kareem.svg" /></a></p>

<p>Re-imagined take on the <a href="http://npmjs.org/package/hooks">hooks</a> module, meant to offer additional flexibility in allowing you to execute hooks whenever necessary, as opposed to simply wrapping a single function.</p>

<p>Named for the NBA&rsquo;s all-time leading scorer Kareem Abdul-Jabbar, known for his mastery of the <a href="http://en.wikipedia.org/wiki/Kareem_Abdul-Jabbar#Skyhook">hook shot</a></p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/0/00/Kareem-Abdul-Jabbar_Lipofsky.jpg" width="220"></p>

<h1 id="api">API</h1>

<h2 id="pre-hooks">pre hooks</h2>

<p>Much like <a href="https://npmjs.org/package/hooks">hooks</a>, kareem lets you define
pre and post hooks: pre hooks are called before a given function executes.
Unlike hooks, kareem stores hooks and other internal state in a separate
object, rather than relying on inheritance. Furthermore, kareem exposes
an <code class="prettyprint">execPre()</code> function that allows you to execute your pre hooks when
appropriate, giving you more fine-grained control over your function hooks.</p>

<h4 id="it-runs-without-any-hooks-specified">It runs without any hooks specified</h4>
<pre class="highlight javascript"><code>
    <span class="nx">hooks</span><span class="p">.</span><span class="nx">execPre</span><span class="p">(</span><span class="s1">'cook'</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">done</span><span class="p">();</span>
    <span class="p">});</span>

</code></pre>

<h4 id="it-runs-basic-serial-pre-hooks">It runs basic serial pre hooks</h4>

<p>pre hook functions take one parameter, a &ldquo;done&rdquo; function that you execute
when your pre hook is finished.</p>
<pre class="highlight javascript"><code>
    <span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="nx">hooks</span><span class="p">.</span><span class="nx">pre</span><span class="p">(</span><span class="s1">'cook'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
      <span class="o">++</span><span class="nx">count</span><span class="p">;</span>
      <span class="nx">done</span><span class="p">();</span>
    <span class="p">});</span>

    <span class="nx">hooks</span><span class="p">.</span><span class="nx">execPre</span><span class="p">(</span><span class="s1">'cook'</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">count</span><span class="p">);</span>
      <span class="nx">done</span><span class="p">();</span>
    <span class="p">});</span>

</code></pre>

<h4 id="it-can-run-multipe-pre-hooks">It can run multipe pre hooks</h4>
<pre class="highlight javascript"><code>
    <span class="kd">var</span> <span class="nx">count1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">count2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="nx">hooks</span><span class="p">.</span><span class="nx">pre</span><span class="p">(</span><span class="s1">'cook'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
      <span class="o">++</span><span class="nx">count1</span><span class="p">;</span>
      <span class="nx">done</span><span class="p">();</span>
    <span class="p">});</span>

    <span class="nx">hooks</span><span class="p">.</span><span class="nx">pre</span><span class="p">(</span><span class="s1">'cook'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
      <span class="o">++</span><span class="nx">count2</span><span class="p">;</span>
      <span class="nx">done</span><span class="p">();</span>
    <span class="p">});</span>

    <span class="nx">hooks</span><span class="p">.</span><span class="nx">execPre</span><span class="p">(</span><span class="s1">'cook'</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">count1</span><span class="p">);</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">count2</span><span class="p">);</span>
      <span class="nx">done</span><span class="p">();</span>
    <span class="p">});</span>

</code></pre>

<h4 id="it-can-run-fully-synchronous-pre-hooks">It can run fully synchronous pre hooks</h4>

<p>If your pre hook function takes no parameters, its assumed to be
fully synchronous.</p>
<pre class="highlight javascript"><code>
    <span class="kd">var</span> <span class="nx">count1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">count2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="nx">hooks</span><span class="p">.</span><span class="nx">pre</span><span class="p">(</span><span class="s1">'cook'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="o">++</span><span class="nx">count1</span><span class="p">;</span>
    <span class="p">});</span>

    <span class="nx">hooks</span><span class="p">.</span><span class="nx">pre</span><span class="p">(</span><span class="s1">'cook'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="o">++</span><span class="nx">count2</span><span class="p">;</span>
    <span class="p">});</span>

    <span class="nx">hooks</span><span class="p">.</span><span class="nx">execPre</span><span class="p">(</span><span class="s1">'cook'</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">count1</span><span class="p">);</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">count2</span><span class="p">);</span>
      <span class="nx">done</span><span class="p">();</span>
    <span class="p">});</span>

</code></pre>

<h4 id="it-properly-attaches-context-to-pre-hooks">It properly attaches context to pre hooks</h4>

<p>Pre save hook functions are bound to the second parameter to <code class="prettyprint">execPre()</code></p>
<pre class="highlight javascript"><code>
    <span class="nx">hooks</span><span class="p">.</span><span class="nx">pre</span><span class="p">(</span><span class="s1">'cook'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">bacon</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
      <span class="nx">done</span><span class="p">();</span>
    <span class="p">});</span>

    <span class="nx">hooks</span><span class="p">.</span><span class="nx">pre</span><span class="p">(</span><span class="s1">'cook'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">eggs</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
      <span class="nx">done</span><span class="p">();</span>
    <span class="p">});</span>

    <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">bacon</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="na">eggs</span><span class="p">:</span> <span class="mi">0</span> <span class="p">};</span>

    <span class="c1">// In the pre hooks, `this` will refer to `obj`</span>
    <span class="nx">hooks</span><span class="p">.</span><span class="nx">execPre</span><span class="p">(</span><span class="s1">'cook'</span><span class="p">,</span> <span class="nx">obj</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">bacon</span><span class="p">);</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">eggs</span><span class="p">);</span>
      <span class="nx">done</span><span class="p">();</span>
    <span class="p">});</span>

</code></pre>

<h4 id="it-can-execute-parallel-async-pre-hooks">It can execute parallel (async) pre hooks</h4>

<p>Like the hooks module, you can declare &ldquo;async&rdquo; pre hooks - these take two
parameters, the functions <code class="prettyprint">next()</code> and <code class="prettyprint">done()</code>. <code class="prettyprint">next()</code> passes control to
the next pre hook, but the underlying function won&rsquo;t be called until all
async pre hooks have called <code class="prettyprint">done()</code>.</p>
<pre class="highlight javascript"><code>
    <span class="nx">hooks</span><span class="p">.</span><span class="nx">pre</span><span class="p">(</span><span class="s1">'cook'</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">next</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">bacon</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
      <span class="nx">next</span><span class="p">();</span>
      <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">done</span><span class="p">();</span>
      <span class="p">},</span> <span class="mi">5</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="nx">hooks</span><span class="p">.</span><span class="nx">pre</span><span class="p">(</span><span class="s1">'cook'</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">next</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">next</span><span class="p">();</span>
      <span class="kd">var</span> <span class="nx">_this</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
      <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">_this</span><span class="p">.</span><span class="nx">eggs</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
        <span class="nx">done</span><span class="p">();</span>
      <span class="p">},</span> <span class="mi">10</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="nx">hooks</span><span class="p">.</span><span class="nx">pre</span><span class="p">(</span><span class="s1">'cook'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">waffles</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
      <span class="nx">next</span><span class="p">();</span>
    <span class="p">});</span>

    <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">bacon</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="na">eggs</span><span class="p">:</span> <span class="mi">0</span> <span class="p">};</span>

    <span class="nx">hooks</span><span class="p">.</span><span class="nx">execPre</span><span class="p">(</span><span class="s1">'cook'</span><span class="p">,</span> <span class="nx">obj</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">bacon</span><span class="p">);</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">eggs</span><span class="p">);</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">waffles</span><span class="p">);</span>
      <span class="nx">done</span><span class="p">();</span>
    <span class="p">});</span>

</code></pre>

<h2 id="post-hooks">post hooks</h2>

<h4 id="it-runs-without-any-hooks-specified">It runs without any hooks specified</h4>
<pre class="highlight javascript"><code>
    <span class="nx">hooks</span><span class="p">.</span><span class="nx">execPost</span><span class="p">(</span><span class="s1">'cook'</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">eggs</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">ifError</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">eggs</span><span class="p">);</span>
      <span class="nx">done</span><span class="p">();</span>
    <span class="p">});</span>

</code></pre>

<h4 id="it-executes-with-parameters-passed-in">It executes with parameters passed in</h4>
<pre class="highlight javascript"><code>
    <span class="nx">hooks</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">'cook'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">eggs</span><span class="p">,</span> <span class="nx">bacon</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">eggs</span><span class="p">);</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nx">bacon</span><span class="p">);</span>
      <span class="nx">callback</span><span class="p">();</span>
    <span class="p">});</span>

    <span class="nx">hooks</span><span class="p">.</span><span class="nx">execPost</span><span class="p">(</span><span class="s1">'cook'</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">eggs</span><span class="p">,</span> <span class="nx">bacon</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">ifError</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">eggs</span><span class="p">);</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nx">bacon</span><span class="p">);</span>
      <span class="nx">done</span><span class="p">();</span>
    <span class="p">});</span>

</code></pre>

<h4 id="it-can-use-synchronous-post-hooks">It can use synchronous post hooks</h4>
<pre class="highlight javascript"><code>
    <span class="kd">var</span> <span class="nx">execed</span> <span class="o">=</span> <span class="p">{};</span>

    <span class="nx">hooks</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">'cook'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">eggs</span><span class="p">,</span> <span class="nx">bacon</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">execed</span><span class="p">.</span><span class="nx">first</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">eggs</span><span class="p">);</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nx">bacon</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="nx">hooks</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">'cook'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">eggs</span><span class="p">,</span> <span class="nx">bacon</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">execed</span><span class="p">.</span><span class="nx">second</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">eggs</span><span class="p">);</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nx">bacon</span><span class="p">);</span>
      <span class="nx">callback</span><span class="p">();</span>
    <span class="p">});</span>

    <span class="nx">hooks</span><span class="p">.</span><span class="nx">execPost</span><span class="p">(</span><span class="s1">'cook'</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">eggs</span><span class="p">,</span> <span class="nx">bacon</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">ifError</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">execed</span><span class="p">).</span><span class="nx">length</span><span class="p">);</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">ok</span><span class="p">(</span><span class="nx">execed</span><span class="p">.</span><span class="nx">first</span><span class="p">);</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">ok</span><span class="p">(</span><span class="nx">execed</span><span class="p">.</span><span class="nx">second</span><span class="p">);</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">eggs</span><span class="p">);</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nx">bacon</span><span class="p">);</span>
      <span class="nx">done</span><span class="p">();</span>
    <span class="p">});</span>

</code></pre>

<h2 id="wrap">wrap()</h2>

<h4 id="it-wraps-pre-and-post-calls-into-one-call">It wraps pre and post calls into one call</h4>
<pre class="highlight javascript"><code>
    <span class="nx">hooks</span><span class="p">.</span><span class="nx">pre</span><span class="p">(</span><span class="s1">'cook'</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">next</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">bacon</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
      <span class="nx">next</span><span class="p">();</span>
      <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">done</span><span class="p">();</span>
      <span class="p">},</span> <span class="mi">5</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="nx">hooks</span><span class="p">.</span><span class="nx">pre</span><span class="p">(</span><span class="s1">'cook'</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">next</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">next</span><span class="p">();</span>
      <span class="kd">var</span> <span class="nx">_this</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
      <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">_this</span><span class="p">.</span><span class="nx">eggs</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
        <span class="nx">done</span><span class="p">();</span>
      <span class="p">},</span> <span class="mi">10</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="nx">hooks</span><span class="p">.</span><span class="nx">pre</span><span class="p">(</span><span class="s1">'cook'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">waffles</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
      <span class="nx">next</span><span class="p">();</span>
    <span class="p">});</span>

    <span class="nx">hooks</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">'cook'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">obj</span><span class="p">.</span><span class="nx">tofu</span> <span class="o">=</span> <span class="s1">'no'</span><span class="p">;</span>
    <span class="p">});</span>

    <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">bacon</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="na">eggs</span><span class="p">:</span> <span class="mi">0</span> <span class="p">};</span>

    <span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="p">[</span><span class="nx">obj</span><span class="p">];</span>
    <span class="nx">args</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">ifError</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">bacon</span><span class="p">);</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">eggs</span><span class="p">);</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">waffles</span><span class="p">);</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">'no'</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">tofu</span><span class="p">);</span>

      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">result</span><span class="p">);</span>
      <span class="nx">done</span><span class="p">();</span>
    <span class="p">});</span>

    <span class="nx">hooks</span><span class="p">.</span><span class="nx">wrap</span><span class="p">(</span>
      <span class="s1">'cook'</span><span class="p">,</span>
      <span class="kd">function</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">bacon</span><span class="p">);</span>
        <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">eggs</span><span class="p">);</span>
        <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">waffles</span><span class="p">);</span>
        <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="kc">undefined</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">tofu</span><span class="p">);</span>
        <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">o</span><span class="p">);</span>
      <span class="p">},</span>
      <span class="nx">obj</span><span class="p">,</span>
      <span class="nx">args</span><span class="p">);</span>

</code></pre>

<h2 id="createwrapper">createWrapper()</h2>

<h4 id="it-wraps-wrap-into-a-callable-function">It wraps wrap() into a callable function</h4>
<pre class="highlight javascript"><code>
    <span class="nx">hooks</span><span class="p">.</span><span class="nx">pre</span><span class="p">(</span><span class="s1">'cook'</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">next</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">bacon</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
      <span class="nx">next</span><span class="p">();</span>
      <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">done</span><span class="p">();</span>
      <span class="p">},</span> <span class="mi">5</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="nx">hooks</span><span class="p">.</span><span class="nx">pre</span><span class="p">(</span><span class="s1">'cook'</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">next</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">next</span><span class="p">();</span>
      <span class="kd">var</span> <span class="nx">_this</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
      <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">_this</span><span class="p">.</span><span class="nx">eggs</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
        <span class="nx">done</span><span class="p">();</span>
      <span class="p">},</span> <span class="mi">10</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="nx">hooks</span><span class="p">.</span><span class="nx">pre</span><span class="p">(</span><span class="s1">'cook'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">waffles</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
      <span class="nx">next</span><span class="p">();</span>
    <span class="p">});</span>

    <span class="nx">hooks</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">'cook'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">obj</span><span class="p">.</span><span class="nx">tofu</span> <span class="o">=</span> <span class="s1">'no'</span><span class="p">;</span>
    <span class="p">});</span>

    <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">bacon</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="na">eggs</span><span class="p">:</span> <span class="mi">0</span> <span class="p">};</span>

    <span class="kd">var</span> <span class="nx">cook</span> <span class="o">=</span> <span class="nx">hooks</span><span class="p">.</span><span class="nx">createWrapper</span><span class="p">(</span>
      <span class="s1">'cook'</span><span class="p">,</span>
      <span class="kd">function</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">bacon</span><span class="p">);</span>
        <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">eggs</span><span class="p">);</span>
        <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">waffles</span><span class="p">);</span>
        <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="kc">undefined</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">tofu</span><span class="p">);</span>
        <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">o</span><span class="p">);</span>
      <span class="p">},</span>
      <span class="nx">obj</span><span class="p">);</span>

    <span class="nx">cook</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">ifError</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">bacon</span><span class="p">);</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">eggs</span><span class="p">);</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">waffles</span><span class="p">);</span>
      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">'no'</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">tofu</span><span class="p">);</span>

      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">result</span><span class="p">);</span>
      <span class="nx">done</span><span class="p">();</span>
    <span class="p">});</span>

</code></pre>

<h2 id="clone">clone()</h2>

<h4 id="it-clones-a-kareem-object">It clones a Kareem object</h4>
<pre class="highlight javascript"><code>
    <span class="kd">var</span> <span class="nx">k1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Kareem</span><span class="p">();</span>
    <span class="nx">k1</span><span class="p">.</span><span class="nx">pre</span><span class="p">(</span><span class="s1">'cook'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{});</span>
    <span class="nx">k1</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">'cook'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{});</span>

    <span class="kd">var</span> <span class="nx">k2</span> <span class="o">=</span> <span class="nx">k1</span><span class="p">.</span><span class="nx">clone</span><span class="p">();</span>
    <span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">([</span><span class="s1">'cook'</span><span class="p">],</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">k2</span><span class="p">.</span><span class="nx">_pres</span><span class="p">));</span>
    <span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">([</span><span class="s1">'cook'</span><span class="p">],</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">k2</span><span class="p">.</span><span class="nx">_posts</span><span class="p">));</span>

</code></pre>
