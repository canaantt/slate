var assert=require("assert"),Kareem=require("../");describe("execPre",function(){var e;beforeEach(function(){e=new Kareem}),it("handles errors with multiple pres",function(r){var o={};e.pre("cook",function(e){o.first=!0,e()}),e.pre("cook",function(e){o.second=!0,e("error!")}),e.pre("cook",function(e){o.third=!0,e()}),e.execPre("cook",null,function(e){assert.equal("error!",e),assert.equal(2,Object.keys(o).length),assert.ok(o.first),assert.ok(o.second),r()})}),it("handles async errors",function(r){var o={};e.pre("cook",!0,function(e,r){o.first=!0,setTimeout(function(){r("error!")},5),e()}),e.pre("cook",!0,function(e,r){o.second=!0,setTimeout(function(){r("other error!")},10),e()}),e.execPre("cook",null,function(e){assert.equal("error!",e),assert.equal(2,Object.keys(o).length),assert.ok(o.first),assert.ok(o.second),r()})}),it("handles async errors in next()",function(r){var o={};e.pre("cook",!0,function(e,r){o.first=!0,setTimeout(function(){r("other error!")},15),e()}),e.pre("cook",!0,function(e,r){o.second=!0,setTimeout(function(){e("error!"),r("another error!")},5)}),e.execPre("cook",null,function(e){assert.equal("error!",e),assert.equal(2,Object.keys(o).length),assert.ok(o.first),assert.ok(o.second),r()})}),it("handles async errors in next() when already done",function(r){var o={};e.pre("cook",!0,function(e,r){o.first=!0,setTimeout(function(){r("other error!")},5),e()}),e.pre("cook",!0,function(e,r){o.second=!0,setTimeout(function(){e("error!"),r("another error!")},25)}),e.execPre("cook",null,function(e){assert.equal("other error!",e),assert.equal(2,Object.keys(o).length),assert.ok(o.first),assert.ok(o.second),r()})}),it("returns correct error when async pre errors",function(r){var o={};e.pre("cook",!0,function(e,r){o.first=!0,setTimeout(function(){r("other error!")},5),e()}),e.pre("cook",function(e){o.second=!0,setTimeout(function(){e("error!")},15)}),e.execPre("cook",null,function(e){assert.equal("other error!",e),assert.equal(2,Object.keys(o).length),assert.ok(o.first),assert.ok(o.second),r()})}),it("lets async pres run when fully sync pres are done",function(r){var o={};e.pre("cook",!0,function(e,r){o.first=!0,setTimeout(function(){r()},5),e()}),e.pre("cook",function(){o.second=!0}),e.execPre("cook",null,function(e){assert.ifError(e),assert.equal(2,Object.keys(o).length),assert.ok(o.first),assert.ok(o.second),r()})}),it("allows passing arguments to the next pre",function(r){var o={};e.pre("cook",function(e){o.first=!0,e(null,"test")}),e.pre("cook",function(e,r){o.second=!0,assert.equal(r,"test"),e()}),e.pre("cook",function(e,r){o.third=!0,assert.ok(!r),e()}),e.execPre("cook",null,function(e){assert.ifError(e),assert.equal(3,Object.keys(o).length),assert.ok(o.first),assert.ok(o.second),assert.ok(o.third),r()})})}),describe("execPreSync",function(){var e;beforeEach(function(){e=new Kareem}),it("executes hooks synchronously",function(){var r={};e.pre("cook",function(){r.first=!0}),e.pre("cook",function(){r.second=!0}),e.execPreSync("cook",null),assert.ok(r.first),assert.ok(r.second)}),it("works with no hooks specified",function(){assert.doesNotThrow(function(){e.execPreSync("cook",null)})})});