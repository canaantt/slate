var assert=require("assert"),Kareem=require("../");describe("wrap()",function(){var o;beforeEach(function(){o=new Kareem}),it("handles pre errors",function(r){o.pre("cook",function(o){o("error!")}),o.post("cook",function(o){o.tofu="no"});var n={bacon:0,eggs:0},e=[n];e.push(function(o,e){assert.equal("error!",o),assert.ok(!e),assert.equal(void 0,n.tofu),r()}),o.wrap("cook",function(o,r){assert.ok(!1),r(null,o)},n,e)}),it("handles pre errors when no callback defined",function(r){o.pre("cook",function(o){o("error!")}),o.post("cook",function(o){o.tofu="no"});var n={bacon:0,eggs:0},e=[n];o.wrap("cook",function(o,r){assert.ok(!1),r(null,o)},n,e),setTimeout(function(){r()},25)}),it("handles errors in wrapped function",function(r){o.pre("cook",function(o){o()}),o.post("cook",function(o){o.tofu="no"});var n={bacon:0,eggs:0},e=[n];e.push(function(o,e){assert.equal("error!",o),assert.ok(!e),assert.equal(void 0,n.tofu),r()}),o.wrap("cook",function(o,r){r("error!")},n,e)}),it("handles errors in post",function(r){o.pre("cook",function(o){o()}),o.post("cook",function(o,r){o.tofu="no",r("error!")});var n={bacon:0,eggs:0},e=[n];e.push(function(o,e){assert.equal("error!",o),assert.ok(!e),assert.equal("no",n.tofu),r()}),o.wrap("cook",function(o,r){r(null,o)},n,e)}),it("defers errors to post hooks if enabled",function(r){o.pre("cook",function(o){o(new Error("fail"))}),o.post("cook",function(o,r){r(new Error("another error occurred"))});var n=[];n.push(function(o){assert.equal(o.message,"another error occurred"),r()}),o.wrap("cook",function(o){assert.ok(!1),o()},null,n,{useErrorHandlers:!0})}),it("error handlers with no callback",function(r){o.pre("cook",function(o){o(new Error("fail"))}),o.post("cook",function(o,n){assert.equal(o.message,"fail"),r()});var n=[];o.wrap("cook",function(o){assert.ok(!1),o()},null,n,{useErrorHandlers:!0})}),it("error handlers with no error",function(r){o.post("cook",function(o,r){r(new Error("another error occurred"))});var n=[];n.push(function(o){assert.ifError(o),r()}),o.wrap("cook",function(o){o()},null,n,{useErrorHandlers:!0})}),it("works with no args",function(r){o.pre("cook",function(o){o()}),o.post("cook",function(o){n.tofu="no",o()});var n={bacon:0,eggs:0},e=[];o.wrap("cook",function(o){o(null)},n,e),setTimeout(function(){assert.equal("no",n.tofu),r()},25)}),it("handles pre errors with no args",function(r){o.pre("cook",function(o){o("error!")}),o.post("cook",function(o){n.tofu="no",o()});var n={bacon:0,eggs:0},e=[];o.wrap("cook",function(o){o(null)},n,e),setTimeout(function(){assert.equal(void 0,n.tofu),r()},25)}),it("handles wrapped function errors with no args",function(r){o.pre("cook",function(o){n.waffles=!1,o()}),o.post("cook",function(o){n.tofu="no",o()});var n={bacon:0,eggs:0},e=[];o.wrap("cook",function(o){o("error!")},n,e),setTimeout(function(){assert.equal(!1,n.waffles),assert.equal(void 0,n.tofu),r()},25)}),it("handles post errors with no args",function(r){o.pre("cook",function(o){n.waffles=!1,o()}),o.post("cook",function(o){n.tofu="no",o("error!")});var n={bacon:0,eggs:0},e=[];o.wrap("cook",function(o){o()},n,e),setTimeout(function(){assert.equal(!1,n.waffles),assert.equal("no",n.tofu),r()},25)}),it("can use legacy post behavior",function(r){var n=0;o.post("cook",function(o){++n,o()});var e=[function(o){assert.equal(n,0),setTimeout(function(){assert.equal(n,1),r()},0)}];o.wrap("cook",function(o){o()},null,e,!0)})});