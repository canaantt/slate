var assert=require("assert"),Kareem=require("../");describe("pre hooks",function(){var e;beforeEach(function(){e=new Kareem}),it("runs without any hooks specified",function(o){e.execPre("cook",null,function(){o()})}),it("runs basic serial pre hooks",function(o){var s=0;e.pre("cook",function(e){++s,e()}),e.execPre("cook",null,function(){assert.equal(1,s),o()})}),it("can run multipe pre hooks",function(o){var s=0,t=0;e.pre("cook",function(e){++s,e()}),e.pre("cook",function(e){++t,e()}),e.execPre("cook",null,function(){assert.equal(1,s),assert.equal(1,t),o()})}),it("can run fully synchronous pre hooks",function(o){var s=0,t=0;e.pre("cook",function(){++s}),e.pre("cook",function(){++t}),e.execPre("cook",null,function(e){assert.equal(null,e),assert.equal(1,s),assert.equal(1,t),o()})}),it("properly attaches context to pre hooks",function(o){e.pre("cook",function(e){this.bacon=3,e()}),e.pre("cook",function(e){this.eggs=4,e()});var s={bacon:0,eggs:0};e.execPre("cook",s,function(e){assert.equal(null,e),assert.equal(3,s.bacon),assert.equal(4,s.eggs),o()})}),it("can execute parallel (async) pre hooks",function(o){e.pre("cook",!0,function(e,o){this.bacon=3,e(),setTimeout(function(){o()},5)}),e.pre("cook",!0,function(e,o){e();var s=this;setTimeout(function(){s.eggs=4,o()},10)}),e.pre("cook",function(e){this.waffles=!1,e()});var s={bacon:0,eggs:0};e.execPre("cook",s,function(){assert.equal(3,s.bacon),assert.equal(4,s.eggs),assert.equal(!1,s.waffles),o()})})}),describe("post hooks",function(){var e;beforeEach(function(){e=new Kareem}),it("runs without any hooks specified",function(o){e.execPost("cook",null,[1],function(e,s){assert.ifError(e),assert.equal(1,s),o()})}),it("executes with parameters passed in",function(o){e.post("cook",function(e,o,s){assert.equal(1,e),assert.equal(2,o),s()}),e.execPost("cook",null,[1,2],function(e,s,t){assert.ifError(e),assert.equal(1,s),assert.equal(2,t),o()})}),it("can use synchronous post hooks",function(o){var s={};e.post("cook",function(e,o){s.first=!0,assert.equal(1,e),assert.equal(2,o)}),e.post("cook",function(e,o,t){s.second=!0,assert.equal(1,e),assert.equal(2,o),t()}),e.execPost("cook",null,[1,2],function(e,t,n){assert.ifError(e),assert.equal(2,Object.keys(s).length),assert.ok(s.first),assert.ok(s.second),assert.equal(1,t),assert.equal(2,n),o()})})}),describe("wrap()",function(){var e;beforeEach(function(){e=new Kareem}),it("wraps pre and post calls into one call",function(o){e.pre("cook",!0,function(e,o){this.bacon=3,e(),setTimeout(function(){o()},5)}),e.pre("cook",!0,function(e,o){e();var s=this;setTimeout(function(){s.eggs=4,o()},10)}),e.pre("cook",function(e){this.waffles=!1,e()}),e.post("cook",function(e){e.tofu="no"});var s={bacon:0,eggs:0},t=[s];t.push(function(e,t){assert.ifError(e),assert.equal(null,e),assert.equal(3,s.bacon),assert.equal(4,s.eggs),assert.equal(!1,s.waffles),assert.equal("no",s.tofu),assert.equal(s,t),o()}),e.wrap("cook",function(e,o){assert.equal(3,s.bacon),assert.equal(4,s.eggs),assert.equal(!1,s.waffles),assert.equal(void 0,s.tofu),o(null,e)},s,t)})}),describe("createWrapper()",function(){var e;beforeEach(function(){e=new Kareem}),it("wraps wrap() into a callable function",function(o){e.pre("cook",!0,function(e,o){this.bacon=3,e(),setTimeout(function(){o()},5)}),e.pre("cook",!0,function(e,o){e();var s=this;setTimeout(function(){s.eggs=4,o()},10)}),e.pre("cook",function(e){this.waffles=!1,e()}),e.post("cook",function(e){e.tofu="no"});var s={bacon:0,eggs:0},t=e.createWrapper("cook",function(e,o){assert.equal(3,s.bacon),assert.equal(4,s.eggs),assert.equal(!1,s.waffles),assert.equal(void 0,s.tofu),o(null,e)},s);t(s,function(e,t){assert.ifError(e),assert.equal(3,s.bacon),assert.equal(4,s.eggs),assert.equal(!1,s.waffles),assert.equal("no",s.tofu),assert.equal(s,t),o()})})}),describe("clone()",function(){it("clones a Kareem object",function(){var e=new Kareem;e.pre("cook",function(){}),e.post("cook",function(){});var o=e.clone();assert.deepEqual(["cook"],Object.keys(o._pres)),assert.deepEqual(["cook"],Object.keys(o._posts))})});