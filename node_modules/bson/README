<h1 id="javascript-c-bson-parser">Javascript + C++ BSON parser</h1>

<p>This BSON parser is primarily meant to be used with the <code class="prettyprint">mongodb</code> node.js driver.
However, wonderful tools such as <code class="prettyprint">onejs</code> can package up a BSON parser that will work in the browser.
The current build is located in the <code class="prettyprint">browser_build/bson.js</code> file.</p>

<p>A simple example of how to use BSON in the browser:</p>
<pre class="highlight html"><code><span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://raw.github.com/mongodb/js-bson/master/browser_build/bson.js"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body</span> <span class="na">onload=</span><span class="s">"start();"</span><span class="nt">&gt;</span>
<span class="nt">&lt;script&gt;</span>
  <span class="kd">function</span> <span class="nx">start</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">BSON</span> <span class="o">=</span> <span class="nx">bson</span><span class="p">().</span><span class="nx">BSON</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">Long</span> <span class="o">=</span> <span class="nx">bson</span><span class="p">().</span><span class="nx">Long</span><span class="p">;</span>

    <span class="kd">var</span> <span class="nx">doc</span> <span class="o">=</span> <span class="p">{</span><span class="na">long</span><span class="p">:</span> <span class="nx">Long</span><span class="p">.</span><span class="nx">fromNumber</span><span class="p">(</span><span class="mi">100</span><span class="p">)}</span>

    <span class="c1">// Serialize a document</span>
    <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">BSON</span><span class="p">.</span><span class="nx">serialize</span><span class="p">(</span><span class="nx">doc</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
    <span class="c1">// De serialize it again</span>
    <span class="kd">var</span> <span class="nx">doc_2</span> <span class="o">=</span> <span class="nx">BSON</span><span class="p">.</span><span class="nx">deserialize</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
  <span class="p">}</span>
<span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre>

<p>A simple example of how to use BSON in <code class="prettyprint">node.js</code>:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">bson</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"bson"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">BSON</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">bson</span><span class="p">.</span><span class="nx">BSONPure</span><span class="p">.</span><span class="nx">BSON</span><span class="p">();</span>
<span class="kd">var</span> <span class="nx">Long</span> <span class="o">=</span> <span class="nx">bson</span><span class="p">.</span><span class="nx">BSONPure</span><span class="p">.</span><span class="nx">Long</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">doc</span> <span class="o">=</span> <span class="p">{</span><span class="na">long</span><span class="p">:</span> <span class="nx">Long</span><span class="p">.</span><span class="nx">fromNumber</span><span class="p">(</span><span class="mi">100</span><span class="p">)}</span>

<span class="c1">// Serialize a document</span>
<span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">BSON</span><span class="p">.</span><span class="nx">serialize</span><span class="p">(</span><span class="nx">doc</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"data:"</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>

<span class="c1">// Deserialize the resulting Buffer</span>
<span class="kd">var</span> <span class="nx">doc_2</span> <span class="o">=</span> <span class="nx">BSON</span><span class="p">.</span><span class="nx">deserialize</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"doc_2:"</span><span class="p">,</span> <span class="nx">doc_2</span><span class="p">);</span>
</code></pre>

<p>The API consists of two simple methods to serialize/deserialize objects to/from BSON format:</p>

<ul>
<li><p>BSON.serialize(object, checkKeys, asBuffer, serializeFunctions)</p>

<ul>
<li>@param {Object} object the Javascript object to serialize.</li>
<li>@param {Boolean} checkKeys the serializer will check if keys are valid.</li>
<li>@param {Boolean} asBuffer return the serialized object as a Buffer object <strong>(ignore)</strong>.</li>
<li>@param {Boolean} serializeFunctions serialize the javascript functions <strong>(default:false)</strong></li>
<li>@return {TypedArray/Array} returns a TypedArray or Array depending on what your browser supports</li>
</ul></li>
<li><p>BSON.deserialize(buffer, options, isArray)</p>

<ul>
<li>Options

<ul>
<li><strong>evalFunctions</strong> {Boolean, default:false}, evaluate functions in the BSON document scoped to the object deserialized.</li>
<li><strong>cacheFunctions</strong> {Boolean, default:false}, cache evaluated functions for reuse.</li>
<li><strong>cacheFunctionsCrc32</strong> {Boolean, default:false}, use a crc32 code for caching, otherwise use the string of the function.</li>
<li><strong>promoteBuffers</strong> {Boolean, default:false}, deserialize Binary data directly into node.js Buffer object.</li>
</ul></li>
<li>@param {TypedArray/Array} a TypedArray/Array containing the BSON data</li>
<li>@param {Object} [options] additional options used for the deserialization.</li>
<li>@param {Boolean} [isArray] ignore used for recursive parsing.</li>
<li>@return {Object} returns the deserialized Javascript Object.</li>
</ul></li>
</ul>
