var assert=require("assert"),clone=require("../");describe("regexp-clone",function(){function e(e,n){assert.ok(e!==n),assert.equal(e.source,n.source)}function n(e){assert.ok(e.ignoreCase)}function l(e){assert.ok(e.global)}function i(e){assert.ok(e.multiline)}function o(l){var i=clone(l);e(l,i),n(l),n(i)}function t(n){var i=clone(n);e(n,i),l(n),l(i)}function a(n){var l=clone(n);e(n,l),i(n),i(l)}describe("literals",function(){it("insensitive flag",function(e){var n=/hello/i;o(n),e()}),it("global flag",function(e){var n=/hello/g;t(n),e()}),it("multiline flag",function(e){var n=/hello/m;a(n),e()}),it("no flags",function(n){var l=/hello/,i=clone(l);e(l,i),assert.ok(!l.insensitive),assert.ok(!l.global),assert.ok(!l.global),n()}),it("all flags",function(e){var n=/hello/gim;o(n),t(n),a(n),e()})}),describe("instances",function(){it("insensitive flag",function(e){var n=new RegExp("hello","i");o(n),e()}),it("global flag",function(e){var n=new RegExp("hello","g");t(n),e()}),it("multiline flag",function(e){var n=new RegExp("hello","m");a(n),e()}),it("no flags",function(n){var l=new RegExp("hmm"),i=clone(l);e(l,i),assert.ok(!l.insensitive),assert.ok(!l.global),assert.ok(!l.global),n()}),it("all flags",function(e){var n=new RegExp("hello","gim");o(n),t(n),a(n),e()})})});