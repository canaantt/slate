<h1 id="debug">debug</h1>

<p>tiny node.js debugging utility modelled after node core&rsquo;s debugging technique.</p>

<h2 id="installation">Installation</h2>
<pre class="highlight shell"><code><span class="gp">$ </span>npm install debug
</code></pre>

<h2 id="usage">Usage</h2>

<p>With <code class="prettyprint">debug</code> you simply invoke the exported function to generate your debug function, passing it a name which will determine if a noop function is returned, or a decorated <code class="prettyprint">console.error</code>, so all of the <code class="prettyprint">console</code> format string goodies you&rsquo;re used to work fine. A unique color is selected per-function for visibility.</p>

<p>Example <em>app.js</em>:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">debug</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'debug'</span><span class="p">)(</span><span class="s1">'http'</span><span class="p">)</span>
  <span class="p">,</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'http'</span><span class="p">)</span>
  <span class="p">,</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">'My App'</span><span class="p">;</span>

<span class="c1">// fake app</span>

<span class="nx">debug</span><span class="p">(</span><span class="s1">'booting %s'</span><span class="p">,</span> <span class="nx">name</span><span class="p">);</span>

<span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
  <span class="nx">debug</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">method</span> <span class="o">+</span> <span class="s1">' '</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s1">'hello\n'</span><span class="p">);</span>
<span class="p">}).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="nx">debug</span><span class="p">(</span><span class="s1">'listening'</span><span class="p">);</span>
<span class="p">});</span>

<span class="c1">// fake worker of some kind</span>

<span class="nx">require</span><span class="p">(</span><span class="s1">'./worker'</span><span class="p">);</span>
</code></pre>

<p>Example <em>worker.js</em>:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">debug</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'debug'</span><span class="p">)(</span><span class="s1">'worker'</span><span class="p">);</span>

<span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
  <span class="nx">debug</span><span class="p">(</span><span class="s1">'doing some work'</span><span class="p">);</span>
<span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</code></pre>

<p>The <strong>DEBUG</strong> environment variable is then used to enable these based on space or comma-delimited names. Here are some examples:</p>

<p><img alt="debug http and worker" src="http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png" /></p>

<p><img alt="debug worker" src="http://f.cl.ly/items/1X413v1a3M0d3C2c1E0i/Screenshot.png" /></p>

<h4 id="windows-note">Windows note</h4>

<p>On Windows the environment variable is set using the <code class="prettyprint">set</code> command.</p>
<pre class="highlight plaintext"><code> set DEBUG=*,-not_this
</code></pre>

<p>Then, run the program to be debugged as usual.</p>

<h2 id="millisecond-diff">Millisecond diff</h2>

<p>When actively developing an application it can be useful to see when the time spent between one <code class="prettyprint">debug()</code> call and the next. Suppose for example you invoke <code class="prettyprint">debug()</code> before requesting a resource, and after as well, the &ldquo;+NNNms&rdquo; will show you how much time was spent between calls.</p>

<p><img src="http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png" /></p>

<p>When stdout is not a TTY, <code class="prettyprint">Date#toUTCString()</code> is used, making it more useful for logging the debug information as shown below:</p>

<p><img src="http://f.cl.ly/items/112H3i0e0o0P0a2Q2r11/Screenshot.png" /></p>

<h2 id="conventions">Conventions</h2>

<p>If you&rsquo;re using this in one or more of your libraries, you <em>should</em> use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you <em>should</em> prefix them with your library name and use &ldquo;:&rdquo; to separate features. For example &ldquo;bodyParser&rdquo; from Connect would then be &ldquo;connect:bodyParser&rdquo;.</p>

<h2 id="wildcards">Wildcards</h2>

<p>The <code class="prettyprint">*</code> character may be used as a wildcard. Suppose for example your library has debuggers named &ldquo;connect:bodyParser&rdquo;, &ldquo;connect:compress&rdquo;, &ldquo;connect:session&rdquo;, instead of listing all three with <code class="prettyprint">DEBUG=connect:bodyParser,connect:compress,connect:session</code>, you may simply do <code class="prettyprint">DEBUG=connect:*</code>, or to run everything using this module simply use <code class="prettyprint">DEBUG=*</code>.</p>

<p>You can also exclude specific debuggers by prefixing them with a &ldquo;-&rdquo; character.  For example, <code class="prettyprint">DEBUG=*,-connect:*</code> would include all debuggers except those starting with &ldquo;connect:&rdquo;.</p>

<h2 id="browser-support">Browser support</h2>

<p>Debug works in the browser as well, currently persisted by <code class="prettyprint">localStorage</code>. Consider the situation shown below where you have <code class="prettyprint">worker:a</code> and <code class="prettyprint">worker:b</code>, and wish to debug both. Somewhere in the code on your page, include:</p>
<pre class="highlight javascript"><code><span class="nb">window</span><span class="p">.</span><span class="nx">myDebug</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"debug"</span><span class="p">);</span>
</code></pre>

<p>(&ldquo;debug&rdquo; is a global object in the browser so we give this object a different name.) When your page is open in the browser, type the following in the console:</p>
<pre class="highlight javascript"><code><span class="nx">myDebug</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="s2">"worker:*"</span><span class="p">)</span>
</code></pre>

<p>Refresh the page. Debug output will continue to be sent to the console until it is disabled by typing <code class="prettyprint">myDebug.disable()</code> in the console.</p>
<pre class="highlight javascript"><code><span class="nx">a</span> <span class="o">=</span> <span class="nx">debug</span><span class="p">(</span><span class="s1">'worker:a'</span><span class="p">);</span>
<span class="nx">b</span> <span class="o">=</span> <span class="nx">debug</span><span class="p">(</span><span class="s1">'worker:b'</span><span class="p">);</span>

<span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
  <span class="nx">a</span><span class="p">(</span><span class="s1">'doing some work'</span><span class="p">);</span>
<span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>

<span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
  <span class="nx">b</span><span class="p">(</span><span class="s1">'doing some work'</span><span class="p">);</span>
<span class="p">},</span> <span class="mi">1200</span><span class="p">);</span>
</code></pre>

<h4 id="web-inspector-colors">Web Inspector Colors</h4>

<p>Colors are also enabled on &ldquo;Web Inspectors&rdquo; that understand the <code class="prettyprint">%c</code> formatting
  option. These are WebKit web inspectors, Firefox (<a href="https://hacks.mozilla.org/2014/05/editable-box-model-multiple-selection-sublime-text-keys-much-more-firefox-developer-tools-episode-31/">since version
  31</a>)
  and the Firebug plugin for Firefox (any version).</p>

<p>Colored output looks something like:</p>

<p><img src="https://cloud.githubusercontent.com/assets/71256/3139768/b98c5fd8-e8ef-11e3-862a-f7253b6f47c6.png" /></p>

<h3 id="stderr-vs-stdout">stderr vs stdout</h3>

<p>You can set an alternative logging method per-namespace by overriding the <code class="prettyprint">log</code> method on a per-namespace or globally:</p>

<p>Example <em>stdout.js</em>:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">debug</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'debug'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">error</span> <span class="o">=</span> <span class="nx">debug</span><span class="p">(</span><span class="s1">'app:error'</span><span class="p">);</span>

<span class="c1">// by default stderr is used</span>
<span class="nx">error</span><span class="p">(</span><span class="s1">'goes to stderr!'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">log</span> <span class="o">=</span> <span class="nx">debug</span><span class="p">(</span><span class="s1">'app:log'</span><span class="p">);</span>
<span class="c1">// set this namespace to log via console.log</span>
<span class="nx">log</span><span class="p">.</span><span class="nx">log</span> <span class="o">=</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">console</span><span class="p">);</span> <span class="c1">// don't forget to bind to console!</span>
<span class="nx">log</span><span class="p">(</span><span class="s1">'goes to stdout'</span><span class="p">);</span>
<span class="nx">error</span><span class="p">(</span><span class="s1">'still goes to stderr!'</span><span class="p">);</span>

<span class="c1">// set all output to go via console.info</span>
<span class="c1">// overrides all per-namespace log settings</span>
<span class="nx">debug</span><span class="p">.</span><span class="nx">log</span> <span class="o">=</span> <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">console</span><span class="p">);</span>
<span class="nx">error</span><span class="p">(</span><span class="s1">'now goes to stdout via console.info'</span><span class="p">);</span>
<span class="nx">log</span><span class="p">(</span><span class="s1">'still goes to stdout, but via console.info now'</span><span class="p">);</span>
</code></pre>

<h3 id="save-debug-output-to-a-file">Save debug output to a file</h3>

<p>You can save all debug statements to a file by piping them.</p>

<p>Example:</p>
<pre class="highlight shell"><code><span class="gp">$ </span><span class="nv">DEBUG_FD</span><span class="o">=</span>3 node your-app.js 3&gt; whatever.log
</code></pre>

<h2 id="authors">Authors</h2>

<ul>
<li>TJ Holowaychuk</li>
<li>Nathan Rajlich</li>
</ul>

<h2 id="license">License</h2>

<p>(The MIT License)</p>

<p>Copyright &copy; 2014 TJ Holowaychuk &lt;tj@vision-media.ca&gt;</p>

<p>Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
&lsquo;Software&rsquo;), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:</p>

<p>The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.</p>

<p>THE SOFTWARE IS PROVIDED &#39;AS IS&rsquo;, WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>
