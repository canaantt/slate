<h1 id="node-js-jsonfile">Node.js - jsonfile</h1>

<p>Easily read/write JSON files.</p>

<p><a href="https://www.npmjs.org/package/jsonfile"><img alt="npm Package" src="https://img.shields.io/npm/v/jsonfile.svg?style=flat-square" /></a>
<a href="http://travis-ci.org/jprichardson/node-jsonfile"><img alt="build status" src="https://secure.travis-ci.org/jprichardson/node-jsonfile.svg" /></a>
<a href="https://ci.appveyor.com/project/jprichardson/node-jsonfile/branch/master"><img alt="windows Build status" src="https://img.shields.io/appveyor/ci/jprichardson/node-jsonfile/master.svg?label=windows%20build" /></a></p>

<p><a href="https://github.com/feross/standard"><img src="https://cdn.rawgit.com/feross/standard/master/sticker.svg" alt="Standard JavaScript" width="100"></a></p>

<h2 id="why">Why?</h2>

<p>Writing <code class="prettyprint">JSON.stringify()</code> and then <code class="prettyprint">fs.writeFile()</code> and <code class="prettyprint">JSON.parse()</code> with <code class="prettyprint">fs.readFile()</code> enclosed in <code class="prettyprint">try/catch</code> blocks became annoying.</p>

<h2 id="installation">Installation</h2>

<p>npm install &ndash;save jsonfile</p>

<h2 id="api">API</h2>

<h3 id="readfile-filename-options-callback">readFile(filename, [options], callback)</h3>

<p><code class="prettyprint">options</code> (<code class="prettyprint">object</code>, default <code class="prettyprint">undefined</code>): Pass in any <code class="prettyprint">fs.readFile</code> options or set <code class="prettyprint">reviver</code> for a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse">JSON reviver</a>.
  - <code class="prettyprint">throws</code> (<code class="prettyprint">boolean</code>, default: <code class="prettyprint">true</code>). If <code class="prettyprint">JSON.parse</code> throws an error, pass this error to the callback.
  If <code class="prettyprint">false</code>, returns <code class="prettyprint">null</code> for the object.</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">jsonfile</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'jsonfile'</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">file</span> <span class="o">=</span> <span class="s1">'/tmp/data.json'</span>
<span class="nx">jsonfile</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
<span class="p">})</span>
</code></pre>

<h3 id="readfilesync-filename-options">readFileSync(filename, [options])</h3>

<p><code class="prettyprint">options</code> (<code class="prettyprint">object</code>, default <code class="prettyprint">undefined</code>): Pass in any <code class="prettyprint">fs.readFileSync</code> options or set <code class="prettyprint">reviver</code> for a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse">JSON reviver</a>. 
- <code class="prettyprint">throws</code> (<code class="prettyprint">boolean</code>, default: <code class="prettyprint">true</code>). If <code class="prettyprint">JSON.parse</code> throws an error, throw the error.
If <code class="prettyprint">false</code>, returns <code class="prettyprint">null</code> for the object.</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">jsonfile</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'jsonfile'</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">file</span> <span class="o">=</span> <span class="s1">'/tmp/data.json'</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">jsonfile</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="nx">file</span><span class="p">))</span>
</code></pre>

<h3 id="writefile-filename-obj-options-callback">writeFile(filename, obj, [options], callback)</h3>

<p><code class="prettyprint">options</code>: Pass in any <code class="prettyprint">fs.writeFile</code> options or set <code class="prettyprint">replacer</code> for a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify">JSON replacer</a>. Can also pass in <code class="prettyprint">spaces</code>.</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">jsonfile</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'jsonfile'</span><span class="p">)</span>

<span class="kd">var</span> <span class="nx">file</span> <span class="o">=</span> <span class="s1">'/tmp/data.json'</span>
<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="s1">'JP'</span><span class="p">}</span>

<span class="nx">jsonfile</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">obj</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
<span class="p">})</span>
</code></pre>

<p><strong>formatting with spaces:</strong></p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">jsonfile</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'jsonfile'</span><span class="p">)</span>

<span class="kd">var</span> <span class="nx">file</span> <span class="o">=</span> <span class="s1">'/tmp/data.json'</span>
<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="s1">'JP'</span><span class="p">}</span>

<span class="nx">jsonfile</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">obj</span><span class="p">,</span> <span class="p">{</span><span class="na">spaces</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
<span class="p">})</span>
</code></pre>

<h3 id="writefilesync-filename-obj-options">writeFileSync(filename, obj, [options])</h3>

<p><code class="prettyprint">options</code>: Pass in any <code class="prettyprint">fs.writeFileSync</code> options or set <code class="prettyprint">replacer</code> for a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify">JSON replacer</a>. Can also pass in <code class="prettyprint">spaces</code>.</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">jsonfile</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'jsonfile'</span><span class="p">)</span>

<span class="kd">var</span> <span class="nx">file</span> <span class="o">=</span> <span class="s1">'/tmp/data.json'</span>
<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="s1">'JP'</span><span class="p">}</span>

<span class="nx">jsonfile</span><span class="p">.</span><span class="nx">writeFileSync</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span>
</code></pre>

<p><strong>formatting with spaces:</strong></p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">jsonfile</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'jsonfile'</span><span class="p">)</span>

<span class="kd">var</span> <span class="nx">file</span> <span class="o">=</span> <span class="s1">'/tmp/data.json'</span>
<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="s1">'JP'</span><span class="p">}</span>

<span class="nx">jsonfile</span><span class="p">.</span><span class="nx">writeFileSync</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">obj</span><span class="p">,</span> <span class="p">{</span><span class="na">spaces</span><span class="p">:</span> <span class="mi">2</span><span class="p">})</span>
</code></pre>

<h3 id="spaces">spaces</h3>

<p>Global configuration to set spaces to indent JSON files.</p>

<p><strong>default:</strong> <code class="prettyprint">null</code></p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">jsonfile</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'jsonfile'</span><span class="p">)</span>

<span class="nx">jsonfile</span><span class="p">.</span><span class="nx">spaces</span> <span class="o">=</span> <span class="mi">4</span>

<span class="kd">var</span> <span class="nx">file</span> <span class="o">=</span> <span class="s1">'/tmp/data.json'</span>
<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="s1">'JP'</span><span class="p">}</span>

<span class="c1">// json file has four space indenting now</span>
<span class="nx">jsonfile</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">obj</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
<span class="p">})</span>
</code></pre>

<p>Note, it&rsquo;s bound to <code class="prettyprint">this.spaces</code>. So, if you do this:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">myObj</span> <span class="o">=</span> <span class="p">{}</span>
<span class="nx">myObj</span><span class="p">.</span><span class="nx">writeJsonSync</span> <span class="o">=</span> <span class="nx">jsonfile</span><span class="p">.</span><span class="nx">writeFileSync</span>
<span class="c1">// =&gt; this.spaces = null</span>
</code></pre>

<p>Could do the following:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">jsonfile</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'jsonfile'</span><span class="p">)</span>
<span class="nx">jsonfile</span><span class="p">.</span><span class="nx">spaces</span> <span class="o">=</span> <span class="mi">4</span>
<span class="nx">jsonfile</span><span class="p">.</span><span class="nx">writeFileSync</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span> <span class="c1">// will have 4 spaces indentation</span>

<span class="kd">var</span> <span class="nx">myCrazyObj</span> <span class="o">=</span> <span class="p">{</span><span class="na">spaces</span><span class="p">:</span> <span class="mi">32</span><span class="p">}</span>
<span class="nx">myCrazyObj</span><span class="p">.</span><span class="nx">writeJsonSync</span> <span class="o">=</span> <span class="nx">jsonfile</span><span class="p">.</span><span class="nx">writeFileSync</span>
<span class="nx">myCrazyObj</span><span class="p">.</span><span class="nx">writeJsonSync</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span> <span class="c1">// will have 32 space indentation</span>
<span class="nx">myCrazyObj</span><span class="p">.</span><span class="nx">writeJsonSync</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">obj</span><span class="p">,</span> <span class="p">{</span><span class="na">spaces</span><span class="p">:</span> <span class="mi">2</span><span class="p">})</span> <span class="c1">// will have only 2</span>
</code></pre>

<h2 id="license">License</h2>

<p>(MIT License)</p>

<p>Copyright 2012-2016, JP Richardson  <a href="mailto:jprichardson@gmail.com">jprichardson@gmail.com</a></p>
