function done(o){o&&console.error(o.stack),mongoose.connection.db.dropDatabase(function(){mongoose.connection.close()})}var assert=require("assert"),mongoose=require("../../lib"),Schema=mongoose.Schema,ObjectId=mongoose.Types.ObjectId,dbname="testing_populateAdInfinitum_"+require("../../lib/utils").random();mongoose.connect("localhost",dbname),mongoose.connection.on("error",function(){console.error("connection error",arguments)});var user=new Schema({name:String,friends:[{type:Schema.ObjectId,ref:"User"}]}),User=mongoose.model("User",user),blogpost=Schema({title:String,tags:[String],author:{type:Schema.ObjectId,ref:"User"}}),BlogPost=mongoose.model("BlogPost",blogpost);mongoose.connection.on("open",function(){var o=[new ObjectId,new ObjectId,new ObjectId,new ObjectId],e=[];e.push({_id:o[0],name:"mary",friends:[o[1],o[2],o[3]]}),e.push({_id:o[1],name:"bob",friends:[o[0],o[2],o[3]]}),e.push({_id:o[2],name:"joe",friends:[o[0],o[1],o[3]]}),e.push({_id:o[3],name:"sally",friends:[o[0],o[1],o[2]]}),User.create(e,function(e){assert.ifError(e);var n=[];n.push({title:"blog 1",tags:["fun","cool"],author:o[3]}),n.push({title:"blog 2",tags:["cool"],author:o[1]}),n.push({title:"blog 3",tags:["fun","odd"],author:o[2]}),BlogPost.create(n,function(o){assert.ifError(o),BlogPost.find({tags:"fun"}).lean().populate("author").exec(function(o,e){assert.ifError(o);var n={path:"author.friends",select:"name",options:{limit:2}};BlogPost.populate(e,n,function(o,e){assert.ifError(o),console.log("populated");var n=require("util").inspect(e,{depth:null,colors:!0});console.log(n),done()})})})})});