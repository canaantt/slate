/*!
 * Module dependencies.
 */
function _cast(e,r){if(Array.isArray(e))e.forEach(function(t,n){return Array.isArray(t)||utils.isObject(t)?_cast(t,r):void(e[n]=r.castForQuery(t))});else for(var t=Object.keys(e),n=t.length;n--;){var i=t[n],s=e[i];Array.isArray(s)||utils.isObject(s)?(_cast(s,r),e[i]=s):e[i]=r.castForQuery(s)}}var utils=require("./utils"),Types=require("./schema/index");module.exports=function e(r,t){for(var n,i,s,a,o,c,$=Object.keys(t),u=$.length;u--;)if(a=$[u],c=t[a],"$or"===a||"$nor"===a||"$and"===a)for(var y=c.length;y--;)c[y]=e(r,c[y]);else{if("$where"===a){if(o=typeof c,"string"!==o&&"function"!==o)throw new Error("Must have a string or function for $where");"function"===o&&(t[a]=c.toString());continue}if("$elemMatch"===a)c=e(r,c);else{if(!r)continue;if(i=r.path(a)){if(null===c||void 0===c){t[a]=null;continue}if("Object"===c.constructor.name)if(n=Object.keys(c).some(function(e){return"$"===e.charAt(0)&&"$id"!==e&&"$ref"!==e})){var f,l=Object.keys(c);for(y=l.length;y--;)if(f=l[y],s=c[f],"$exists"!==f){if("$type"!==f)"$not"===f?e(r,s):c[f]=i.castForQuery(f,s);else if("number"!=typeof s&&"string"!=typeof s)throw new Error("$type parameter must be number or string")}else if("boolean"!=typeof s)throw new Error("$exists parameter must be Boolean")}else t[a]=i.castForQuery(c);else t[a]=i.castForQuery(c)}else{for(var m,h,p,g=a.split("."),b=g.length;b--&&(m=g.slice(0,b).join("."),!(i=r.path(m))););if(i){i.caster&&i.caster.schema?(p={},h=g.slice(b).join("."),p[h]=c,t[a]=e(i.caster.schema,p)[h]):t[a]=c;continue}if(utils.isObject(c)){var w=c.$near?"$near":c.$nearSphere?"$nearSphere":c.$within?"$within":c.$geoIntersects?"$geoIntersects":"";if(!w)continue;var v=new Types.Number("__QueryCasting__"),D=c[w];if(null!=c.$maxDistance&&(c.$maxDistance=v.castForQuery(c.$maxDistance)),null!=c.$minDistance&&(c.$minDistance=v.castForQuery(c.$minDistance)),"$within"===w){var d=D.$center||D.$centerSphere||D.$box||D.$polygon;if(!d)throw new Error("Bad $within paramater: "+JSON.stringify(c));D=d}else"$near"===w&&"string"==typeof D.type&&Array.isArray(D.coordinates)?D=D.coordinates:("$near"===w||"$nearSphere"===w||"$geoIntersects"===w)&&D.$geometry&&"string"==typeof D.$geometry.type&&Array.isArray(D.$geometry.coordinates)&&(null!=D.$maxDistance&&(D.$maxDistance=v.castForQuery(D.$maxDistance)),null!=D.$minDistance&&(D.$minDistance=v.castForQuery(D.$minDistance)),D=D.$geometry.coordinates);_cast(D,v)}}}}return t};