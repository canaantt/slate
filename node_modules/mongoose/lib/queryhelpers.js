/*!
 * Module dependencies
 */
/*!
 * Set each path query option to lean
 *
 * @param {Object} option
 */
function makeLean(o){o.options||(o.options={}),o.options.lean=!0}var utils=require("./utils");/*!
 * Prepare a set of path options for query population.
 *
 * @param {Query} query
 * @param {Object} options
 * @return {Array}
 */
exports.preparePopulationOptions=function(o,n){var e=utils.object.vals(o.options.populate);return n.lean&&e.forEach(makeLean),e},/*!
 * Prepare a set of path options for query population. This is the MongooseQuery
 * version
 *
 * @param {Query} query
 * @param {Object} options
 * @return {Array}
 */
exports.preparePopulationOptionsMQ=function(o,n){var e=utils.object.vals(o._mongooseOptions.populate);return n.lean&&e.forEach(makeLean),e},/*!
 * If the document is a mapped discriminator type, it returns a model instance for that type, otherwise,
 * it returns an instance of the given model.
 *
 * @param {Model}  model
 * @param {Object} doc
 * @param {Object} fields
 *
 * @return {Model}
 */
exports.createModel=function(o,n,e){var i=o.schema?o.schema.discriminatorMapping:null,t=i&&i.isRoot?i.key:null;return t&&n[t]&&o.discriminators&&o.discriminators[n[t]]?new o.discriminators[n[t]](void 0,e,!0):new o(void 0,e,!0)};