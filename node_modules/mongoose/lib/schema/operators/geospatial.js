/*!
 * Module requirements.
 */
function cast$near(e){var t=require("../array");return Array.isArray(e)?(castArraysOfNumbers(e,this),e):(_castMinMaxDistance(this,e),e&&e.$geometry?cast$geometry(e,this):t.prototype.castForQuery.call(this,e))}function cast$geometry(e,t){switch(e.$geometry.type){case"Polygon":case"LineString":case"Point":castArraysOfNumbers(e.$geometry.coordinates,t)}return _castMinMaxDistance(this,e),e}function cast$within(e){if(_castMinMaxDistance(this,e),e.$box||e.$polygon){var t=e.$box?"$box":"$polygon";e[t].forEach(function(e){if(!Array.isArray(e)){var t="Invalid $within $box argument. Expected an array, received "+e;throw new TypeError(t)}e.forEach(function(t,r){e[r]=castToNumber.call(this,t)})})}else e.$center||e.$centerSphere?(t=e.$center?"$center":"$centerSphere",e[t].forEach(function(r,a){Array.isArray(r)?r.forEach(function(e,t){r[t]=castToNumber.call(this,e)}):e[t][a]=castToNumber.call(this,r)})):e.$geometry&&cast$geometry(e,this);return e}function cast$geoIntersects(e){var t=e.$geometry;if(t)return cast$geometry(e,this),e}function _castMinMaxDistance(e,t){t.$maxDistance&&(t.$maxDistance=castToNumber.call(e,t.$maxDistance)),t.$minDistance&&(t.$minDistance=castToNumber.call(e,t.$minDistance))}var castArraysOfNumbers=require("./helpers").castArraysOfNumbers,castToNumber=require("./helpers").castToNumber;/*!
 * ignore
 */
exports.cast$geoIntersects=cast$geoIntersects,exports.cast$near=cast$near,exports.cast$within=cast$within;