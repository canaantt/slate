/*!
 * Module dependencies.
 */
function SchemaArray(e,t,r){if(t){var a={};"Object"===utils.getFunctionName(t.constructor)&&(t.type?(a=utils.clone(t),delete a.type,t=t.type):t=Mixed);var s="string"==typeof t?t:utils.getFunctionName(t),i=s in Types?Types[s]:t;this.casterConstructor=i,"function"==typeof i?this.caster=new i(null,a):this.caster=i,this.caster instanceof EmbeddedDoc||(this.caster.path=e)}SchemaType.call(this,e,r,"Array");var n,o,c=this;this.defaultValue&&(n=this.defaultValue,o="function"==typeof n),"defaultValue"in this&&void 0===this.defaultValue||this["default"](function(){var e=o?n():n||[];return new MongooseArray(e,c.path,this)})}function cast$all(e){return Array.isArray(e)||(e=[e]),e=e.map(function(e){if(utils.isObject(e)){var t={};return t[this.path]=e,cast(this.casterConstructor.schema,t)[this.path]}return e},this),this.castForQuery(e)}function cast$elemMatch(e){for(var t,r,a=Object.keys(e),s=a.length,i=0;s>i;++i)t=a[i],r=e[t],0===t.indexOf("$")&&r&&(e[t]=this.castForQuery(t,r));return cast(this.casterConstructor.schema,e)}var SchemaType=require("../schematype"),CastError=SchemaType.CastError,Types={Boolean:require("./boolean"),Date:require("./date"),Number:require("./number"),String:require("./string"),ObjectId:require("./objectid"),Buffer:require("./buffer")},MongooseArray=require("../types").Array,EmbeddedDoc=require("../types").Embedded,Mixed=require("./mixed"),cast=require("../cast"),util=require("util"),utils=require("../utils"),isMongooseObject=utils.isMongooseObject,castToNumber=require("./operators/helpers").castToNumber,geospatial=require("./operators/geospatial");SchemaArray.schemaName="Array",/*!
 * Inherits from SchemaType.
 */
SchemaArray.prototype=Object.create(SchemaType.prototype),SchemaArray.prototype.constructor=SchemaArray,SchemaArray.prototype.checkRequired=function(e){return!(!e||!e.length)},SchemaArray.prototype.applyGetters=function(e,t){return this.caster.options&&this.caster.options.ref?e:SchemaType.prototype.applyGetters.call(this,e,t)},SchemaArray.prototype.cast=function(e,t,r){if(Array.isArray(e)){if(!e.length&&t)for(var a=t.schema.indexedPaths(),s=0,i=a.length;i>s;++s){var n=a[s][0][this.path];if("2dsphere"===n||"2d"===n)return}if(e&&e.isMongooseArray||(e=new MongooseArray(e,this.path,t)),this.caster)try{for(s=0,i=e.length;i>s;s++)e[s]=this.caster.cast(e[s],t,r)}catch(o){throw new CastError("["+o.kind+"]",util.inspect(e),this.path,o)}return e}return t&&r&&t.markModified(this.path),this.cast([e],t,r)},SchemaArray.prototype.castForQuery=function(e,t){var r,a;if(2===arguments.length){if(r=this.$conditionalHandlers[e],!r)throw new Error("Can't use "+e+" with Array.");a=r.call(this,t)}else{a=e;var s=this.casterConstructor.prototype,i=s.castForQuery||s.cast,n=this.caster;Array.isArray(a)?a=a.map(function(e){return utils.isObject(e)&&e.$elemMatch?e:(i&&(e=i.call(n,e)),isMongooseObject(e)?e.toObject({virtuals:!1}):e)}):i&&(a=i.call(n,a))}return a&&isMongooseObject(a)?a.toObject({virtuals:!1}):a};var handle=SchemaArray.prototype.$conditionalHandlers={};handle.$all=cast$all,handle.$options=String,handle.$elemMatch=cast$elemMatch,handle.$geoIntersects=geospatial.cast$geoIntersects,handle.$or=handle.$and=function(e){if(!Array.isArray(e))throw new TypeError("conditional $or/$and require array");for(var t=[],r=0;r<e.length;++r)t.push(cast(this.casterConstructor.schema,e[r]));return t},handle.$near=handle.$nearSphere=geospatial.cast$near,handle.$within=handle.$geoWithin=geospatial.cast$within,handle.$size=handle.$minDistance=handle.$maxDistance=castToNumber,handle.$eq=handle.$gt=handle.$gte=handle.$in=handle.$lt=handle.$lte=handle.$ne=handle.$nin=handle.$regex=SchemaArray.prototype.castForQuery,/*!
 * Module exports.
 */
module.exports=SchemaArray;