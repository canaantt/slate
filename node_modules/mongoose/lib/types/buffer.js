/*!
 * Module dependencies.
 */
function MongooseBuffer(e,t,r){var i,n=arguments.length;i=0===n||null===arguments[0]||void 0===arguments[0]?0:e;var o,u,f;Array.isArray(t)?(u=t[0],f=t[1]):o=t;var s=new Buffer(i,o,r);return utils.decorate(s,MongooseBuffer.mixin),s.isMongooseBuffer=!0,Object.defineProperties(s,{validators:{value:[]},_path:{value:u},_parent:{value:f}}),f&&"string"==typeof u&&Object.defineProperty(s,"_schema",{value:f.schema.path(u)}),s._subtype=0,s}var Binary=require("../drivers").Binary,utils=require("../utils");/*!
 * Inherit from Buffer.
 */
MongooseBuffer.mixin={_parent:void 0,_subtype:void 0,_markModified:function(){var e=this._parent;return e&&e.markModified(this._path),this},write:function(){var e=Buffer.prototype.write.apply(this,arguments);return e>0&&this._markModified(),e},copy:function(e){var t=Buffer.prototype.copy.apply(this,arguments);return e&&e.isMongooseBuffer&&e._markModified(),t}},/*!
 * Compile other Buffer methods marking this buffer as modified.
 */
"writeUInt8 writeUInt16 writeUInt32 writeInt8 writeInt16 writeInt32 writeFloat writeDouble fill utf8Write binaryWrite asciiWrite set writeUInt16LE writeUInt16BE writeUInt32LE writeUInt32BE writeInt16LE writeInt16BE writeInt32LE writeInt32BE writeFloatLE writeFloatBE writeDoubleLE writeDoubleBE".split(" ").forEach(function(e){Buffer.prototype[e]&&(MongooseBuffer.mixin[e]=function(){var t=Buffer.prototype[e].apply(this,arguments);return this._markModified(),t})}),MongooseBuffer.mixin.toObject=function(e){var t="number"==typeof e?e:this._subtype||0;return new Binary(this,t)},MongooseBuffer.mixin.equals=function(e){if(!Buffer.isBuffer(e))return!1;if(this.length!==e.length)return!1;for(var t=0;t<this.length;++t)if(this[t]!==e[t])return!1;return!0},MongooseBuffer.mixin.subtype=function(e){if("number"!=typeof e)throw new TypeError("Invalid subtype. Expected a number");this._subtype!==e&&this._markModified(),this._subtype=e},/*!
 * Module exports.
 */
MongooseBuffer.Binary=Binary,module.exports=MongooseBuffer;