/*!
 * Module dependencies.
 */
function NativeConnection(){MongooseConnection.apply(this,arguments),this._listening=!1}/*!
 * Register listeners for important events and bubble appropriately.
 */
function listen(e){e.db._listening||(e.db._listening=!0,e.db.on("close",function(){return e._closeCalled?void 0:e.db.serverConfig.autoReconnect?(e.readyState=STATES.disconnected,void e.emit("close")):void e.onClose()}),e.db.on("error",function(t){e.emit("error",t)}),e.db.on("reconnect",function(){e.readyState=STATES.connected,e.emit("reconnected")}),e.db.on("timeout",function(t){var o=new Error(t&&t.err||"connection timeout");e.emit("error",o)}),e.db.on("open",function(t,o){STATES.disconnected===e.readyState&&o&&o.databaseName&&(e.readyState=STATES.connected,e.emit("reconnected"))}),e.db.on("parseError",function(t){e.emit("parseError",t)}))}/*!
 * Validates the driver db options.
 *
 * @param {Object} o
 */
function validate(e){if((-1===e.db.w||0===e.db.w)&&(e.db.journal||e.db.fsync||e.db.safe))throw new Error("Invalid writeConcern: w set to -1 or 0 cannot be combined with safe|fsync|journal")}var MongooseConnection=require("../../connection"),mongo=require("mongodb"),Db=mongo.Db,Server=mongo.Server,Mongos=mongo.Mongos,STATES=require("../../connectionstate"),ReplSetServers=mongo.ReplSet,DisconnectedError=require("../../error/disconnected");NativeConnection.STATES=STATES,/*!
 * Inherits from Connection.
 */
NativeConnection.prototype.__proto__=MongooseConnection.prototype,NativeConnection.prototype.doOpen=function(e){var t=this,o=new Server(this.host,this.port,this.options.server);if(this.options&&this.options.mongos){var n=new Mongos([o],this.options.mongos);this.db=new Db(this.name,n,this.options.db)}else this.db=new Db(this.name,o,this.options.db);return this.db.open(function(s){return listen(t),n||o.s.server.on("error",function(e){/after \d+ retries/.test(e.message)&&t.emit("error",new DisconnectedError(o.s.server.name))}),s?e(s):void e()}),this},NativeConnection.prototype.useDb=function(e){function t(){o.db=n.db.db(e),o.onOpen(),listen(o)}var o=new this.constructor;o.name=e,o.base=this.base,o.collections={},o.models={},o.replica=this.replica,o.hosts=this.hosts,o.host=this.host,o.port=this.port,o.user=this.user,o.pass=this.pass,o.options=this.options,o._readyState=this._readyState,o._closeCalled=this._closeCalled,o._hasOpened=this._hasOpened,o._listening=!1;var n=this;return this.db&&this._readyState===STATES.connected?t():this.once("connected",t),o.name=e,this.otherDbs.push(o),o.otherDbs.push(this),o},NativeConnection.prototype.doOpenSet=function(e){var t=[],o=this;this.hosts.forEach(function(e){var n=e.host||e.ipc,s=e.port||27017;t.push(new Server(n,s,o.options.server))});var n=this.options.mongos?new Mongos(t,this.options.mongos):new ReplSetServers(t,this.options.replset||this.options.replSet);return this.db=new Db(this.name,n,this.options.db),this.db.on("fullsetup",function(){o.emit("fullsetup")}),this.db.on("all",function(){o.emit("all")}),this.db.open(function(t){return t?e(t):(e(),void listen(o))}),this},NativeConnection.prototype.doClose=function(e){return this.db.close(e),this},NativeConnection.prototype.parseOptions=function(e,t){var o=e||{};o.db||(o.db={}),o.auth||(o.auth={}),o.server||(o.server={}),o.replset||(o.replset=o.replSet)||(o.replset={}),o.server.socketOptions||(o.server.socketOptions={}),o.replset.socketOptions||(o.replset.socketOptions={}),o.mongos||(o.mongos=t&&t.mongos),o.mongos===!0&&(o.mongos={});var n=t||{};return Object.keys(n).forEach(function(e){switch(e){case"ssl":o.server.ssl=n.ssl,o.replset.ssl=n.ssl,o.mongos&&(o.mongos.ssl=n.ssl);break;case"poolSize":"undefined"==typeof o.server[e]&&(o.server[e]=o.replset[e]=n[e]);break;case"slaveOk":"undefined"==typeof o.server.slave_ok&&(o.server.slave_ok=n[e]);break;case"autoReconnect":"undefined"==typeof o.server.auto_reconnect&&(o.server.auto_reconnect=n[e]);break;case"socketTimeoutMS":case"connectTimeoutMS":"undefined"==typeof o.server.socketOptions[e]&&(o.server.socketOptions[e]=o.replset.socketOptions[e]=n[e]);break;case"authdb":"undefined"==typeof o.auth.authdb&&(o.auth.authdb=n[e]);break;case"authSource":"undefined"==typeof o.auth.authSource&&(o.auth.authSource=n[e]);break;case"retries":case"reconnectWait":case"rs_name":"undefined"==typeof o.replset[e]&&(o.replset[e]=n[e]);break;case"replicaSet":"undefined"==typeof o.replset.rs_name&&(o.replset.rs_name=n[e]);break;case"readSecondary":"undefined"==typeof o.replset.read_secondary&&(o.replset.read_secondary=n[e]);break;case"nativeParser":"undefined"==typeof o.db.native_parser&&(o.db.native_parser=n[e]);break;case"w":case"safe":case"fsync":case"journal":case"wtimeoutMS":"undefined"==typeof o.db[e]&&(o.db[e]=n[e]);break;case"readPreference":"undefined"==typeof o.db.readPreference&&(o.db.readPreference=n[e]);break;case"readPreferenceTags":"undefined"==typeof o.db.read_preference_tags&&(o.db.read_preference_tags=n[e]);break;case"sslValidate":o.server.sslValidate=n.sslValidate,o.replset.sslValidate=n.sslValidate,o.mongos&&(o.mongos.sslValidate=n.sslValidate)}}),"auto_reconnect"in o.server||(o.server.auto_reconnect=!0),o.db.forceServerObjectId=!1,"journal"in o.db||"j"in o.db||"fsync"in o.db||"safe"in o.db||"w"in o.db||(o.db.w=1),o.promiseLibrary&&(o.db.promiseLibrary=o.promiseLibrary),validate(o),o},/*!
 * Module exports.
 */
module.exports=NativeConnection;