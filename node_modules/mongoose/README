<h1 id="mongoose">Mongoose</h1>

<p>Mongoose is a <a href="https://www.mongodb.org/">MongoDB</a> object modeling tool designed to work in an asynchronous environment.</p>

<p><a href="https://travis-ci.org/Automattic/mongoose"><img alt="Build Status" src="https://api.travis-ci.org/Automattic/mongoose.svg?branch=master" /></a>
<a href="https://gitter.im/Automattic/mongoose?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge"><img alt="Gitter" src="https://badges.gitter.im/Join%20Chat.svg" /></a>
<a href="http://badge.fury.io/js/mongoose"><img alt="NPM version" src="https://badge.fury.io/js/mongoose.svg" /></a>
<a href="https://gemnasium.com/Automattic/mongoose"><img alt="Dependency Status" src="https://gemnasium.com/Automattic/mongoose.svg" /></a></p>

<h2 id="documentation">Documentation</h2>

<p><a href="http://mongoosejs.com/">mongoosejs.com</a></p>

<h2 id="support">Support</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/tagged/mongoose">Stack Overflow</a></li>
<li><a href="https://github.com/Automattic/mongoose/issues/">bug reports</a></li>
<li><a href="http://groups.google.com/group/mongoose-orm">help forum</a></li>
<li><a href="https://docs.mongodb.org/manual/support/">MongoDB support</a></li>
<li>(irc) #mongoosejs on freenode</li>
</ul>

<h2 id="plugins">Plugins</h2>

<p>Check out the <a href="http://plugins.mongoosejs.io/">plugins search site</a> to see hundreds of related modules from the community.</p>

<p>Build your own Mongoose plugin through <a href="https://github.com/huei90/generator-mongoose-plugin">generator-mongoose-plugin</a>.</p>

<h2 id="contributors">Contributors</h2>

<p>View all 100+ <a href="https://github.com/Automattic/mongoose/graphs/contributors">contributors</a>. Stand up and be counted as a <a href="https://github.com/Automattic/mongoose/blob/master/CONTRIBUTING.md">contributor</a> too!</p>

<h2 id="live-examples">Live Examples</h2>

<p><a href="http://code.runnable.com/mongoose" target="_blank"><img src="http://i.imgur.com/4yNYDLI.png"></a></p>

<h2 id="installation">Installation</h2>

<p>First install <a href="http://nodejs.org/">node.js</a> and <a href="https://www.mongodb.org/downloads">mongodb</a>. Then:</p>
<pre class="highlight shell"><code><span class="gp">$ </span>npm install mongoose
</code></pre>

<h2 id="stability">Stability</h2>

<p>The current stable branch is <a href="https://github.com/Automattic/mongoose/tree/master">master</a>. The <a href="https://github.com/Automattic/mongoose/tree/3.8.x">3.8.x</a> branch contains legacy support for the 3.x release series, which is no longer under active development as of September 2015. The <a href="http://mongoosejs.com/docs/3.8.x/">3.8.x docs</a> are still available.</p>

<h2 id="overview">Overview</h2>

<h3 id="connecting-to-mongodb">Connecting to MongoDB</h3>

<p>First, we need to define a connection. If your app uses only one database, you should use <code class="prettyprint">mongoose.connect</code>. If you need to create additional connections, use <code class="prettyprint">mongoose.createConnection</code>.</p>

<p>Both <code class="prettyprint">connect</code> and <code class="prettyprint">createConnection</code> take a <code class="prettyprint">mongodb://</code> URI, or the parameters <code class="prettyprint">host, database, port, options</code>.</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'mongoose'</span><span class="p">);</span>

<span class="nx">mongoose</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="s1">'mongodb://localhost/my_database'</span><span class="p">);</span>
</code></pre>

<p>Once connected, the <code class="prettyprint">open</code> event is fired on the <code class="prettyprint">Connection</code> instance. If you&rsquo;re using <code class="prettyprint">mongoose.connect</code>, the <code class="prettyprint">Connection</code> is <code class="prettyprint">mongoose.connection</code>. Otherwise, <code class="prettyprint">mongoose.createConnection</code> return value is a <code class="prettyprint">Connection</code>.</p>

<p><strong>Note:</strong> <em>If the local connection fails then try using 127.0.0.1 instead of localhost. Sometimes issues may arise when the local hostname has been changed.</em></p>

<p><strong>Important!</strong> Mongoose buffers all the commands until it&rsquo;s connected to the database. This means that you don&rsquo;t have to wait until it connects to MongoDB in order to define models, run queries, etc.</p>

<h3 id="defining-a-model">Defining a Model</h3>

<p>Models are defined through the <code class="prettyprint">Schema</code> interface.</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">Schema</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">,</span>
    <span class="nx">ObjectId</span> <span class="o">=</span> <span class="nx">Schema</span><span class="p">.</span><span class="nx">ObjectId</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">BlogPost</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Schema</span><span class="p">({</span>
    <span class="na">author</span>    <span class="p">:</span> <span class="nx">ObjectId</span><span class="p">,</span>
    <span class="na">title</span>     <span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
    <span class="na">body</span>      <span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
    <span class="na">date</span>      <span class="p">:</span> <span class="nb">Date</span>
<span class="p">});</span>
</code></pre>

<p>Aside from defining the structure of your documents and the types of data you&rsquo;re storing, a Schema handles the definition of:</p>

<ul>
<li><a href="http://mongoosejs.com/docs/validation.html">Validators</a> (async and sync)</li>
<li><a href="http://mongoosejs.com/docs/api.html#schematype_SchemaType-default">Defaults</a></li>
<li><a href="http://mongoosejs.com/docs/api.html#schematype_SchemaType-get">Getters</a></li>
<li><a href="http://mongoosejs.com/docs/api.html#schematype_SchemaType-set">Setters</a></li>
<li><a href="http://mongoosejs.com/docs/guide.html#indexes">Indexes</a></li>
<li><a href="http://mongoosejs.com/docs/middleware.html">Middleware</a></li>
<li><a href="http://mongoosejs.com/docs/guide.html#methods">Methods</a> definition</li>
<li><a href="http://mongoosejs.com/docs/guide.html#statics">Statics</a> definition</li>
<li><a href="http://mongoosejs.com/docs/plugins.html">Plugins</a></li>
<li><a href="http://mongoosejs.com/docs/populate.html">pseudo-JOINs</a></li>
</ul>

<p>The following example shows some of these features:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">Comment</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Schema</span><span class="p">({</span>
  <span class="na">name</span><span class="p">:</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="na">default</span><span class="p">:</span> <span class="s1">'hahaha'</span> <span class="p">},</span>
  <span class="na">age</span><span class="p">:</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="nb">Number</span><span class="p">,</span> <span class="na">min</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span> <span class="na">index</span><span class="p">:</span> <span class="kc">true</span> <span class="p">},</span>
  <span class="na">bio</span><span class="p">:</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="na">match</span><span class="p">:</span> <span class="sr">/</span><span class="se">[</span><span class="sr">a-z</span><span class="se">]</span><span class="sr">/</span> <span class="p">},</span>
  <span class="na">date</span><span class="p">:</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="nb">Date</span><span class="p">,</span> <span class="na">default</span><span class="p">:</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span> <span class="p">},</span>
  <span class="na">buff</span><span class="p">:</span> <span class="nx">Buffer</span>
<span class="p">});</span>

<span class="c1">// a setter</span>
<span class="nx">Comment</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="s1">'name'</span><span class="p">).</span><span class="nx">set</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">capitalize</span><span class="p">(</span><span class="nx">v</span><span class="p">);</span>
<span class="p">});</span>

<span class="c1">// middleware</span>
<span class="nx">Comment</span><span class="p">.</span><span class="nx">pre</span><span class="p">(</span><span class="s1">'save'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">notify</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'email'</span><span class="p">));</span>
  <span class="nx">next</span><span class="p">();</span>
<span class="p">});</span>
</code></pre>

<p>Take a look at the example in <code class="prettyprint">examples/schema.js</code> for an end-to-end example of a typical setup.</p>

<h3 id="accessing-a-model">Accessing a Model</h3>

<p>Once we define a model through <code class="prettyprint">mongoose.model(&#39;ModelName&#39;, mySchema)</code>, we can access it through the same function</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">myModel</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="s1">'ModelName'</span><span class="p">);</span>
</code></pre>

<p>Or just do it all at once</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">MyModel</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="s1">'ModelName'</span><span class="p">,</span> <span class="nx">mySchema</span><span class="p">);</span>
</code></pre>

<p>The first argument is the <em>singular</em> name of the collection your model is for. <strong>Mongoose automatically looks for the <em>plural</em> version of your model name.</strong> For example, if you use</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">MyModel</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="s1">'Ticket'</span><span class="p">,</span> <span class="nx">mySchema</span><span class="p">);</span>
</code></pre>

<p>Then Mongoose will create the model for your <strong>tickets</strong> collection, not your <strong>ticket</strong> collection.</p>

<p>Once we have our model, we can then instantiate it, and save it:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyModel</span><span class="p">();</span>
<span class="nx">instance</span><span class="p">.</span><span class="nx">my</span><span class="p">.</span><span class="nx">key</span> <span class="o">=</span> <span class="s1">'hello'</span><span class="p">;</span>
<span class="nx">instance</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">//</span>
<span class="p">});</span>
</code></pre>

<p>Or we can find documents from the same collection</p>
<pre class="highlight javascript"><code><span class="nx">MyModel</span><span class="p">.</span><span class="nx">find</span><span class="p">({},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">docs</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// docs.forEach</span>
<span class="p">});</span>
</code></pre>

<p>You can also <code class="prettyprint">findOne</code>, <code class="prettyprint">findById</code>, <code class="prettyprint">update</code>, etc. For more details check out <a href="http://mongoosejs.com/docs/queries.html">the docs</a>.</p>

<p><strong>Important!</strong> If you opened a separate connection using <code class="prettyprint">mongoose.createConnection()</code> but attempt to access the model through <code class="prettyprint">mongoose.model(&#39;ModelName&#39;)</code> it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">conn</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">createConnection</span><span class="p">(</span><span class="s1">'your connection string'</span><span class="p">),</span>
    <span class="nx">MyModel</span> <span class="o">=</span> <span class="nx">conn</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="s1">'ModelName'</span><span class="p">,</span> <span class="nx">schema</span><span class="p">),</span>
    <span class="nx">m</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyModel</span><span class="p">;</span>
<span class="nx">m</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span> <span class="c1">// works</span>
</code></pre>

<p>vs</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">conn</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">createConnection</span><span class="p">(</span><span class="s1">'your connection string'</span><span class="p">),</span>
    <span class="nx">MyModel</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="s1">'ModelName'</span><span class="p">,</span> <span class="nx">schema</span><span class="p">),</span>
    <span class="nx">m</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyModel</span><span class="p">;</span>
<span class="nx">m</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span> <span class="c1">// does not work b/c the default connection object was never connected</span>
</code></pre>

<h3 id="embedded-documents">Embedded Documents</h3>

<p>In the first example snippet, we defined a key in the Schema that looks like:</p>
<pre class="highlight plaintext"><code>comments: [Comment]
</code></pre>

<p>Where <code class="prettyprint">Comment</code> is a <code class="prettyprint">Schema</code> we created. This means that creating embedded documents is as simple as:</p>
<pre class="highlight javascript"><code><span class="c1">// retrieve my model</span>
<span class="kd">var</span> <span class="nx">BlogPost</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="s1">'BlogPost'</span><span class="p">);</span>

<span class="c1">// create a blog post</span>
<span class="kd">var</span> <span class="nx">post</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BlogPost</span><span class="p">();</span>

<span class="c1">// create a comment</span>
<span class="nx">post</span><span class="p">.</span><span class="nx">comments</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span> <span class="na">title</span><span class="p">:</span> <span class="s1">'My comment'</span> <span class="p">});</span>

<span class="nx">post</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">err</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Success!'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre>

<p>The same goes for removing them:</p>
<pre class="highlight javascript"><code><span class="nx">BlogPost</span><span class="p">.</span><span class="nx">findById</span><span class="p">(</span><span class="nx">myId</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">post</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">post</span><span class="p">.</span><span class="nx">comments</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">remove</span><span class="p">();</span>
    <span class="nx">post</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// do something</span>
    <span class="p">});</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre>

<p>Embedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it&rsquo;s bubbled to the <code class="prettyprint">save()</code> error callback, so error handling is a snap!</p>

<h3 id="middleware">Middleware</h3>

<p>See the <a href="http://mongoosejs.com/docs/middleware.html">docs</a> page.</p>

<h4 id="intercepting-and-mutating-method-arguments">Intercepting and mutating method arguments</h4>

<p>You can intercept method arguments via middleware.</p>

<p>For example, this would allow you to broadcast changes about your Documents every time someone <code class="prettyprint">set</code>s a path in your Document to a new value:</p>
<pre class="highlight javascript"><code><span class="nx">schema</span><span class="p">.</span><span class="nx">pre</span><span class="p">(</span><span class="s1">'set'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">next</span><span class="p">,</span> <span class="nx">path</span><span class="p">,</span> <span class="nx">val</span><span class="p">,</span> <span class="nx">typel</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// `this` is the current Document</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">'set'</span><span class="p">,</span> <span class="nx">path</span><span class="p">,</span> <span class="nx">val</span><span class="p">);</span>

  <span class="c1">// Pass control to the next pre</span>
  <span class="nx">next</span><span class="p">();</span>
<span class="p">});</span>
</code></pre>

<p>Moreover, you can mutate the incoming <code class="prettyprint">method</code> arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to <code class="prettyprint">next</code>:</p>
<pre class="highlight javascript"><code><span class="p">.</span><span class="nx">pre</span><span class="p">(</span><span class="nx">method</span><span class="p">,</span> <span class="kd">function</span> <span class="nx">firstPre</span> <span class="p">(</span><span class="nx">next</span><span class="p">,</span> <span class="nx">methodArg1</span><span class="p">,</span> <span class="nx">methodArg2</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Mutate methodArg1</span>
  <span class="nx">next</span><span class="p">(</span><span class="s2">"altered-"</span> <span class="o">+</span> <span class="nx">methodArg1</span><span class="p">.</span><span class="nx">toString</span><span class="p">(),</span> <span class="nx">methodArg2</span><span class="p">);</span>
<span class="p">});</span>

<span class="c1">// pre declaration is chainable</span>
<span class="p">.</span><span class="nx">pre</span><span class="p">(</span><span class="nx">method</span><span class="p">,</span> <span class="kd">function</span> <span class="nx">secondPre</span> <span class="p">(</span><span class="nx">next</span><span class="p">,</span> <span class="nx">methodArg1</span><span class="p">,</span> <span class="nx">methodArg2</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">methodArg1</span><span class="p">);</span>
  <span class="c1">// =&gt; 'altered-originalValOfMethodArg1'</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">methodArg2</span><span class="p">);</span>
  <span class="c1">// =&gt; 'originalValOfMethodArg2'</span>

  <span class="c1">// Passing no arguments to `next` automatically passes along the current argument values</span>
  <span class="c1">// i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`</span>
  <span class="c1">// and also equivalent to, with the example method arg</span>
  <span class="c1">// values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`</span>
  <span class="nx">next</span><span class="p">();</span>
<span class="p">});</span>
</code></pre>

<h4 id="schema-gotcha">Schema gotcha</h4>

<p><code class="prettyprint">type</code>, when used in a schema has special meaning within Mongoose. If your schema requires using <code class="prettyprint">type</code> as a nested property you must use object notation:</p>
<pre class="highlight javascript"><code><span class="k">new</span> <span class="nx">Schema</span><span class="p">({</span>
  <span class="na">broken</span><span class="p">:</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="nb">Boolean</span> <span class="p">},</span>
    <span class="na">asset</span> <span class="p">:</span> <span class="p">{</span>
      <span class="na">name</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
      <span class="na">type</span><span class="p">:</span> <span class="nb">String</span> <span class="c1">// uh oh, it broke. asset will be interpreted as String</span>
    <span class="p">}</span>
<span class="p">});</span>

<span class="k">new</span> <span class="nx">Schema</span><span class="p">({</span>
  <span class="na">works</span><span class="p">:</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="nb">Boolean</span> <span class="p">},</span>
  <span class="na">asset</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
    <span class="na">type</span><span class="p">:</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="nb">String</span> <span class="p">}</span> <span class="c1">// works. asset is an object with a type property</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre>

<h3 id="driver-access">Driver Access</h3>

<p>Mongoose is built on top of the <a href="https://github.com/mongodb/node-mongodb-native">official MongoDB Node.js driver</a>. Each mongoose model keeps a reference to a <a href="http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html">native MongoDB driver collection</a>. The collection object can be accessed using <code class="prettyprint">YourModel.collection</code>. However, using the collection object directly bypasses all mongoose features, including hooks, validation, etc. The one
notable exception that <code class="prettyprint">YourModel.collection</code> still buffers
commands. As such, <code class="prettyprint">YourModel.collection.find()</code> will <strong>not</strong>
return a cursor.</p>

<h2 id="api-docs">API Docs</h2>

<p>Find the API docs <a href="http://mongoosejs.com/docs/api.html">here</a>, generated using <a href="https://github.com/tj/dox">dox</a>
and <a href="https://github.com/vkarpov15/acquit">acquit</a>.</p>

<h2 id="license">License</h2>

<p>Copyright &copy; 2010 LearnBoost &lt;dev@learnboost.com&gt;</p>

<p>Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
&lsquo;Software&rsquo;), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:</p>

<p>The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.</p>

<p>THE SOFTWARE IS PROVIDED &#39;AS IS&rsquo;, WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>
