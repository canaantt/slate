"use strict";function diff(e,t){for(var r={servers:[]},i=0;i<e.servers.length;i++)for(var s=e.servers[i],n=0;n<t.servers.length;n++){var o=t.servers[n];s.address===o.address&&s.type!=o.type&&r.servers.push({address:s.address,from:s.type,to:o.type})}return r}function emitTopologyDescriptionChanged(e){if(e.replSet.listeners("topologyDescriptionChanged").length>0){var t="Unknown",r=e.setName;e.isPrimaryConnected()&&e.isSecondaryConnected()?t="ReplicaSetWithPrimary":!e.isPrimaryConnected()&&e.isSecondaryConnected()&&(t="ReplicaSetNoPrimary");var i={topologyType:t,setName:r,servers:[]};if(e.isPrimaryConnected()){var s=e.primary.getDescription();s.type="RSPrimary",i.servers.push(s)}i.servers=i.servers.concat(e.secondaries.map(function(e){var t=e.getDescription();return t.type="RSSecondary",t})),i.servers=i.servers.concat(e.arbiters.map(function(e){var t=e.getDescription();return t})),i.servers=i.servers.concat(e.passives.map(function(e){var t=e.getDescription();return t.type="RSSecondary",t}));var n={topologyId:e.id,previousDescription:e.replicasetDescription,newDescription:i,diff:diff(e.replicasetDescription,i)};e.replSet.emit("topologyDescriptionChanged",n),e.replicasetDescription=i}}var Logger=require("../connection/logger"),f=require("util").format,ObjectId=require("bson").ObjectId,MongoError=require("../error"),DISCONNECTED="disconnected",CONNECTING="connecting",CONNECTED="connected",DESTROYED="destroyed",State=function(e,t){this.replSet=e,this.options=t,this.secondaries=[],this.arbiters=[],this.passives=[],this.primary=null,this.state=DISCONNECTED,this.electionId=null,this.logger=Logger("ReplSet",t),this.id=t.id,this.setName=t.setName,this.connectingServers={},this.secondaryOnlyConnectionAllowed=t.secondaryOnlyConnectionAllowed,this.replicasetDescription=null};State.prototype.resetDescription=function(){this.replicasetDescription={topologyType:"Unknown",servers:[]}},State.prototype.isSecondaryConnected=function(){for(var e=0;e<this.secondaries.length;e++)if(this.secondaries[e].isConnected())return!0;return!1},State.prototype.isPrimaryConnected=function(){return null!=this.primary&&this.primary.isConnected()},State.prototype.isPrimary=function(e){return null==this.primary?!1:this.primary&&this.primary.equals(e)},State.prototype.isSecondary=function(e){for(var t=0;t<this.secondaries.length;t++)if(this.secondaries[t].equals(e))return!0;return!1},State.prototype.isPassive=function(e){for(var t=0;t<this.passives.length;t++)if(this.passives[t].equals(e))return!0;return!1},State.prototype.clearConnectingServers=function(){for(var e in this.connectingServers)"function"==typeof this.connectingServers[e].destroy&&this.connectingServers[e].destroy();this.connectingServers={}},State.prototype.removeConnectingServer=function(e){this.connectingServers[e]&&this.connectingServers[e].destroy&&this.connectingServers[e].destroy(),delete this.connectingServers[e]},State.prototype.addConnectingServer=function(e,t){this.connectingServers[e]=t},State.prototype.isConnectingServer=function(e){return null!=this.connectingServers[e]},State.prototype.connectingServersCount=function(){return Object.keys(this.connectingServers).length},State.prototype.contains=function(e){if(this.primary&&this.primary.equals(e))return!0;for(var t=0;t<this.secondaries.length;t++)if(this.secondaries[t].equals(e))return!0;for(var t=0;t<this.arbiters.length;t++)if(this.arbiters[t].equals(e))return!0;for(var t=0;t<this.passives.length;t++)if(this.passives[t].equals(e))return!0;return!1},State.prototype.getSecondaries=function(){return this.secondaries=this.secondaries.filter(function(e){return e.isConnected()}),this.secondaries.filter(function(e){return e.lastIsMaster().hidden?!1:!0})},State.prototype.clean=function(){var e=[];return null==this.primary||this.primary.isConnected()||(e.push(this.primary),this.primary=null),this.secondaries=this.secondaries.filter(function(t){return t.isConnected()||e.push(t),t.isConnected()}),this.arbiters=this.arbiters.filter(function(t){return t.isConnected()||e.push(t),t.isConnected()}),this.passives=this.passives.filter(function(t){return t.isConnected()||e.push(t),t.isConnected()}),e},State.prototype.unref=function(){this.primary&&this.primary.unref(),this.secondaries.forEach(function(e){e.unref()}),this.arbiters.forEach(function(e){e.unref()})};var events=["timeout","error","close","joined","left","serverOpening","serverDescriptionChanged","serverHeartbeatStarted","serverHeartbeatSucceeded","serverHearbeatFailed","serverClosed"],removeEvents=function(e){events.forEach(function(t){e.removeAllListeners(t)})};State.prototype.destroy=function(){this.state=DESTROYED,this.primary&&(this.primary.destroy(),removeEvents(this.primary)),this.secondaries.forEach(function(e){e.destroy(),removeEvents(e)}),this.arbiters.forEach(function(e){e.destroy(),removeEvents(e)})},State.prototype.remove=function(e){this.primary&&this.primary.equals(e)&&(this.primary=null);var t=this.arbiters.length;if(this.arbiters=this.arbiters.filter(function(t){return!t.equals(e)}),this.arbiters.length<t)return"arbiter";var t=this.passives.length;this.passives=this.passives.filter(function(t){return!t.equals(e)}),this.passives.length<t&&(this.secondaries=this.secondaries.filter(function(t){return!t.equals(e)})),this.secondaries=this.secondaries.filter(function(t){return!t.equals(e)});var r=e.lastIsMaster();return r.ismaster&&r.hosts?"primary":r.ismaster?"secondary":r.secondary?"secondary":r.passive?"passive":"arbiter"},State.prototype.get=function(e){var t=this.primary?[this.primary]:[];t=t.concat(this.secondaries);for(var r=0;r<t.length;r++)if(t[r].equals(e))return t[r]},State.prototype.getAll=function(e){e=e||{};var t=[];return this.primary&&t.push(this.primary),t=t.concat(this.secondaries),e.includeArbiters&&(t=t.concat(this.arbiters)),t},State.prototype.getAllConnections=function(e){e=e||{};var t=[];return this.primary&&(t=t.concat(this.primary.connections())),this.secondaries.forEach(function(e){t=t.concat(e.connections())}),e.includeArbiters&&this.arbiters.forEach(function(e){t=t.concat(e.connections())}),t},State.prototype.toJSON=function(){return{primary:this.primary?this.primary.lastIsMaster().me:null,secondaries:this.secondaries.map(function(e){return e.lastIsMaster().me})}},State.prototype.lastIsMaster=function(){return this.primary?this.primary.lastIsMaster():this.secondaries.length>0?this.secondaries[0].lastIsMaster():{}},State.prototype.promotePrimary=function(e){var t=this.get(e);return null==t?void(this.primary=e):(this.remove(t),void(this.primary=t))};var add=function(e,t,r){for(var i=0;i<t.length;i++)if(t[i].equals(r))return!1;return t.push(r),!0};State.prototype.addSecondary=function(e){return add(this,this.secondaries,e)},State.prototype.addArbiter=function(e){return add(this,this.arbiters,e)},State.prototype.addPassive=function(e){return add(this,this.passives,e)};var compareObjectIds=function(e,t){var r=new Buffer(e.toHexString(),"hex"),i=new Buffer(t.toHexString(),"hex");if(r===i)return 0;if("function"==typeof Buffer.compare)return Buffer.compare(r,i);for(var s=r.length,n=i.length,o=Math.min(s,n),a=0;o>a&&r[a]===i[a];a++);return a!==o&&(s=r[a],n=i[a]),n>s?-1:s>n?1:0};State.prototype.update=function(e,t){var r=this;if(this.clean(),!e.ismaster&&!e.secondary&&!e.arbiterOnly||!Array.isArray(e.hosts)){var i=r.remove(t);return r.state==CONNECTED&&(r.logger.isInfo()&&r.logger.info(f("[%s] removing %s from set",r.id,e.me)),r.replSet.emit("left",i,t)),emitTopologyDescriptionChanged(this),!1}if(null==r.setName&&e.setName&&(r.logger.isInfo()&&r.logger.info(f("[%s] setting setName to %s",r.id,e.setName)),r.setName=e.setName),e.setName&&r.setName!=e.setName)return r.logger.isError()&&r.logger.error(f("[%s] server in replset %s is not part of the specified setName %s",r.id,e.setName,r.setName)),r.remove(t),r.replSet.emit("error",new MongoError("provided setName for Replicaset Connection does not match setName found in server seedlist")),emitTopologyDescriptionChanged(this),!1;if(r.logger.isInfo()&&r.logger.info(f("[%s] updating replicaset state %s",r.id,JSON.stringify(this))),e.ismaster&&r.setName==e.setName&&!r.isPrimary(e.me)){if(e.electionId instanceof ObjectId&&r.electionId instanceof ObjectId)if(-1==compareObjectIds(r.electionId,e.electionId))r.electionId=e.electionId;else{if(0!=compareObjectIds(r.electionId,e.electionId))return!1;r.electionId=e.electionId}e.electionId instanceof ObjectId&&null==r.electionId&&(r.electionId=e.electionId),r.promotePrimary(t),r.logger.isInfo()&&r.logger.info(f("[%s] promoting %s to primary",r.id,e.me)),r.replSet.emit("joined","primary",this.primary),emitTopologyDescriptionChanged(this),r.state==CONNECTING?(r.state=CONNECTED,r.replSet.emit("connect",r.replSet)):(r.state=CONNECTED,r.replSet.emit("reconnect",t))}else{if(!e.ismaster&&r.setName==e.setName&&e.arbiterOnly)return r.addArbiter(t)?(r.logger.isInfo()&&r.logger.info(f("[%s] promoting %s to arbiter",r.id,e.me)),r.replSet.emit("joined","arbiter",t),emitTopologyDescriptionChanged(this),!0):!1;if(!e.ismaster&&r.setName==e.setName&&e.secondary&&e.passive)return r.addPassive(t)&&r.addSecondary(t)?(r.logger.isInfo()&&r.logger.info(f("[%s] promoting %s to passive",r.id,e.me)),r.replSet.emit("joined","passive",t),r.secondaryOnlyConnectionAllowed&&r.state==CONNECTING&&(r.state=CONNECTED,r.replSet.emit("connect",r.replSet)),emitTopologyDescriptionChanged(this),!0):!1;if(!e.ismaster&&r.setName==e.setName&&e.secondary)return r.addSecondary(t)?(r.logger.isInfo()&&r.logger.info(f("[%s] promoting %s to secondary",r.id,e.me)),r.replSet.emit("joined","secondary",t),r.primary&&r.primary.name==t.name&&(r.primary=null),r.secondaryOnlyConnectionAllowed&&r.state==CONNECTING&&(r.state=CONNECTED,r.replSet.emit("connect",r.replSet)),emitTopologyDescriptionChanged(this),!0):!1}return!0},module.exports=State;