<h1 id="hooks">hooks</h1>

<p>Add pre and post middleware hooks to your JavaScript methods.</p>

<h2 id="installation">Installation</h2>

<p>npm install hooks</p>

<h2 id="motivation">Motivation</h2>

<p>Suppose you have a JavaScript object with a <code class="prettyprint">save</code> method.</p>

<p>It would be nice to be able to declare code that runs before <code class="prettyprint">save</code> and after <code class="prettyprint">save</code>.
For example, you might want to run validation code before every <code class="prettyprint">save</code>,
and you might want to dispatch a job to a background job queue after <code class="prettyprint">save</code>.</p>

<p>One might have an urge to hard code this all into <code class="prettyprint">save</code>, but that turns out to
couple all these pieces of functionality (validation, save, and job creation) more
tightly than is necessary. For example, what if someone does not want to do background
job creation after the logical save?</p>

<p>It is nicer to tack on functionality using what we call <code class="prettyprint">pre</code> and <code class="prettyprint">post</code> hooks. These
are functions that you define and that you direct to execute before or after particular
methods.</p>

<h2 id="example">Example</h2>

<p>We can use <code class="prettyprint">hooks</code> to add validation and background jobs in the following way:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">hooks</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'hooks'</span><span class="p">)</span>
  <span class="p">,</span> <span class="nx">Document</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./path/to/some/document/constructor'</span><span class="p">);</span>

<span class="c1">// Add hooks' methods: `hook`, `pre`, and `post`</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">k</span> <span class="k">in</span> <span class="nx">hooks</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">Document</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">=</span> <span class="nx">hooks</span><span class="p">[</span><span class="nx">k</span><span class="p">];</span>
<span class="p">}</span>

<span class="c1">// Define a new method that is able to invoke pre and post middleware</span>
<span class="nx">Document</span><span class="p">.</span><span class="nx">hook</span><span class="p">(</span><span class="s1">'save'</span><span class="p">,</span> <span class="nx">Document</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">save</span><span class="p">);</span>

<span class="c1">// Define a middleware function to be invoked before 'save'</span>
<span class="nx">Document</span><span class="p">.</span><span class="nx">pre</span><span class="p">(</span><span class="s1">'save'</span><span class="p">,</span> <span class="kd">function</span> <span class="nx">validate</span> <span class="p">(</span><span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// The `this` context inside of `pre` and `post` functions</span>
  <span class="c1">// is the Document instance</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isValid</span><span class="p">())</span> <span class="nx">next</span><span class="p">();</span>      <span class="c1">// next() passes control to the next middleware</span>
                                   <span class="c1">// or to the target method itself</span>
  <span class="k">else</span> <span class="nx">next</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">"Invalid"</span><span class="p">));</span> <span class="c1">// next(error) invokes an error callback</span>
<span class="p">});</span>

<span class="c1">// Define a middleware function to be invoked after 'save'</span>
<span class="nx">Document</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">'save'</span><span class="p">,</span> <span class="kd">function</span> <span class="nx">createJob</span> <span class="p">(</span><span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">sendToBackgroundQueue</span><span class="p">();</span>
  <span class="nx">next</span><span class="p">();</span>
<span class="p">});</span>
</code></pre>

<p>If you already have defined <code class="prettyprint">Document.prototype</code> methods for which you want pres and posts,
then you do not need to explicitly invoke <code class="prettyprint">Document.hook(...)</code>. Invoking <code class="prettyprint">Document.pre(methodName, fn)</code>
or <code class="prettyprint">Document.post(methodName, fn)</code> will automatically and lazily change <code class="prettyprint">Document.prototype[methodName]</code>
so that it plays well with <code class="prettyprint">hooks</code>. An equivalent way to implement the previous example is:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">hooks</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'hooks'</span><span class="p">)</span>
  <span class="p">,</span> <span class="nx">Document</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./path/to/some/document/constructor'</span><span class="p">);</span>

<span class="c1">// Add hooks' methods: `hook`, `pre`, and `post`</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">k</span> <span class="k">in</span> <span class="nx">hooks</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">Document</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">=</span> <span class="nx">hooks</span><span class="p">[</span><span class="nx">k</span><span class="p">];</span>
<span class="p">}</span>

<span class="nx">Document</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">save</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">};</span>

<span class="c1">// Define a middleware function to be invoked before 'save'</span>
<span class="nx">Document</span><span class="p">.</span><span class="nx">pre</span><span class="p">(</span><span class="s1">'save'</span><span class="p">,</span> <span class="kd">function</span> <span class="nx">validate</span> <span class="p">(</span><span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// The `this` context inside of `pre` and `post` functions</span>
  <span class="c1">// is the Document instance</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isValid</span><span class="p">())</span> <span class="nx">next</span><span class="p">();</span>      <span class="c1">// next() passes control to the next middleware</span>
                                   <span class="c1">// or to the target method itself</span>
  <span class="k">else</span> <span class="nx">next</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">"Invalid"</span><span class="p">));</span> <span class="c1">// next(error) invokes an error callback</span>
<span class="p">});</span>

<span class="c1">// Define a middleware function to be invoked after 'save'</span>
<span class="nx">Document</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">'save'</span><span class="p">,</span> <span class="kd">function</span> <span class="nx">createJob</span> <span class="p">(</span><span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">sendToBackgroundQueue</span><span class="p">();</span>
  <span class="nx">next</span><span class="p">();</span>
<span class="p">});</span>
</code></pre>

<h2 id="pres-and-posts-as-middleware">Pres and Posts as Middleware</h2>

<p>We structure pres and posts as middleware to give you maximum flexibility:</p>

<ol>
<li>You can define <strong>multiple</strong> pres (or posts) for a single method.</li>
<li>These pres (or posts) are then executed as a chain of methods.</li>
<li>Any functions in this middleware chain can choose to halt the chain&rsquo;s execution by <code class="prettyprint">next</code>ing an Error from that middleware function. If this occurs, then none of the other middleware in the chain will execute, and the main method (e.g., <code class="prettyprint">save</code>) will not execute. This is nice, for example, when we don&rsquo;t want a document to save if it is invalid.</li>
</ol>

<h2 id="defining-multiple-pres-or-posts">Defining multiple pres (or posts)</h2>

<p><code class="prettyprint">pre</code> and <code class="prettyprint">post</code> are chainable, so you can define multiple via:
&ldquo;`javascript
Document.pre(&lsquo;save&rsquo;, function (next) {
  console.log(&quot;hello&rdquo;);
  next();
}).pre(&#39;save&rsquo;, function (next) {
  console.log(&ldquo;world&rdquo;);
  next();
});</p>

<p>Document.post(&#39;save&rsquo;, function (next) {
  console.log(&ldquo;hello&rdquo;);
  next();
}).post(&#39;save&rsquo;, function (next) {
  console.log(&ldquo;world&rdquo;);
  next();
});
&ldquo;`</p>

<p>As soon as one pre finishes executing, the next one will be invoked, and so on.</p>

<h2 id="error-handling">Error Handling</h2>

<p>You can define a default error handler by passing a 2nd function as the 3rd argument to <code class="prettyprint">hook</code>:
<code class="prettyprint">javascript
Document.hook(&#39;set&#39;, function (path, val) {
  this[path] = val;
}, function (err) {
  // Handler the error here
  console.error(err);
});
</code></p>

<p>Then, we can pass errors to this handler from a pre or post middleware function:
<code class="prettyprint">javascript
Document.pre(&#39;set&#39;, function (next, path, val) {
  next(new Error());
});
</code></p>

<p>If you do not set up a default handler, then <code class="prettyprint">hooks</code> makes the default handler that just throws the <code class="prettyprint">Error</code>.</p>

<p>The default error handler can be over-rided on a per method invocation basis.</p>

<p>If the main method that you are surrounding with pre and post middleware expects its last argument to be a function
with callback signature <code class="prettyprint">function (error, ...)</code>, then that callback becomes the error handler, over-riding the default
error handler you may have set up.</p>
<pre class="highlight javascript"><code><span class="nx">Document</span><span class="p">.</span><span class="nx">hook</span><span class="p">(</span><span class="s1">'save'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Save logic goes here</span>
  <span class="p">...</span>
<span class="p">});</span>

<span class="kd">var</span> <span class="nx">doc</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Document</span><span class="p">();</span>
<span class="nx">doc</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">saved</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// We can pass err via `next` in any of our pre or post middleware functions</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>

  <span class="c1">// Rest of callback logic follows ...</span>
<span class="p">});</span>
</code></pre>

<h2 id="mutating-arguments-via-middleware">Mutating Arguments via Middleware</h2>

<p><code class="prettyprint">pre</code> and <code class="prettyprint">post</code> middleware can also accept the intended arguments for the method
they augment. This is useful if you want to mutate the arguments before passing
them along to the next middleware and eventually pass a mutated arguments list to
the main method itself.</p>

<p>As a simple example, let&rsquo;s define a method <code class="prettyprint">set</code> that just sets a key, value pair.
If we want to namespace the key, we can do so by adding a <code class="prettyprint">pre</code> middleware hook
that runs before <code class="prettyprint">set</code>, alters the arguments by namespacing the <code class="prettyprint">key</code> argument, and passes them onto <code class="prettyprint">set</code>:</p>
<pre class="highlight javascript"><code><span class="nx">Document</span><span class="p">.</span><span class="nx">hook</span><span class="p">(</span><span class="s1">'set'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">val</span><span class="p">;</span>
<span class="p">});</span>
<span class="nx">Document</span><span class="p">.</span><span class="nx">pre</span><span class="p">(</span><span class="s1">'set'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">next</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">next</span><span class="p">(</span><span class="s1">'namespace-'</span> <span class="o">+</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">val</span><span class="p">);</span>
<span class="p">});</span>
<span class="kd">var</span> <span class="nx">doc</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Document</span><span class="p">();</span>
<span class="nx">doc</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">,</span> <span class="s1">'world'</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">doc</span><span class="p">.</span><span class="nx">hello</span><span class="p">);</span> <span class="c1">// undefined</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">doc</span><span class="p">[</span><span class="s1">'namespace-hello'</span><span class="p">]);</span> <span class="c1">// 'world'</span>
</code></pre>

<p>As you can see above, we pass arguments via <code class="prettyprint">next</code>.</p>

<p>If you are not mutating the arguments, then you can pass zero arguments
to <code class="prettyprint">next</code>, and the next middleware function will still have access
to the arguments.</p>
<pre class="highlight javascript"><code><span class="nx">Document</span><span class="p">.</span><span class="nx">hook</span><span class="p">(</span><span class="s1">'set'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">val</span><span class="p">;</span>
<span class="p">});</span>
<span class="nx">Document</span><span class="p">.</span><span class="nx">pre</span><span class="p">(</span><span class="s1">'set'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">next</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// I have access to key and val here</span>
  <span class="nx">next</span><span class="p">();</span> <span class="c1">// We don't need to pass anything to next</span>
<span class="p">});</span>
<span class="nx">Document</span><span class="p">.</span><span class="nx">pre</span><span class="p">(</span><span class="s1">'set'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">next</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// And I still have access to the original key and val here</span>
  <span class="nx">next</span><span class="p">();</span>
<span class="p">});</span>
</code></pre>

<p>Finally, you can add arguments that downstream middleware can also see:</p>
<pre class="highlight javascript"><code><span class="c1">// Note that in the definition of `set`, there is no 3rd argument, options</span>
<span class="nx">Document</span><span class="p">.</span><span class="nx">hook</span><span class="p">(</span><span class="s1">'set'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// But...</span>
  <span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span> <span class="c1">// ...I have access to an options argument</span>
                              <span class="c1">// because of pre function pre2 (defined below)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">options</span><span class="p">);</span> <span class="c1">// '{debug: true}'</span>
  <span class="k">this</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">val</span><span class="p">;</span>
<span class="p">});</span>
<span class="nx">Document</span><span class="p">.</span><span class="nx">pre</span><span class="p">(</span><span class="s1">'set'</span><span class="p">,</span> <span class="kd">function</span> <span class="nx">pre1</span> <span class="p">(</span><span class="nx">next</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// I only have access to key and val arguments</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span> <span class="c1">// 3</span>
  <span class="nx">next</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">val</span><span class="p">,</span> <span class="p">{</span><span class="na">debug</span><span class="p">:</span> <span class="kc">true</span><span class="p">});</span>
<span class="p">});</span>
<span class="nx">Document</span><span class="p">.</span><span class="nx">pre</span><span class="p">(</span><span class="s1">'set'</span><span class="p">,</span> <span class="kd">function</span> <span class="nx">pre2</span> <span class="p">(</span><span class="nx">next</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">val</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span> <span class="c1">// 4</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">options</span><span class="p">);</span> <span class="c1">// '{ debug: true}'</span>
  <span class="nx">next</span><span class="p">();</span>
<span class="p">});</span>
<span class="nx">Document</span><span class="p">.</span><span class="nx">pre</span><span class="p">(</span><span class="s1">'set'</span><span class="p">,</span> <span class="kd">function</span> <span class="nx">pre3</span> <span class="p">(</span><span class="nx">next</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">val</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// I still have access to key, val, AND the options argument introduced via the preceding middleware</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span> <span class="c1">// 4</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">options</span><span class="p">);</span> <span class="c1">// '{ debug: true}'</span>
  <span class="nx">next</span><span class="p">();</span>
<span class="p">});</span>

<span class="kd">var</span> <span class="nx">doc</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Document</span><span class="p">()</span>
<span class="nx">doc</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">'hey'</span><span class="p">,</span> <span class="s1">'there'</span><span class="p">);</span>
</code></pre>

<h2 id="post-middleware">Post middleware</h2>

<p>Post middleware intercepts the callback originally sent to the asynchronous function you have hooked to.</p>

<p>This means that the following chain of execution will occur in a typical <code class="prettyprint">save</code> operation:</p>

<p>(1) doc.save -&gt; (2) pre &ndash;(next)&ndash;&gt; (3) save calls back -&gt; (4) post &ndash;(next)&ndash;&gt; (5) targetFn</p>

<p>Illustrated below:</p>
<pre class="highlight plaintext"><code>Document.pre('save', function (next) {
  this.key = "value";
  next();
});
// Post handler occurs before `set` calls back. This is useful if we need to grab something
// async before `set` finishes.
Document.post('set', function (next) {
  var me = this;
  getSomethingAsync(function(value){ // let's assume it returns "Hello Async"
    me.key2 = value;
    next();
  });
});

var doc = new Document();
doc.save(function(err){
  console.log(this.key);  // "value" - this value was saved
  console.log(this.key2); // "Hello Async" - this value was *not* saved
}

</code></pre>

<p>Post middleware must call <code class="prettyprint">next()</code> or execution will stop.</p>

<h2 id="parallel-pre-middleware">Parallel <code class="prettyprint">pre</code> middleware</h2>

<p>All middleware up to this point has been &quot;serial&rdquo; middleware &ndash; i.e., middleware whose logic
is executed as a serial chain.</p>

<p>Some scenarios call for parallel middleware &ndash; i.e., middleware that can wait for several
asynchronous services at once to respond.</p>

<p>For instance, you may only want to save a Document only after you have checked
that the Document is valid according to two different remote services.</p>

<p>We accomplish asynchronous middleware by adding a second kind of flow control callback
(the only flow control callback so far has been <code class="prettyprint">next</code>), called <code class="prettyprint">done</code>.</p>

<ul>
<li><code class="prettyprint">next</code> passes control to the next middleware in the chain</li>
<li><code class="prettyprint">done</code> keeps track of how many parallel middleware have invoked <code class="prettyprint">done</code> and passes
control to the target method when ALL parallel middleware have invoked <code class="prettyprint">done</code>. If
you pass an <code class="prettyprint">Error</code> to <code class="prettyprint">done</code>, then the error is handled, and the main method that is
wrapped by pres and posts will not get invoked.</li>
</ul>

<p>We declare pre middleware that is parallel by passing a 3rd boolean argument to our <code class="prettyprint">pre</code>
definition method.</p>

<p>We illustrate via the parallel validation example mentioned above:</p>
<pre class="highlight javascript"><code><span class="nx">Document</span><span class="p">.</span><span class="nx">hook</span><span class="p">(</span><span class="s1">'save'</span><span class="p">,</span> <span class="kd">function</span> <span class="nx">targetFn</span> <span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Save logic goes here</span>
  <span class="c1">// ...</span>
  <span class="c1">// This only gets run once the two `done`s are both invoked via preOne and preTwo.</span>
<span class="p">});</span>

                     <span class="c1">// true marks this as parallel middleware</span>
<span class="nx">Document</span><span class="p">.</span><span class="nx">pre</span><span class="p">(</span><span class="s1">'save'</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kd">function</span> <span class="nx">preOne</span> <span class="p">(</span><span class="nx">next</span><span class="p">,</span> <span class="nx">doneOne</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">remoteServiceOne</span><span class="p">.</span><span class="nx">validate</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">serialize</span><span class="p">(),</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">isValid</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// The code in here will probably be run after the `next` below this block</span>
    <span class="c1">// and could possibly be run after the console.log("Hola") in `preTwo</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">doneOne</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">isValid</span><span class="p">)</span> <span class="nx">doneOne</span><span class="p">();</span>
  <span class="p">});</span>
  <span class="nx">next</span><span class="p">();</span> <span class="c1">// Pass control to the next middleware</span>
<span class="p">});</span>

<span class="c1">// We will suppose that we need 2 different remote services to validate our document</span>
<span class="nx">Document</span><span class="p">.</span><span class="nx">pre</span><span class="p">(</span><span class="s1">'save'</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kd">function</span> <span class="nx">preTwo</span> <span class="p">(</span><span class="nx">next</span><span class="p">,</span> <span class="nx">doneTwo</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">remoteServiceTwo</span><span class="p">.</span><span class="nx">validate</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">serialize</span><span class="p">(),</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">isValid</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">doneTwo</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">isValid</span><span class="p">)</span> <span class="nx">doneTwo</span><span class="p">();</span>
  <span class="p">});</span>
  <span class="nx">next</span><span class="p">();</span>
<span class="p">});</span>

<span class="c1">// While preOne and preTwo are parallel, preThree is a serial pre middleware</span>
<span class="nx">Document</span><span class="p">.</span><span class="nx">pre</span><span class="p">(</span><span class="s1">'save'</span><span class="p">,</span> <span class="kd">function</span> <span class="nx">preThree</span> <span class="p">(</span><span class="nx">next</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">next</span><span class="p">();</span>
<span class="p">});</span>

<span class="kd">var</span> <span class="nx">doc</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Document</span><span class="p">();</span>
<span class="nx">doc</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Do stuff with the saved doc here...</span>
<span class="p">});</span>
</code></pre>

<p>In the above example, flow control may happen in the following way:</p>

<p>(1) doc.save -&gt; (2) preOne &ndash;(next)&ndash;&gt; (3) preTwo &ndash;(next)&ndash;&gt; (4) preThree &ndash;(next)&ndash;&gt; (wait for dones to invoke) -&gt; (5) doneTwo -&gt; (6) doneOne -&gt; (7) targetFn</p>

<p>So what&rsquo;s happening is that:</p>

<ol>
<li>You call <code class="prettyprint">doc.save(...)</code></li>
<li>First, your preOne middleware gets executed. It makes a remote call to the validation service and <code class="prettyprint">next()</code>s to the preTwo middleware.</li>
<li>Now, your preTwo middleware gets executed. It makes a remote call to another validation service and <code class="prettyprint">next()</code>s to the preThree middleware.</li>
<li>Your preThree middleware gets executed. It immediately <code class="prettyprint">next()</code>s. But nothing else gets executing until both <code class="prettyprint">doneOne</code> and <code class="prettyprint">doneTwo</code> are invoked inside the callbacks handling the response from the two valiation services.</li>
<li>We will suppose that validation remoteServiceTwo returns a response to us first. In this case, we call <code class="prettyprint">doneTwo</code> inside the callback to remoteServiceTwo.</li>
<li>Some fractions of a second later, remoteServiceOne returns a response to us. In this case, we call <code class="prettyprint">doneOne</code> inside the callback to remoteServiceOne.</li>
<li><code class="prettyprint">hooks</code> implementation keeps track of how many parallel middleware has been defined per target function. It detects that both asynchronous pre middlewares (<code class="prettyprint">preOne</code> and <code class="prettyprint">preTwo</code>) have finally called their <code class="prettyprint">done</code> functions (<code class="prettyprint">doneOne</code> and <code class="prettyprint">doneTwo</code>), so the implementation finally invokes our <code class="prettyprint">targetFn</code> (i.e., our core <code class="prettyprint">save</code> business logic).</li>
</ol>

<h2 id="removing-pres">Removing Pres</h2>

<p>You can remove a particular pre associated with a hook:</p>

<p>Document.pre(&#39;set&rsquo;, someFn);
    Document.removePre(&#39;set&rsquo;, someFn);</p>

<p>And you can also remove all pres associated with a hook:
    Document.removePre(&#39;set&rsquo;); // Removes all declared <code class="prettyprint">pre</code>s on the hook &#39;set&rsquo;</p>

<h2 id="tests">Tests</h2>

<p>To run the tests:
    make test</p>

<h3 id="contributors">Contributors</h3>

<ul>
<li><a href="https://github.com/bnoguchi">Brian Noguchi</a></li>
</ul>

<h3 id="license">License</h3>

<p>MIT License</p>

<hr>

<h3 id="author">Author</h3>

<p>Brian Noguchi</p>
