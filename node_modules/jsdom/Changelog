<h2 id="9-4-2">9.4.2</h2>

<ul>
<li>Fixed what would happen when inline event handlers (such as <code class="prettyprint">element.onclick</code>) would return non-boolean values (such as <code class="prettyprint">undefined</code>); it would previously erroneously cancel the event, in many cases. (dmethvin)</li>
<li>Upgraded the minimum tough-cookie version to ensure all installations are protected against <a href="https://nodesecurity.io/advisories/130">a security advisory</a>.</li>
</ul>

<h2 id="9-4-1">9.4.1</h2>

<ul>
<li>Implemented the cloning steps for <code class="prettyprint">&lt;input&gt;</code> elements, so that cloned inputs properly copy over their value, checkedness, dirty value flag, and dirty checkedness flag. (matthewp)</li>
</ul>

<h2 id="9-4-0">9.4.0</h2>

<ul>
<li>Added the <code class="prettyprint">DOMParser</code> API. It is spec-compliant, including producing <code class="prettyprint">&lt;parsererror&gt;</code> elements, except that the produced documents do not have the same URL as the creating document (they instead always have <code class="prettyprint">&quot;about:blank&quot;</code>).</li>
<li>Added strict XML parsing when using <code class="prettyprint">parsingMode: &quot;xml&quot;</code>. Creating documents will now fail, just like in a browser, when ill-formed XHTML markup is used.</li>
<li>Added some rudimentary application of XML <code class="prettyprint">&lt;!ENTITY</code> declarations.</li>
<li>Added <code class="prettyprint">window.frameElement</code>, although without appropriate cross-origin security checks.</li>
<li>Added the <code class="prettyprint">jsdom.evalVMScript</code> public API.</li>
<li>Added more custom request agent support: you can now pass <code class="prettyprint">agent</code> and <code class="prettyprint">agentClass</code> in addition to <code class="prettyprint">agentOptions</code>. (frarees)</li>
<li>Updated our elements-being-disabled semantics to more closely match the spec, in particular with regard to being descendants of <code class="prettyprint">&lt;fieldset disabled&gt;</code>.</li>
<li>Updated <code class="prettyprint">FormData</code> for <a href="https://github.com/whatwg/xhr/commit/1a75845e67792418a7721d516266ad01a90f2062">recent spec fixes</a>: blobs, files, and filenames should now all work like you&rsquo;d expect.</li>
<li>Updated the <code class="prettyprint">FormData</code> constructor to use the proper, rather-complex, <a href="https://html.spec.whatwg.org/multipage/forms.html#constructing-form-data-set">constructing the form data set</a> algorithm.</li>
<li>Fixed all constructors that appears as globals on the jsdom <code class="prettyprint">window</code> object to be non-enumerable.</li>
<li>Fixed <code class="prettyprint">&lt;script&gt;</code> elements to load when they gain a <code class="prettyprint">src</code> attribute while in a document.</li>
<li>Fixed <code class="prettyprint">&lt;link rel=&quot;stylesheet&quot;&gt;</code> elements to load when their <code class="prettyprint">href</code> attributes change while in a document.</li>
<li>Fixed the loading of external <code class="prettyprint">&lt;img&gt;</code>s (when the <code class="prettyprint">canvas</code> npm package is installed) that were specified via relative URL; this regressed in 9.2.1.</li>
<li>Fixed <code class="prettyprint">&lt;iframe&gt;</code> documents to have the correct <code class="prettyprint">referrer</code> value (viz. the URL of their parent).</li>
<li>Fixed the value of <code class="prettyprint">input.checked</code> inside <code class="prettyprint">click</code> events on checkboxes.</li>
<li>Fixed the window object&rsquo;s named properties to correctly return the <code class="prettyprint">&lt;iframe&gt;</code> element or the <code class="prettyprint">&lt;iframe&gt;</code>&rsquo;s window in appropriate scenarios involving <code class="prettyprint">name</code> vs. <code class="prettyprint">id</code> attributes on the <code class="prettyprint">&lt;iframe&gt;</code>. (matthewp)</li>
</ul>

<h2 id="9-3-0">9.3.0</h2>

<ul>
<li>Added the <code class="prettyprint">Audio</code> named constructor.</li>
<li>Fixed the <code class="prettyprint">Image</code> named constructor to follow the spec more closely (e.g. <code class="prettyprint">Image.prototype</code> is now equal to <code class="prettyprint">HTMLImageElement.prototype</code>).</li>
<li>Fixed the <code class="prettyprint">tabIndex</code> setter, which regressed in 9.1.0, to no longer cause errors.</li>
<li>Made submit buttons and labels respond to click event cancelation correctly, preventing form submission and re-dispatching to the relevant form control. (marcandre)</li>
<li>Fixed unhandled errors thrown in XHR event handlers being swallowed; they now properly are redirected to the virtual console.</li>
</ul>

<h2 id="9-2-1">9.2.1</h2>

<ul>
<li>Fixed <code class="prettyprint">&lt;input&gt;</code>&rsquo;s <code class="prettyprint">selectionStart</code>, <code class="prettyprint">selectionEnd</code>, and <code class="prettyprint">selectionDirection</code> getters to return null, instead of throwing, for elements that do not allow selection, per <a href="https://github.com/whatwg/html/pull/1006">a recent spec change</a>.</li>
<li>Fixed <code class="prettyprint">&lt;base&gt;</code>&rsquo;s <code class="prettyprint">href</code> getter logic to return the attribute value instead of the empty string for unparseable URLs, per <a href="https://github.com/whatwg/html/pull/1064">a recent spec change</a>.</li>
<li>Fixed the referrer sent when retrieving external resources to be the document&rsquo;s URL, not the document&rsquo;s base URL.</li>
<li>Fixed suppression of all <code class="prettyprint">error</code> events on <code class="prettyprint">window</code> beyond the first one.</li>
<li>Fixed <code class="prettyprint">new URL</code> to correctly throw for unparseable URLs, and all of <code class="prettyprint">URL</code>&rsquo;s setters to correctly ignore invalid input instead of throwing.</li>
<li>Fixed <code class="prettyprint">StyleSheetList.prototype.item</code> to return <code class="prettyprint">null</code> instead of <code class="prettyprint">undefined</code> for out-of-bounds indices. (Ginden)</li>
<li>Updated <code class="prettyprint">cssstyle</code> minimum version to ensure all jsdom installs (not just fresh ones) get the benefit of <code class="prettyprint">cssstyle</code>&rsquo;s recently-better <code class="prettyprint">background</code> and <code class="prettyprint">width</code> setters.</li>
</ul>

<h2 id="9-2-0">9.2.0</h2>

<ul>
<li>Added <code class="prettyprint">jsdom.changeURL(window, newURL)</code> for allowing you to override a window&rsquo;s existing URL. (mummybot)</li>
<li>Fixed the <code class="prettyprint">proxy</code> option to be applied to all requests; previously it was not always passed through. (nicolashenry)</li>
<li>Fixed <code class="prettyprint">XMLHttpRequest</code> response header filtering for cross-origin requests; this also fixes <code class="prettyprint">ProgressEvent</code>s fired from such XHRs. (nicolashenry)</li>
</ul>

<h2 id="9-1-0">9.1.0</h2>

<ul>
<li>Added a somewhat-reasonable implementation of focus and focus events. Although the full complexity of focus is not implemented, the following improvements have been made:

<ul>
<li>Only elements which are focusable can be focused.</li>
<li>Added the <code class="prettyprint">FocusEvent</code> class, and now <code class="prettyprint">focus</code> and <code class="prettyprint">blur</code> events are fired appropriately.</li>
<li><code class="prettyprint">tabIndex</code> now returns <code class="prettyprint">0</code> by default for focusable elements.</li>
</ul></li>
<li>Reimplemented <code class="prettyprint">navigator</code> to be to-spec:

<ul>
<li>Added <code class="prettyprint">appCodeName</code>, <code class="prettyprint">product</code>, <code class="prettyprint">productSub</code>, <code class="prettyprint">vendor</code>, and <code class="prettyprint">vendorSub</code>; also changes <code class="prettyprint">userAgent</code>, <code class="prettyprint">appName</code>, <code class="prettyprint">platform</code>, and <code class="prettyprint">version</code> to be more browser-like instead of based on various Node.js information.</li>
<li>Added <code class="prettyprint">language</code> and <code class="prettyprint">languages</code>.</li>
<li>Added <code class="prettyprint">onLine</code>.</li>
<li>Added <code class="prettyprint">javaEnabled()</code>.</li>
<li>Removed <code class="prettyprint">noUI</code>.</li>
</ul></li>
<li>Fixed <code class="prettyprint">formEl.action</code> to return a value resolved relative to the document URL, or to return the document URL if the corresponding attribute is missing or empty.</li>
<li>Sped up XPath execution. (vsemozhetbyt)</li>
<li>Fixed <code class="prettyprint">window.close()</code> not correctly clearing event listeners on the document. (Ojek)</li>
<li>Fixed a regression introduced in 9.0.0 where invalid CSS would cause a crash while attempting to parse it. Instead, a <code class="prettyprint">&quot;jsdomError&quot;</code> will now be emitted to the virtual console.</li>
</ul>

<h2 id="9-0-0">9.0.0</h2>

<p>This major release removes jsdom&rsquo;s support for mutation events. Mutation events were never well-specified, and the modern DOM Standard omits them in the hopes that they can be removed from browsers (although this has not yet happened in major browser engines). We had hoped to implement their modern alternative, mutation observers, before performing this removal, to give jsdom users the same capabilities.</p>

<p>However, recent performance investigations revealed that mutation events were the major bottleneck in most jsdom operations; tools like <a href="https://github.com/bterlson/ecmarkup">ecmarkup</a> which make heavy use of jsdom had their running time halved by removing mutation events, which add serious overhead to every DOM mutation. As such, we are doing a major release with them removed, so that jsdom users can benefit from this massive performance gain.</p>

<p>Mutation observer support is <a href="https://github.com/tmpvar/jsdom/issues/639">in progress</a>; please use the GitHub reactions feature to vote on that issue if you are impacted by this removal and are hoping for mutation observer support to replace it.</p>

<p>Your normal change log follows:</p>

<ul>
<li><strong>Removed mutation events</strong>, as discussed above.</li>
<li>Added the <code class="prettyprint">DOMTokenList.prototype.replace</code> method. (nicolashenry)</li>
<li>Updated <code class="prettyprint">DOMTokenList.prototype.contains</code> to no longer validate its arguments, as per the latest spec. (nicolashenry)</li>
<li>Made various improvements to XMLHttpRequest (nicolashenry):

<ul>
<li>Added the <code class="prettyprint">responseURL</code> property.</li>
<li>Updated methods, headers, and header values to use the <code class="prettyprint">ByteString</code> algorithm.</li>
<li>Fixed the default <code class="prettyprint">statusText</code> to be <code class="prettyprint">&quot;&quot;</code> instead of <code class="prettyprint">&quot;OK&quot;</code>.</li>
</ul></li>
<li>Fixed the <code class="prettyprint">Blob</code> constructor&rsquo;s <code class="prettyprint">type</code> validation. (nicolashenry)</li>
</ul>

<h2 id="8-5-0">8.5.0</h2>

<ul>
<li>Added encoding handling (nicolashenry)

<ul>
<li><code class="prettyprint">jsdom.env</code>, when given a URL or file, will decode the resulting bytes using signals like the <code class="prettyprint">Content-Type</code> header, <code class="prettyprint">&lt;meta charset&gt;</code> declaration, or presence of a BOM, in the same manner as web browsers.</li>
<li>Fetching external resources, via mechanisms such as XMLHttpRequest or <code class="prettyprint">&lt;script&gt;</code>/<code class="prettyprint">&lt;link&gt;</code>/<code class="prettyprint">&lt;iframe&gt;</code> tags, will also account for such signals.</li>
<li><code class="prettyprint">jsdom.jsdom()</code>, which takes a string, still sets a &ldquo;UTF-8&rdquo; encoding by default, since there are no bytes or headers for it to sniff an encoding from.</li>
</ul></li>
<li>Removed <code class="prettyprint">iframe.sandbox</code> property, since it was not implemented and simply crashed when used.</li>
<li>Removed <code class="prettyprint">element.sourceIndex</code> property, since it was nonstandard (Internet Explorer only).</li>
<li>Fixed setting proxied inline event handlers, such as <code class="prettyprint">doc.body</code>&rsquo;s <code class="prettyprint">onload=&quot;&quot;</code> attribute, for documents that do not have a browsing context.</li>
</ul>

<h2 id="8-4-1">8.4.1</h2>

<ul>
<li>Fixed an issue where setting <code class="prettyprint">selected</code> on an multi-select would clear all other selectedness.</li>
</ul>

<h2 id="8-4-0">8.4.0</h2>

<ul>
<li>Added an implementation of the <code class="prettyprint">TreeWalker</code> class (and <code class="prettyprint">document.createTreeWalker</code>). (garycourt)</li>
<li>Fixed a few minor bugs in URL parsing and the <code class="prettyprint">URL</code> API, by upgrading to <code class="prettyprint">whatwg-url</code> 2.0.1.</li>
<li>Fixed a few issues with generated files in the published package, which seem to have impacted webpack users.</li>
</ul>

<h2 id="8-3-1">8.3.1</h2>

<ul>
<li>Fixed an issue where if you modified <code class="prettyprint">Object.prototype</code>, spurious attributes would show up on your jsdom nodes. (deckar01)</li>
</ul>

<h2 id="8-3-0">8.3.0</h2>

<ul>
<li>Added image loading and decoding, when the <code class="prettyprint">canvas</code> npm package is installed (lehni). In practice, this means that if you enable fetching <code class="prettyprint">&quot;img&quot;</code> external resources, then:

<ul>
<li><code class="prettyprint">img.naturalWidth</code>, <code class="prettyprint">img.naturalHeight</code>, <code class="prettyprint">img.width</code>, <code class="prettyprint">img.height</code>, <code class="prettyprint">img.complete</code>, and <code class="prettyprint">img.currentSrc</code> will update themselves correctly as the image loads</li>
<li><code class="prettyprint">load</code> and <code class="prettyprint">error</code> events will fire on the <code class="prettyprint">&lt;img&gt;</code> element, according to how well image decoding goes.</li>
<li>You can draw images onto canvases, using the newly-enabled <code class="prettyprint">canvasContext.drawImage</code> API.</li>
</ul></li>
<li>Added <code class="prettyprint">canvasContext.createPattern</code> and <code class="prettyprint">canvasContext.toBlob</code>, when the <code class="prettyprint">canvas</code> npm package is installed. (lehni)</li>
<li>Added a basic implementation of the <a href="https://w3c.github.io/page-visibility/">Page Visibility API</a>, in particular a <code class="prettyprint">document.hidden</code> property that always returns <code class="prettyprint">true</code>, and a <code class="prettyprint">document.visibilityState</code> property that always returns <code class="prettyprint">&quot;prerender&quot;</code>. This is a more standard alternative to our proprietary <code class="prettyprint">navigator.noUI</code>, which will be removed whenever we release 9.0.0. (kapouer)</li>
</ul>

<h2 id="8-2-0">8.2.0</h2>

<ul>
<li>Added correct click behavior for inputs (jeffcarp):

<ul>
<li><code class="prettyprint">change</code> and <code class="prettyprint">input</code> events now fire appropriately</li>
<li>The &ldquo;click in progress&rdquo; flag is implemented, so you cannot click while a click is in progress</li>
<li>Canceling a click event appropriately resets radio buttons and checkboxes</li>
</ul></li>
<li>Updated our XMLHttpRequest implementation with a variety of fixes and features, including preliminary CORS support. (nicolashenry)</li>
<li>Added a <code class="prettyprint">strictSSL</code> top-level option to govern all requests jsdom makes. (nicolashenry)</li>
<li>XHTML frames and iframes are now parsed as XML instead of HTML. (nicolashenry)</li>
<li>Added <code class="prettyprint">document.origin</code> and <code class="prettyprint">document.lastModified</code>. (nicolashenry)</li>
<li>Fixed the <code class="prettyprint">scriptEl.text</code> getter and setter to follow the spec.</li>
<li>Fixed script execution to check against the canonical list of JavaScript MIME types and only execute those scripts as JavaScript.</li>
</ul>

<h2 id="8-1-1">8.1.1</h2>

<ul>
<li>Fixed input selection methods and properties to properly differentiate between inputs that can be selected outright vs. textual inputs which allow variable-length selection. (yaycmyk)</li>
</ul>

<h2 id="8-1-0">8.1.0</h2>

<ul>
<li>Added <code class="prettyprint">attr.nodeName</code>, which was <a href="https://github.com/whatwg/dom/issues/171">recently re-added to the spec</a>.</li>
<li>Added click-proxying behavior from <code class="prettyprint">&lt;label&gt;</code>s to their labeled form elements. (yaycmyk)</li>
<li>Added a setter for <code class="prettyprint">element.classList</code> per recent spec changes (it forwards to <code class="prettyprint">element.classList.value</code>).</li>
<li>Updated our attributes implementation in a few ways for recent spec changes and to fix discovered bugs:

<ul>
<li>Added <code class="prettyprint">element.getAttributeNames()</code>. (<a href="https://github.com/whatwg/dom/issues/115">spec addition</a>)</li>
<li><code class="prettyprint">setAttributeNode</code> and <code class="prettyprint">setAttributeNodeNS</code> can now replace an attribute node, instead of removing the old one and adding a new one; this avoids changing the order in the attribute list. (<a href="https://github.com/whatwg/dom/issues/116">spec change</a>)</li>
<li><code class="prettyprint">NamedNodeMap</code> named properties are now lowercase (except in edge cases involving XML documents or non-HTML elements). (<a href="https://github.com/whatwg/dom/issues/141">spec change</a>)</li>
<li><code class="prettyprint">NamedNodeMap</code> named properties are now non-enumerable.</li>
<li>The <code class="prettyprint">&quot;DOMAttrModified&quot;</code> mutation event&rsquo;s <code class="prettyprint">relatedNode</code> is now the new <code class="prettyprint">Attr</code> object, not the <code class="prettyprint">Node</code>, as per spec.</li>
</ul></li>
<li>Updated <code class="prettyprint">DOMTokenList</code> to have a <code class="prettyprint">value</code> property per <a href="https://github.com/whatwg/dom/issues/119">recent spec changes</a>; its <code class="prettyprint">toString</code> serialization also changed slightly.</li>
<li>Updated <code class="prettyprint">tc.headers</code> to be a <code class="prettyprint">DOMTokenList</code> that simply reflects the <code class="prettyprint">headers</code> attribute; previously it was a string, with its computation doing some weird stuff.</li>
<li>Fixed <code class="prettyprint">document.implementation.createDocument()</code> to create a document with its parsing mode set to XML, which affects a variety of DOM APIs in small ways.</li>
<li>Fixed <code class="prettyprint">EventTarget.prototype.constructor</code> to be correct; it was previously <code class="prettyprint">Window</code>.</li>
<li>Fixed <code class="prettyprint">option.index</code> for <code class="prettyprint">&lt;option&gt;</code>s not inside a <code class="prettyprint">&lt;select&gt;</code> to no longer error.</li>
<li>Fixed <code class="prettyprint">tc.cellIndex</code> for <code class="prettyprint">&lt;td&gt;</code>s and <code class="prettyprint">&lt;th&gt;</code>s not inside a <code class="prettyprint">&lt;tr&gt;</code> to no longer error.</li>
<li>Fixed <code class="prettyprint">tr.sectionRowIndex</code> for <code class="prettyprint">&lt;tr&gt;</code>s not inside a <code class="prettyprint">&lt;table&gt;</code>, <code class="prettyprint">&lt;tbody&gt;</code>, <code class="prettyprint">&lt;thead&gt;</code>, or <code class="prettyprint">&lt;tfoot&gt;</code> to no longer error.</li>
<li>Removed the <code class="prettyprint">&quot;keyevents&quot;</code> alias for <code class="prettyprint">&quot;keyboardevent&quot;</code> when using <code class="prettyprint">document.createEvent</code>, <a href="https://github.com/whatwg/dom/issues/148">per recent spec changes</a>.</li>
</ul>

<h2 id="8-0-4">8.0.4</h2>

<ul>
<li>Fixed the <code class="prettyprint">this</code> value when you pass a <code class="prettyprint">{ handleEvent() { ... } }</code> object to <code class="prettyprint">addEventListener</code>. (thetalecrafter)</li>
</ul>

<h2 id="8-0-3">8.0.3</h2>

<ul>
<li>Fixed <code class="prettyprint">HTMLOptionElement.prototype.label</code>; a typo was causing it to not work at all. (karlhorky)</li>
<li>Updated <code class="prettyprint">cssstyle</code> minimum version to ensure all jsdom installs (not just fresh ones) get the benefit of <code class="prettyprint">cssstyle</code>&rsquo;s recently-better <code class="prettyprint">padding</code> and <code class="prettyprint">margin</code> parsing/CSSOM.</li>
</ul>

<h2 id="8-0-2">8.0.2</h2>

<ul>
<li>Fixed an issue where custom user agents would not propagate to <code class="prettyprint">navigator.userAgent</code> in frames and iframes.</li>
<li>Improved our <code class="prettyprint">document.activeElement</code> implementation to be a bit smarter; we still don&rsquo;t have full focus/blur/active element semantics, but at least now it falls back to the <code class="prettyprint">&lt;body&gt;</code> element when the active element is removed from the document or when no element has been focused yet.</li>
</ul>

<h2 id="8-0-1">8.0.1</h2>

<ul>
<li>Fixed an issue where the <code class="prettyprint">this</code> inside event handler callbacks was not equal to the event&rsquo;s current target. (Surprisingly there were no tests for this!)</li>
</ul>

<h2 id="8-0-0">8.0.0</h2>

<p>This major release includes a large rewrite of most of the DOM and HTML classes exposed in jsdom. A lot of their behavior is generated from their specs&rsquo; IDL syntax, taking care of many type conversions, attribute/property reflections, and much more. Many properties that were previously not present are now available, and almost everything behaves in a more spec-compliant way. Additionally, for these classes all of their implementation details are no longer available as underscore-prefixed properties, but instead are hidden behind a single symbol.</p>

<p>Although normally jsdom does not mark a new major release for changes that simply update us to the latest specs or hide internal implementation details better, the magnitude of the changes is so extensive that we want to bump the major version in order to ensure that consumers perform adequate testing before upgrading. But, you should definitely upgrade! The new stuff is really awesome!</p>

<ul>
<li>Reimplemented <code class="prettyprint">Location</code>, <code class="prettyprint">History</code>, and <code class="prettyprint">HTMLHyperlinkElementUtils</code> (used by both <code class="prettyprint">HTMLAnchorElement</code> and <code class="prettyprint">HTMLAreaElement</code>) according to the latest specs, and using the latest <a href="https://github.com/jsdom/whatwg-url">whatwg-url</a> package. This greatly improves our correctness on URL resolution and navigation (to the extent we support navigation, i.e. <code class="prettyprint">pushState</code> and changing the hash). It should also improve parsing speed as we no longer parse and resolve URLs during parsing.</li>
<li>Added <code class="prettyprint">Element.prototype.insertAdjacentHTML</code>. (kasperisager)</li>
<li>Added <code class="prettyprint">Node.prototype.adoptNode</code>, and adopt nodes during insertion instead of throwing <code class="prettyprint">&quot;WrongDocumentError&quot;</code>s. (dmethvin)</li>
<li>Added a stub <code class="prettyprint">Element.prototype.getClientRects</code> to match our stub <code class="prettyprint">getBoundingClientRect</code>.</li>
<li>Fixed <code class="prettyprint">setTimeout</code> and <code class="prettyprint">setInterval</code> to return numeric IDs, instead of objects. (alvarorahul)</li>
<li>Fixed <code class="prettyprint">setTimeout</code> and <code class="prettyprint">setInterval</code> to accept string arguments to eval, and to pass along extra arguments after the first two.</li>
<li>Fixed certain style shorthand properties not updating their component properties or parsing correctly. (dpvc)</li>
<li>Fixed <code class="prettyprint">Event</code> object creation to always initialize the event objects, unless using <code class="prettyprint">document.createEvent</code>, even for events with name <code class="prettyprint">&quot;&quot;</code>.</li>
<li>Fixed iframes to go through the custom resource loader. (chrmarti)</li>
<li>Removed <a href="http://www.w3.org/TR/2003/CR-DOM-Level-3-LS-20031107/load-save.html">&ldquo;DOM Load and Save&rdquo;</a> stub implementation. That spec was never implemented in browsers, and jsdom only contained stubs.</li>
<li>Removed other minor unimplemented, stub, or no-longer-standard APIs from &ldquo;DOM Level 3&rdquo;, like the user-data API, <code class="prettyprint">DOMException</code>, <code class="prettyprint">DOMConfiguration</code>, and <code class="prettyprint">DOMStringList</code>.</li>
</ul>

<h2 id="7-2-2">7.2.2</h2>

<ul>
<li>Fixed <code class="prettyprint">canvasEl.toDataURL()</code>, with the <code class="prettyprint">canvas</code> npm package installed; a recent update to the <code class="prettyprint">canvas</code> package broke how we were passing arguments to do.</li>
<li>Fixed <code class="prettyprint">data:</code> URL parsing to allow empty contents, e.g. <code class="prettyprint">data:text/css;base64,</code>. (sebmck)</li>
</ul>

<h2 id="7-2-1">7.2.1</h2>

<ul>
<li>Fixed a regression in XML parsing of attributes with a namespace URL but no prefix (e.g. <code class="prettyprint">&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;</code>).</li>
</ul>

<h2 id="7-2-0">7.2.0</h2>

<ul>
<li>Added support for text selection APIs on <code class="prettyprint">&lt;input&gt;</code> and <code class="prettyprint">&lt;textarea&gt;</code>! (sjelin and yaycmyk)</li>
<li>Replaced our default XML parser with <a href="https://www.npmjs.com/package/sax">sax</a>, thus fixing many (but not all) issues with XML and XHTML parsing. To get a flavor of the issues fixed, check out these now-closed bugs: <a href="https://github.com/tmpvar/jsdom/issues/393">#393</a>, <a href="https://github.com/tmpvar/jsdom/issues/651">#651</a>, <a href="https://github.com/tmpvar/jsdom/issues/415">#415</a>, <a href="https://github.com/tmpvar/jsdom/issues/1276">#1276</a>.</li>
<li>Fixed the <code class="prettyprint">&lt;canvas&gt;</code> tag to reset its contents when its width or height changed, including the change from the default 300 × 150 canvas. (Applies only when using the <code class="prettyprint">canvas</code> npm package.)</li>
<li>Fixed an issue where <code class="prettyprint">HTMLCollection</code>s would get confused when they contained elements with numeric <code class="prettyprint">id</code>s or <code class="prettyprint">name</code>s.</li>
<li>Fixed an issue with doctype parsing confusing the system ID and public ID.</li>
<li>Made the task posted by <code class="prettyprint">postMessage</code> use the inside-jsdom timer queue, instead of the Node.js one. This allows easier mocking. (cpojer)</li>
</ul>

<h2 id="7-1-1">7.1.1</h2>

<ul>
<li>When <code class="prettyprint">&lt;iframe&gt;</code>s have unresolvable URLs, jsdom will no longer crash, but will instead just load <code class="prettyprint">about:blank</code> into them. (This is the spec behavior.)</li>
<li>Fixed <code class="prettyprint">document.writeln</code> to correctly handle multiple arguments; previously it ignored all after the first.</li>
<li>Fixed <code class="prettyprint">FileList</code> objects to no longer have a property named <code class="prettyprint">&quot;undefined&quot;</code>. (jfremy)</li>
</ul>

<h2 id="7-1-0">7.1.0</h2>

<p>This is a rather large release bringing with it several important re-implementations of DOM and HTML APIs.</p>

<ul>
<li>Our <code class="prettyprint">EventTarget</code> implementation has been rewritten from scratch to follow the spec exactly. This should improve any edge case misbehaviors.</li>
<li>Our <code class="prettyprint">Event</code> class hierarchy has been rewritten and fleshed out, fixing many gaps in functionality.

<ul>
<li>Previously missing classes <code class="prettyprint">KeyboardEvent</code> and <code class="prettyprint">TouchEvent</code> are now implemented.</li>
<li>Almost all supported <code class="prettyprint">Event</code> subclasses now have constructors. (<code class="prettyprint">TouchEvent</code> does not yet, and <code class="prettyprint">MutationEvent</code> is specified to not have one.)</li>
<li>All classes now have correct public APIs, e.g. getters instead of data properties, missing properties added, and constructors that correctly allow setting all the supported properties.</li>
<li><code class="prettyprint">document.createEvent(&quot;customevent&quot;, ...)</code> now correctly creates a <code class="prettyprint">CustomEvent</code> instead of an <code class="prettyprint">Event</code>, and <code class="prettyprint">CustomEvent.prototype.initProgressEvent</code> has been replaced with <code class="prettyprint">CustomEvent.prototype.initCustomEvent</code>.</li>
</ul></li>
<li>The <code class="prettyprint">Attr</code> class and related attribute-manipulating methods has been rewritten to follow the latest specification. In particular, <code class="prettyprint">Attr</code> is no longer a subclass of <code class="prettyprint">Node</code>, and no longer has child text nodes.</li>
<li>The <code class="prettyprint">&lt;template&gt;</code> element implementation has been greatly improved, now passing most web platform tests. Its <code class="prettyprint">.content</code> property no longer has an extra intermediate document fragment; it no longer has child nodes; and related parts of the parser and serializer have been fixed, including <code class="prettyprint">innerHTML</code> and <code class="prettyprint">outerHTML</code>, to now work as specified.</li>
<li><code class="prettyprint">querySelector</code>, <code class="prettyprint">querySelectorAll</code>, and <code class="prettyprint">matches</code> now correctly throw <code class="prettyprint">&quot;SyntaxError&quot;</code> <code class="prettyprint">DOMException</code>s for invalid selectors, instead of just <code class="prettyprint">Error</code> instances.</li>
<li><code class="prettyprint">Node.prototype</code>&rsquo;s <code class="prettyprint">insertBefore</code>, <code class="prettyprint">replaceChild</code>, and <code class="prettyprint">appendChild</code> methods now check their arguments more correctly.</li>
<li>The browser builds now have regained the ability to fetch URLs for content and the like; this had been broken due to an issue with the browser-request package, which is no longer necessary anyway.</li>
</ul>

<h2 id="7-0-2">7.0.2</h2>

<ul>
<li>Fixed an issue where inside jsdom <code class="prettyprint">&lt;script&gt;</code> code, <code class="prettyprint">/regexpliteral/ instanceof RegExp</code> would be <code class="prettyprint">false</code>.</li>
</ul>

<h2 id="7-0-1">7.0.1</h2>

<ul>
<li>Fixed two bugs with <code class="prettyprint">Node.prototype.isEqualNode</code>:

<ul>
<li>It would previously always return <code class="prettyprint">true</code> for comparing any two doctypes.</li>
<li>It would throw an error when trying to compare two elements that had attributes.</li>
</ul></li>
<li>Enforced that <code class="prettyprint">document.implementation.createDocumentType</code> requires all three of its arguments.</li>
</ul>

<h2 id="7-0-0">7.0.0</h2>

<p>This major release has as its headlining feature a completely re-written <code class="prettyprint">XMLHttpRequest</code> implementation, in a heroic effort by <a href="https://github.com/nicolashenry">@nicolashenry</a>. It includes a number of other smaller improvements and fixes. The breaking changes are highlighted in bold below.</p>

<ul>
<li><strong>Node.js 4.0 onward is now required</strong>, as we have begun using ES2015 features only present there.</li>
<li>Completely re-implemented <code class="prettyprint">XMLHttpRequest</code> and related classes (nicolashenry):

<ul>
<li>Includes support for <code class="prettyprint">Blob</code>, <code class="prettyprint">File</code>, <code class="prettyprint">FileList</code>, <code class="prettyprint">FileReader</code>, <code class="prettyprint">FormData</code>, <code class="prettyprint">ProgressEvent</code>, and the supporting <code class="prettyprint">XMLHttpRequestUpload</code>, and <code class="prettyprint">XMLHttpRequestEventTarget</code> interfaces.</li>
<li>Includes support for synchronous XHRs.</li>
<li>Adds some new request-management abilities, documented in the readme. In short, the <code class="prettyprint">pool</code>, <code class="prettyprint">agentOptions</code>, and <code class="prettyprint">userAgent</code> options are new, and resource loads can now be aborted.</li>
<li>These implementations are extremely complete and standards-compliant, passing 136 newly-introduced web platform tests.</li>
</ul></li>
<li>Added <code class="prettyprint">document.charset</code>, an alias for <code class="prettyprint">document.characterSet</code>.</li>
<li>Added <code class="prettyprint">HTMLTemplateElement.prototype.content</code>, for getting the contents of a <code class="prettyprint">&lt;template&gt;</code> element as a document fragment. (rickychien)</li>
<li>Implemented &ldquo;loose&rdquo; cookie parsing, giving correct execution of code like <code class="prettyprint">document.cookie = &quot;foo&quot;</code>.</li>
<li>Several fixes related to event dispatching and creation, including the addition of <code class="prettyprint">Event.prototype.stopImmediatePropagation</code> and the constants <code class="prettyprint">NONE</code>, <code class="prettyprint">CAPTURING_PHASE</code>, <code class="prettyprint">AT_TARGET</code>, and <code class="prettyprint">BUBBLING_PHASE</code>. This accounted for another 15 newly-passing web platform tests. (nicolashenry)</li>
<li>Fixed <code class="prettyprint">document.styleSheets</code> to correctly track the removal of stylesheets from the document. (AVGP)</li>
<li>Fixed the <code class="prettyprint">created</code> jsdom lifecycle callback receiving a different <code class="prettyprint">window</code> object than the <code class="prettyprint">loaded</code> or <code class="prettyprint">done</code> callbacks when scripting was enabled.</li>
<li><strong>Invalid URLs are no longer allowed when creating a jsdom document</strong>; the URL must be parseable, or an error will be thrown.</li>
<li><strong>The <code class="prettyprint">{ omitJsdomErrors }</code> option of the virtual console has moved</strong>; it is no longer provided when creating the virtual console, but instead when calling <code class="prettyprint">sendTo</code>.</li>
</ul>

<h2 id="6-5-1">6.5.1</h2>

<ul>
<li>Fixed an issue where with <code class="prettyprint">jsdom.jsdom</code>, you had to pass <code class="prettyprint">referrer</code> and <code class="prettyprint">cookie</code> options as top-level, whereas with <code class="prettyprint">jsdom.env</code>, you had to nest them under a <code class="prettyprint">document</code> option. This was unnecessarily confusing. Now both possibilities are allowed for both functions. (The readme only documents the top-level version, though.)</li>
</ul>

<h2 id="6-5-0">6.5.0</h2>

<ul>
<li>Added <code class="prettyprint">NodeList.prototype[Symbol.iterator]</code>, so you can now use <code class="prettyprint">for</code>-<code class="prettyprint">of</code> loops with <code class="prettyprint">NodeList</code>s.</li>
</ul>

<h2 id="6-4-0">6.4.0</h2>

<ul>
<li>Added <code class="prettyprint">jsdom.nodeLocation(node)</code> to get the location within the source text of a given node.</li>
<li>Added <code class="prettyprint">jsdom.reconfigureWindow(window, { top })</code> to allow changing the value of a window&rsquo;s <code class="prettyprint">top</code> property.</li>
<li>Added the <code class="prettyprint">element</code> argument to the custom resource loader, so you can customize resource loads depending on which element loaded them.</li>
<li>Updated <code class="prettyprint">getElementsByClassName</code> to match the spec. It now correctly splits on whitespace to try to find elements with all the given classes; it returns a <code class="prettyprint">HTMLCollection</code> instead of a <code class="prettyprint">NodeList</code>; and it memoizes the result.</li>
<li>Updated <code class="prettyprint">NodeList</code> and <code class="prettyprint">HTMLCollection</code> to match the spec. The most noticable change is that <code class="prettyprint">HTMLCollection</code> no longer inherits from <code class="prettyprint">NodeList</code>.</li>
</ul>

<h2 id="6-3-0">6.3.0</h2>

<ul>
<li>Added a fully spec-compliant implementation of <code class="prettyprint">window.atob</code> and <code class="prettyprint">window.btoa</code>. (jeffcarp)</li>
<li>Fixed many issues with our <code class="prettyprint">&lt;canvas&gt;</code> implementation:

<ul>
<li>With the <code class="prettyprint">canvas</code> npm package installed, <code class="prettyprint">&lt;canvas&gt;</code> elements are now properly <code class="prettyprint">instanceof HTMLCanvasElement</code> and <code class="prettyprint">instanceof HTMLElement</code>.</li>
<li><code class="prettyprint">&lt;canvas&gt;</code> elements now present the same uniform spec-compliant API both with and without the <code class="prettyprint">canvas</code> npm package installed. If the package is not installed, some of the methods will cause not-implemented <code class="prettyprint">&quot;jsdomError&quot;</code> events to be emitted on the virtual console.</li>
<li>The <code class="prettyprint">width</code> and <code class="prettyprint">height</code> properties now correctly reflect the <code class="prettyprint">width</code> and <code class="prettyprint">height</code> attributes, and have the appropriate default values of <code class="prettyprint">300</code> and <code class="prettyprint">150</code>.</li>
<li>With the <code class="prettyprint">canvas</code> npm package installed, <code class="prettyprint">&lt;canvas&gt;</code> elements now generally play better with other parts of jsdom, e.g., <code class="prettyprint">document.getElementById</code> actually works with them.</li>
</ul></li>
<li>Introduced and upated many of our element classes, so that at least every tag name/element class pair is now correct, even if some of the classes are stubs. In particular:

<ul>
<li>Complete implementations were added for <code class="prettyprint">HTMLDataElement</code>, <code class="prettyprint">HTMLSpanElement</code>, and <code class="prettyprint">HTMLTimeElement</code>.</li>
<li>Stubs were added for <code class="prettyprint">HTMLDataListElement</code>, <code class="prettyprint">HTMLDialogElement</code>, <code class="prettyprint">HTMLEmbedElement</code>, <code class="prettyprint">HTMLMeterElement</code>, <code class="prettyprint">HTMLOutputElement</code>, <code class="prettyprint">HTMLProgressElement</code>, <code class="prettyprint">HTMLSourceElement</code>, <code class="prettyprint">HTMLTemplateElement</code>, and <code class="prettyprint">HTMLTrackElement</code>.</li>
<li><code class="prettyprint">HTMLAudioElement</code> was implemented in full, although its <code class="prettyprint">HTMLMediaElement</code> base, where most of its functionality is, is still largely a stub.</li>
<li><code class="prettyprint">HTMLTableSectionElement</code>, <code class="prettyprint">HTMLTableRowElement</code>, <code class="prettyprint">HTMLTableCellElement</code>, <code class="prettyprint">HTMLTableDataCellElement</code>, and <code class="prettyprint">HTMLTableHeaderCellElement</code> were updated to the latest spec.</li>
<li><code class="prettyprint">HTMLIsIndexElement</code> was removed; it has never been produced by the parser since 1.0.0-pre.1, and so it has been just a vestigial global property.</li>
<li>Appropriate constants were added to <code class="prettyprint">HTMLMediaElement</code>.</li>
</ul></li>
<li>Updated everything having to do with base URLs to be per-spec:

<ul>
<li>Added <code class="prettyprint">Node.prototype.baseURI</code> property to get the node&rsquo;s owner document&rsquo;s base URL.</li>
<li><code class="prettyprint">HTMLBaseElement</code>&rsquo;s <code class="prettyprint">href</code> getter now contains appropriate fallbacks and always returns an absolute URL, per spec.</li>
<li>If there are no <code class="prettyprint">base</code> elements in an <code class="prettyprint">&quot;about:blank&quot;</code> iframe document, the base URL correctly falls back to the parent window&rsquo;s base URL.</li>
</ul></li>
<li>When you provide a <code class="prettyprint">url: ...</code> option to <code class="prettyprint">jsdom.jsom()</code> or <code class="prettyprint">jsdom.env()</code>, the given string is now attempted to be resolved as a URL before it is installed as <code class="prettyprint">document.URL</code>.

<ul>
<li>So for example, providing <code class="prettyprint">url: &quot;http://example.com&quot;</code> will mean <code class="prettyprint">document.URL</code> returns <code class="prettyprint">&quot;http://example.com/&quot;</code>, with a trailing slash.</li>
<li>In a future major release, we will start throwing if strings that cannot be parsed as valid absolute URL are provided for this option.</li>
</ul></li>
</ul>

<h2 id="6-2-0">6.2.0</h2>

<ul>
<li>Added a full-featured, spec-compliant <code class="prettyprint">Element.prototype.classList</code>, closing out a three-year old issue! (wacii)</li>
<li>Made <code class="prettyprint">virtualConsole.sendTo(console)</code> forward <code class="prettyprint">&quot;jsdomError&quot;</code>s to <code class="prettyprint">console</code> by calling <code class="prettyprint">console.error</code>. This can be turned off by doing <code class="prettyprint">virtualConsole.sendTo(console, { omitJsdomErrors: true })</code>.</li>
<li>Fixed errors when trying to parse invalid doctype declarations, like <code class="prettyprint">&lt;!DOCTYPE&gt;</code>.</li>
<li>Fixed spurious <code class="prettyprint">&quot;jsdomError&quot;</code>s that were emitted after calling <code class="prettyprint">window.close()</code>.</li>
<li>Fixed the <code class="prettyprint">&quot;DOMSubtreeModified&quot;</code> event to fire in more cases. Note that our mutation events implementation remains incomplete, and will eventually be removed (in a major release) once we implement mutation observers. (selam)</li>
</ul>

<h2 id="6-1-0">6.1.0</h2>

<ul>
<li>Added basic implementations of <code class="prettyprint">HTMLMediaElement</code> and <code class="prettyprint">HTMLVideoElement</code>, back-ported from Facebook&rsquo;s Jest project. (cpojer)</li>
</ul>

<h2 id="6-0-1">6.0.1</h2>

<ul>
<li>Fixed <code class="prettyprint">XMLHttpRequest.prototype.getAllResponseHeaders</code> to not crash when used with <code class="prettyprint">file:</code> URLs. (justinmchase)</li>
<li>Fixed <code class="prettyprint">XMLHttpRequest.prototype.response</code> to correctly return the response text even when <code class="prettyprint">responseType</code> was unset. (justinmchase)</li>
</ul>

<h2 id="6-0-0">6.0.0</h2>

<p>This major release is focused on massive improvements in speed, URL parsing, and error handling. The potential breaking changes are highlighted in bold below; the largest ones are around the <code class="prettyprint">jsdom.env</code> error-handling paradigm.</p>

<p>This release also welcomes <a href="https://github.com/tmpvar/jsdom/commits/master?author=Joris-van-der-Wel">long-time contributer</a> <a href="https://github.com/Joris-van-der-Wel/">@Joris-van-der-Wel</a> to the core team. You may recognize him from earlier changelogs. We&rsquo;re very happy to have his help in making jsdom awesome!</p>

<ul>
<li><strong>io.js 2.0 onward is now required</strong>, as we have begun using ES2015 features only present there.</li>
<li>Improved performance dramatically, by ~10000x in some cases, due to the following changes:

<ul>
<li>Overhauled the named properties tracker to not walk the entire tree, thus greatly speeding up the setting of <code class="prettyprint">id</code> and <code class="prettyprint">name</code> attributes (including during parsing).</li>
<li>Overhauled everything dealing with tree traversal to use a new library, <a href="https://github.com/jsdom/js-symbol-tree">symbol-tree</a>, to turn many operations that were previously O(n^2) or O(n) into O(n) or O(1).</li>
<li>Sped up <code class="prettyprint">node.compareDocumentPosition</code> and anything that used it (like <code class="prettyprint">node.contains</code>) by doing more intelligent tree traversal instead of directly implementing the specced algorithm.</li>
</ul></li>
<li>Overhauled how error handling works in jsdom:

<ul>
<li><code class="prettyprint">window.onerror</code> (or <code class="prettyprint">window.addEventListener(&quot;error&quot;, ...)</code>) now work, and will catch all script errors, similar to in browsers. This also introduces the <code class="prettyprint">ErrorEvent</code> class, incidentally.</li>
<li>The virtual console is now the destination for several types of errors from jsdom, using <a href="https://github.com/tmpvar/jsdom#virtual-console-jsdomerror-error-reporting">the new event <code class="prettyprint">&quot;jsdomError&quot;</code></a>. This includes: errors loading external resources; script execution errors unhandled by <code class="prettyprint">window.onerror</code>; and not-implemented warnings resulting from calling methods like <code class="prettyprint">window.alert</code> which jsdom explicitly does not support.</li>
<li>Since script errors are now handled by <code class="prettyprint">window.onerror</code> and the virtual console, they are no longer included in the initialization process. This results in two changes to <code class="prettyprint">jsdom.env</code> and the initialization lifecycle:</li>
<li><strong>The <code class="prettyprint">load(errors, window)</code> callback was changed to <code class="prettyprint">onload(window)</code></strong>, to reflect that it is now just sugar for setting a <code class="prettyprint">window.onload</code> handler.</li>
<li><strong>The <code class="prettyprint">done(errors, window)</code> callback (i.e., the default callback for <code class="prettyprint">jsdom.env</code>) has become <code class="prettyprint">done(error, window)</code></strong>, and like every other io.js callback now simply gives you a single error object, instead of an array of them.</li>
<li>Nodes no longer have a nonstandard <code class="prettyprint">errors</code> array, or a <code class="prettyprint">raise</code> method used to put things in that array.</li>
</ul></li>
<li>URL parsing and resolution was entirely overhauled to follow <a href="http://url.spec.whatwg.org/">the URL standard</a>!

<ul>
<li>This fixes several long-standing bugs and hacks in the jsdom URL parser, which already had a mess of gross patches on top of the built-in io.js parser to be more web-compatible.</li>
<li>The new <a href="https://url.spec.whatwg.org/#url"><code class="prettyprint">URL</code> class</a> has been added to <code class="prettyprint">window</code></li>
<li>The interfaces for <code class="prettyprint">HTMLAnchorElement.prototype</code> and <code class="prettyprint">document.location</code> (as well as <code class="prettyprint">URL</code>, of course) are now uniformized to follow the <a href="https://url.spec.whatwg.org/#api"><code class="prettyprint">URLUtils</code> API</a> (minus <code class="prettyprint">searchParams</code> for now).</li>
<li><strong>As part of this change, you may need to start passing in <code class="prettyprint">file:</code> URLs to <code class="prettyprint">jsdom.env</code> where previously you were able to get away with passing in filenames.</strong></li>
</ul></li>
<li>Added the <code class="prettyprint">XMLHttpRequest.prototype.response</code> getter.</li>
<li>Fixed <code class="prettyprint">StyleSheetList.prototype.item</code> to actually work. (chad3814)</li>
<li>Fixed the browser <code class="prettyprint">vm</code> shim to properly add the built-in global properties (<code class="prettyprint">Object</code>, <code class="prettyprint">Array</code>, etc.) to the sandbox. If you were running jsdom inside a web worker and most of your scripts were broken, this should fix that.</li>
<li>Fixed the <code class="prettyprint">&quot;hashchange&quot;</code> event to correctly fire <code class="prettyprint">HashChangeEvent</code> instances, with correct properties <code class="prettyprint">newURL</code> and <code class="prettyprint">oldURL</code> (instead of the incorrect <code class="prettyprint">newUrl</code> and <code class="prettyprint">oldUrl</code> used previously).</li>
<li>Removed usage of the setimmediate library, as it required <code class="prettyprint">eval</code> and thus did not work in CSP scenarios.</li>
</ul>

<p>Finally, if you&rsquo;re a loyal jsdom fan whose made it this far into the changelog, I&rsquo;d urge you to come join us in <a href="https://github.com/tmpvar/jsdom/issues/1139">#1139</a>, where we are brainstorming a modernized jsdom API that could get rid of many of the warts in the current one.</p>

<h2 id="5-6-1">5.6.1</h2>

<ul>
<li>Fixed an accidentally-created global <code class="prettyprint">attribute</code> variable if you ever called <code class="prettyprint">createAttributeNS</code>.</li>
<li>Dependency upgrades fixed a couple of bugs, although you would have gotten these anyway with a clean jsdom 5.6.0 install:

<ul>
<li>Parsing of CSS properties that use <code class="prettyprint">url(&quot;quoted string&quot;)</code> now works correctly, as of <code class="prettyprint">cssstyle</code> 0.2.29.</li>
<li>Selectors for the empty string, like <code class="prettyprint">div[title=&quot;&quot;]</code>, now work correctly, as of <code class="prettyprint">nwmatcher</code> 1.3.6.</li>
</ul></li>
</ul>

<h2 id="5-6-0">5.6.0</h2>

<ul>
<li><code class="prettyprint">virtualConsole.sendTo</code> now returns <code class="prettyprint">this</code>, allowing for <a href="https://github.com/tmpvar/jsdom/tree/60ccb9b318d0bae8fe37e19af5af444b9c98ddac#forward-a-windows-console-output-to-the-iojs-console">a nice shorthand</a>. (jeffcarp)</li>
</ul>

<h2 id="5-5-0">5.5.0</h2>

<ul>
<li>Added <code class="prettyprint">postMessage</code> support, for communicating between parent windows, iframes, and combinations thereof. It&rsquo;s missing a few semantics, especially around origins, as well as MessageEvent source. Objects are not yet structured cloned, but instead passed by reference. But it&rsquo;s working, and awesome! (jeffcarp)</li>
<li>Rewrote cloning code (underlying <code class="prettyprint">cloneNode</code> and <code class="prettyprint">importNode</code>), fixing a number of issues:

<ul>
<li>Elements with weird tag names, of the type that only the parser can normally create, can now be cloned (<a href="https://github.com/tmpvar/jsdom/issues/1142">#1142</a>)</li>
<li>Doctypes can now be cloned, per the latest spec.</li>
<li>Attrs cannot be cloned, per the latest spec (although they still have a <code class="prettyprint">cloneNode</code> method for now due to legacy).</li>
<li>Document clones now correctly copy over the URL and content-type.</li>
</ul></li>
<li>Fixed any virtual console output from iframes to be proxied to the parent window&rsquo;s virtual console. (jeffcarp)</li>
<li>Fixed the <code class="prettyprint">type</code> property of <code class="prettyprint">&lt;button&gt;</code> elements to correctly default to <code class="prettyprint">submit</code>, and to stay within the allowed range.</li>
<li>Fixed clicking on submit <code class="prettyprint">&lt;button&gt;</code>s to submit their containing form; previously only <code class="prettyprint">&lt;input type=&quot;submit&quot;&gt;</code> worked. (rxgx)</li>
<li>Fixed <code class="prettyprint">document.open()</code> to return <code class="prettyprint">this</code>, per spec. (ryanseddon)</li>
</ul>

<p>Additionally, Joris-van-der-Wel added <a href="https://github.com/tmpvar/jsdom/blob/master/Contributing.md#running-the-benchmarks">a benchmarking framework</a>, and a number of benchmarks, which should help us avoid performance regressions going forward, and also make targeted performance fixes. We&rsquo;re already investigating <a href="https://github.com/tmpvar/jsdom/issues/1156">some real-world issues</a> using this framework. Very exciting!</p>

<h2 id="5-4-3">5.4.3</h2>

<ul>
<li>Incorporated upstream fix for setting <code class="prettyprint">el.style.cssText</code> to an invalid value, which should be ignored instead of causing an error to be thrown. This same bug has also caused an error while setting the style attribute to an invalid value, ever since 5.4.0. (Joris-van-der-Wel; chad3814 upstream)</li>
</ul>

<h2 id="5-4-2">5.4.2</h2>

<ul>
<li>Fixed license metadata to conform to latest npm standards.</li>
</ul>

<h2 id="5-4-1">5.4.1</h2>

<ul>
<li>Fixed to work with browserify again (regression introduced in 5.4.0).</li>
</ul>

<h2 id="5-4-0">5.4.0</h2>

<p>This is a pretty exciting release! It includes a couple features I never really anticipated jsdom being awesome enough to have, but our wonderful contributors powered through and made them happen anyway:</p>

<ul>
<li>Added support for the default HTML stylesheet when using <code class="prettyprint">window.getComputedStyle</code>! (akhaku)

<ul>
<li>Notably, this makes jQuery&rsquo;s <code class="prettyprint">show()</code> and <code class="prettyprint">hide()</code> methods now work correctly; see <a href="https://github.com/tmpvar/jsdom/issues/994">#994</a>.</li>
</ul></li>
<li>Added support for named properties on <code class="prettyprint">window</code>: any elements with an <code class="prettyprint">id</code> attribute, or certain elements with a <code class="prettyprint">name</code> attribute, will cause properties to show up on the <code class="prettyprint">window</code>, and thus as global variables within the jsdom. (Joris-van-der-Wel)

<ul>
<li>Although this is fairly unfortunate browser behavior, it&rsquo;s standardized and supported everywhere, so the fact that jsdom now supports this too means we can run a lot of scripts that would previously fail.</li>
<li>Previously, we only supported this for <code class="prettyprint">&lt;iframe&gt;</code>s, and our implementation was quite buggy: e.g., <code class="prettyprint">&lt;iframe name=&quot;addEventListener&quot;&gt;</code> would override <code class="prettyprint">window.addEventListener</code>.</li>
<li>Now that we have the infrastructure in place, we anticipate expanding our support so that this works on e.g. <code class="prettyprint">HTMLFormElement</code>s as well in the future.</li>
</ul></li>
</ul>

<p>We also have a bunch more fixes and additions:</p>

<ul>
<li>Implemented the <a href="https://dom.spec.whatwg.org/#nondocumenttypechildnode"><code class="prettyprint">NonDocumentTypeChildNode</code></a> mixin. Practically, this means adding <code class="prettyprint">nextElementSibling</code> and <code class="prettyprint">previousElementSibling</code> to <code class="prettyprint">Element</code> and the various types of <code class="prettyprint">CharacterData</code>. (brandon-bethke-neudesic)</li>
<li>Updated <code class="prettyprint">StyleSheetList</code> to inherit from <code class="prettyprint">Array</code>, as per the latest CSSOM spec.</li>
<li>Overhauled the handling of attributes throughout the DOM, to follow the spec more exactly.

<ul>
<li>Our <code class="prettyprint">NamedNodeMap</code> implementation is up to date, as are the various <code class="prettyprint">Element</code> methods; other places in the code that deal with attributes now all go through a spec-compliant set of helpers.</li>
<li>Some weirdnesses around the <code class="prettyprint">style</code> attribute were fixed along the way; see e.g. <a href="https://github.com/tmpvar/jsdom/issues/1109">#1109</a>.</li>
<li>However, <code class="prettyprint">Attr</code> objects themselves are not yet spec-compliant (e.g., they still inherit from <code class="prettyprint">Node</code>). That&rsquo;s coming soon.</li>
</ul></li>
<li>Fixed an unfortunate bug where <code class="prettyprint">getElementById</code> would fail to work correctly on <code class="prettyprint">&lt;img&gt;</code> elements whose <code class="prettyprint">id</code> attributes were modified. (Joris-van-der-Wel)</li>
<li>Fixed the <code class="prettyprint">virtualConsole</code> option to work with <code class="prettyprint">jsdom.env</code>, not just <code class="prettyprint">jsdom.jsdom</code>. (jeffcarp)</li>
<li>Removed a few functions that were erroneously added to <code class="prettyprint">window</code>: <code class="prettyprint">mapper</code>, <code class="prettyprint">mapDOMNodes</code>, and <code class="prettyprint">visitTree</code>. (Joris-van-der-Wel)</li>
</ul>

<h2 id="5-3-0">5.3.0</h2>

<ul>
<li>Added a <code class="prettyprint">virtualConsole</code> option to the document creation methods, along with the <code class="prettyprint">jsdom.createVirtualConsole</code> factory. (See <a href="https://github.com/tmpvar/jsdom/blob/dbf88666d1152576237ed1c741263f5516bb4005/README.md#capturing-console-output">examples in the readme</a>.) With this option you can install a virtual console before the document is even created, thus allowing you to catch any virtual console events that occur during initialization. (jeffcarp)</li>
</ul>

<h2 id="5-2-0">5.2.0</h2>

<ul>
<li>Implemented much of the <a href="https://dom.spec.whatwg.org/#interface-parentnode"><code class="prettyprint">ParentNode</code></a> mixin (Joris-van-der-Wel):

<ul>
<li>Moved <code class="prettyprint">children</code> from <code class="prettyprint">Node</code> to <code class="prettyprint">ParentNode</code>, i.e., made it available on <code class="prettyprint">Document</code>, <code class="prettyprint">DocumentFragment</code>, and <code class="prettyprint">Element</code>, but not other types of nodes.</li>
<li>Made <code class="prettyprint">children</code> a <code class="prettyprint">HTMLCollection</code> instead of a <code class="prettyprint">NodeList</code>.</li>
<li>Implemented <code class="prettyprint">firstElementChild</code>, <code class="prettyprint">lastElementChild</code>, and <code class="prettyprint">childElementCount</code>.</li>
</ul></li>
<li>Implemented the <code class="prettyprint">outerHTML</code> setter. (Joris-van-der-Wel)</li>
<li>Fixed the <code class="prettyprint">outerHTML</code> getter for <code class="prettyprint">&lt;select&gt;</code> and <code class="prettyprint">&lt;form&gt;</code>. (Joris-van-der-Wel)</li>
<li>Fixed various issues with window-less documents, so that they no longer give incorrect results or blow up in strange ways. You can create such documents with e.g. <code class="prettyprint">document.implementation.createHTMLDocument()</code>. (Joris-van-der-Wel)</li>
<li>Fixed relative stylesheet resolution when using <code class="prettyprint">@import</code>. (dbo)</li>
</ul>

<h2 id="5-1-0">5.1.0</h2>

<ul>
<li>Added support for the <code class="prettyprint">NodeIterator</code> class from the DOM Standard. (Joris-van-der-Wel)</li>
<li>Fixed an issue with the initial request where it was not sharing its cookie jar with the subsequent requests, sometimes leading to a &ldquo;possible EventEmitter memory leak detected&rdquo; warning. (inikulin)</li>
<li>Updated tough-cookie to 0.13.0, bringing along many spec compliance fixes. (inikulin)</li>
<li>Added a fast failure in Node.js™ with a clear error message, so that people don&rsquo;t get confused by syntax errors.</li>
</ul>

<h2 id="5-0-1">5.0.1</h2>

<ul>
<li>Fixed <code class="prettyprint">document.cookie</code> setter to no longer ignore <code class="prettyprint">null</code>; instead it correctly sets a cookie of <code class="prettyprint">&quot;null&quot;</code>. (Chrome is not compliant to the spec in this regard.)</li>
<li>Fixed documents created with <code class="prettyprint">parsingMode: &quot;xml&quot;</code> to no longer get <code class="prettyprint">&quot;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;&quot;</code> automatically inserted when calling <code class="prettyprint">jsdom.jsdom()</code> with no arguments.</li>
<li>Fixed the <code class="prettyprint">innerHTML</code> setter to no longer ignore <code class="prettyprint">undefined</code>; instead it correctly sets the innerHTML to <code class="prettyprint">&quot;undefined&quot;</code>.</li>
<li>Fixed <code class="prettyprint">document.write</code> to throw for XML documents as per the spec.</li>
<li>Fixed <code class="prettyprint">document.write</code> to accept more than one argument (they get concatenated).</li>
<li>Fixed <code class="prettyprint">document.write(&quot;&quot;)</code> to no longer try to write <code class="prettyprint">&quot;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;&quot;</code>.</li>
</ul>

<h2 id="5-0-0">5.0.0</h2>

<p>This release overhauls how cookies are handled in jsdom to be less fiddly and more like-a-browser. The work for this was done by <a href="https://github.com/inikulin">@inikulin</a>, who is also our beloved parse5 maintainer.</p>

<p>You should only need to worry about upgrading to this release if you use jsdom&rsquo;s cookie handling capabilities beyond the basics of reading and writing to <code class="prettyprint">document.cookie</code>. If that describes you, here&rsquo;s what changed:</p>

<ul>
<li>Removed <code class="prettyprint">options.jar</code> and <code class="prettyprint">options.document.cookieDomain</code> from the configuration for creating jsdom documents.</li>
<li>Instead, there is now a new option, <code class="prettyprint">options.cookieJar</code>, which accepts cookie jars created by the new <code class="prettyprint">jsdom.createCookieJar()</code> API. You should use this if you intend to share cookie jars among multiple jsdom documents.</li>
<li>Within a given cookie jar, cookie access is now automatically handled on a domain basis, as the browser does, with the domain calculated from the document&rsquo;s URL (supplied as <code class="prettyprint">options.url</code> when creating a document). This supplants the former <code class="prettyprint">options.document.cookieDomain</code>.</li>
</ul>

<p>In addition to these changes to the public API, the following new cookie-related features came along for the ride:</p>

<ul>
<li>Implemented automatic cookie-jar sharing with descendant <code class="prettyprint">&lt;iframe&gt;</code>s. (So, if the iframe is same-domain, it can automatically access the appropriate cookies.)</li>
<li>Let <code class="prettyprint">options.document.cookie</code> accept arrays, instead of just strings, for if you want to set multiple cookies at once.</li>
</ul>

<p>Finally, it&rsquo;s worth noting that we now delegate our cookie handling in general to the <a href="https://www.npmjs.com/package/tough-cookie">tough-cookie</a> package, which should hopefully mean that it now captures many of the behaviors that were previously missing (for example <a href="https://github.com/tmpvar/jsdom/issues/1027">#1027</a>). @inikulin is working on <a href="https://github.com/goinstant/tough-cookie/pull/30">a large pull request to fix tough-cookie to be more spec compliant</a>, which should automatically be picked up by jsdom installs once it is merged.</p>

<h2 id="4-5-1">4.5.1</h2>

<ul>
<li>Removed unnecessary browserify dependency that was erroneously included in 4.5.0.</li>
</ul>

<h2 id="4-5-0">4.5.0</h2>

<ul>
<li>Added <code class="prettyprint">document.currentScript</code>. (jeffcarp)</li>
</ul>

<h2 id="4-4-0">4.4.0</h2>

<ul>
<li>All resources are now loaded with the <a href="https://www.npmjs.com/package/request">request</a> package, which means that e.g. GZIPped resources will be properly uncompressed, redirects will be followed, and more. This was previously the case only for URLs passed directly to <code class="prettyprint">jsdom.env</code>, and not for sub-resources inside the resulting page. (ssesha)</li>
</ul>

<h2 id="4-3-0">4.3.0</h2>

<ul>
<li>Made the click behavior for radio buttons and checkboxes work when doing <code class="prettyprint">el.dispatchEvent(clickEvent)</code>, not just when doing <code class="prettyprint">el.click()</code>. (brandon-bethke-neudesic)</li>
<li>Added <code class="prettyprint">defaultPrevented</code> property to <code class="prettyprint">Event</code> instances, reflecting whether <code class="prettyprint">ev.preventDefault()</code> has been called. (brandon-bethke-neudesic)</li>
<li>Moved the <code class="prettyprint">click()</code> method from <code class="prettyprint">HTMLInputElement.prototype</code> to <code class="prettyprint">HTMLElement.prototype</code>, per the latest spec.</li>
<li>Made the <code class="prettyprint">click()</code> method trigger a <code class="prettyprint">MouseEvent</code> instead of just an <code class="prettyprint">Event</code>.</li>
</ul>

<h2 id="4-2-0">4.2.0</h2>

<ul>
<li>Added a second parameter to <code class="prettyprint">UIEvent</code>, <code class="prettyprint">MouseEvent</code>, and <code class="prettyprint">MutationEvent</code>, which for now just behaves the same as that for <code class="prettyprint">Event</code>. (Rich-Harris)</li>
</ul>

<h2 id="4-1-0">4.1.0</h2>

<ul>
<li>Added a second parameter to the <code class="prettyprint">Event</code> constructor, which allows you to set the <code class="prettyprint">bubbles</code> and <code class="prettyprint">cancelable</code> properties. (brandon-bethke-neudesic)</li>
</ul>

<h2 id="4-0-5">4.0.5</h2>

<ul>
<li>Added <code class="prettyprint">HTMLUnknownElement</code> and fix the parser/<code class="prettyprint">document.createElement</code> to create those instead of <code class="prettyprint">HTMLElement</code> for unknown elements.</li>
<li>Fixed issues with named and indexed properties on <code class="prettyprint">window</code>, as well as <code class="prettyprint">window.length</code>, with regard to <code class="prettyprint">&lt;frame&gt;</code>s/<code class="prettyprint">&lt;iframe&gt;</code>s being added and removed from the document.</li>
</ul>

<p><em>Note:</em> this probably should have been a minor version number increment (i.e. 4.1.0 instead of 4.0.5), since it added <code class="prettyprint">HTMLUnknownElement</code>. We apologize for the deviation from semver.</p>

<h2 id="4-0-4">4.0.4</h2>

<ul>
<li>Fixed parsing of doctypes by relying on the information provided by the html parser if possible.</li>
</ul>

<h2 id="4-0-3">4.0.3</h2>

<ul>
<li>Fixed events fired from <code class="prettyprint">EventTarget</code>s to execute their handlers in FIFO order, as per the spec.</li>
<li>Fixed a case where <code class="prettyprint">childNodes</code> would not be correctly up to date in some cases. (medikoo)</li>
<li>Sped up window creation with <code class="prettyprint">jsdom.env</code> by ~600%, for the special case when no scripts are to be executed.</li>
</ul>

<h2 id="4-0-2">4.0.2</h2>

<ul>
<li><code class="prettyprint">EventTarget</code> is now correctly in the prototype chain of <code class="prettyprint">Window</code>.</li>
<li><code class="prettyprint">EventTarget</code> argument validation is now correct according to the DOM Standard.</li>
<li><code class="prettyprint">DOMException</code> now behaves more like it should per Web IDL. In particular it has a more comprehensive set of constants, and instances now have <code class="prettyprint">name</code> properties.</li>
<li><code class="prettyprint">new Event(&quot;click&quot;)</code> can now be dispatched. (lovebear)</li>
<li><code class="prettyprint">document.createEvent</code> now behaves more like it should according to the DOM Standard: it accepts a wider range of arguments, but will throw if an invalid one is given. (lovebear)</li>
<li>Fixed a regression in our browser support that required Chrome 41 as of 4.0.1; now Chrome 40 will work, as well as (in theory, although less well-tested) the latest stable versions of Firefox and IE.</li>
</ul>

<h2 id="4-0-1">4.0.1</h2>

<ul>
<li>Fixed: <code class="prettyprint">Node.prototype.contains</code> to always return a boolean. This was a regression in 3.1.1. (Joris-van-der-Wel)</li>
<li>Fixed: <code class="prettyprint">Document.prototype</code> no longer contains its own <code class="prettyprint">ownerDocument</code> getter, instead correctly delegating to <code class="prettyprint">Node.prototype</code>.</li>
<li>Fixed: some edge cases regarding running <code class="prettyprint">&lt;script&gt;</code>s in browserified jsdom.</li>
<li>A couple fixes from updated dependencies (although you would have gotten these anyway with a fresh install, due to floating version specifiers):

<ul>
<li>csstyle minimum version bumped from 0.2.21 to 0.2.23, fixing handling of <code class="prettyprint">0</code> when setting numeric CSS properties and parsing of shorthand <code class="prettyprint">font</code> declarations.</li>
<li>parse5 minimum version bumped from 1.3.1 to 1.3.2 to, fixing the parsing of <code class="prettyprint">&lt;form&gt;</code> elements inside <code class="prettyprint">&lt;template&gt;</code> elements.</li>
</ul></li>
</ul>

<h2 id="4-0-0">4.0.0</h2>

<p>This release relies on the newly-overhauled <code class="prettyprint">vm</code> module of io.js to eliminate the Contextify native module dependency. jsdom should now be much easier to use and install, without requiring a C++ compiler toolchain!</p>

<p>Note that as of this release, jsdom no longer works with Node.js™, and instead requires io.js. You are still welcome to install a release in <a href="https://github.com/tmpvar/jsdom/tree/3.x">the 3.x series</a> if you are stuck on legacy technology like Node.js™.</p>

<p>In the process of rewriting parts of jsdom to use <code class="prettyprint">vm</code>, a number of related fixes were made regarding the <code class="prettyprint">Window</code> object:</p>

<ul>
<li>In some cases, state was implicitly shared between <code class="prettyprint">Window</code> instances—especially parser- and serializer-related state. This is no longer the case, thankfully.</li>
<li>A number of properties of <code class="prettyprint">Window</code> were updated for spec compliance: some data properties became accessors, and all methods moved from the prototype to the instance.</li>
<li>The non-standard <code class="prettyprint">document.parentWindow</code> was removed, in favor of the standard <code class="prettyprint">document.defaultView</code>. Our apologies for encouraging use of <code class="prettyprint">parentWindow</code> in our README, tests, and examples.</li>
</ul>

<h2 id="3-1-2">3.1.2</h2>

<ul>
<li>Some fixes to the <code class="prettyprint">NOT_IMPLEMENTED</code> internal helper, which should eliminate the cases where calling e.g. <code class="prettyprint">window.alert</code> crashes your application.</li>
<li>Fixed a global variable leak when triggering <code class="prettyprint">NOT_IMPLEMENTED</code> methods, like <code class="prettyprint">window.location.reload</code>.</li>
<li>Fixed the URL resolution algorithm to handle <code class="prettyprint">about:blank</code> properly on all systems (previously it only worked on Windows). This is especially important since as of 3.0.0 the default URL is <code class="prettyprint">about:blank</code>.</li>
<li>Fixed, at least partially, the ability to run <code class="prettyprint">&lt;script&gt;</code>s inside a browserified jsdom instance. This is done by dynamically rewriting the source code so that global variable references become explicit references to <code class="prettyprint">window.variableName</code>, so it is not foolproof.</li>
</ul>

<h2 id="3-1-1">3.1.1</h2>

<ul>
<li>Updated <code class="prettyprint">Node.prototype.isEqualNode</code> to the algorithm of the DOM Standard, fixing a bug where it would throw an error along the way.</li>
<li>Removed <code class="prettyprint">Node.prototype.isSameNode</code>, which is not present in the DOM Standard (and was just a verbose <code class="prettyprint">===</code> check anyway).</li>
<li>Fixed a couple small issues while browserifying, mainly around <code class="prettyprint">jsdom.env</code>. However, while doing so discovered that <code class="prettyprint">&lt;script&gt;</code>s in general don&rsquo;t work too well in a browserified jsdom; see <a href="https://github.com/tmpvar/jsdom/issues/1023">#1023</a>.</li>
</ul>

<h2 id="3-1-0">3.1.0</h2>

<ul>
<li>Added support for <a href="https://github.com/tmpvar/jsdom#custom-external-resource-loader">custom external resource loading</a>. (tobie)</li>
</ul>

<h2 id="3-0-3">3.0.3</h2>

<ul>
<li>Fixed some stray byte-order marks in a couple files, which incidentally <a href="https://github.com/substack/node-browserify/issues/1095">break Browserify</a>. (sterpe)</li>
</ul>

<h2 id="3-0-2">3.0.2</h2>

<ul>
<li>Fixed another edge case where unchecking a radio button would incorrectly uncheck radio buttons outside the containing form. (zpao)</li>
</ul>

<h2 id="3-0-1">3.0.1</h2>

<ul>
<li>Fixed errors when serializing text nodes (possibly only occurred when inside <code class="prettyprint">&lt;template&gt;</code>).</li>
<li>Handle null bytes being passed to <code class="prettyprint">jsdom.env</code>&rsquo;s autodetecting capabilities. (fluffybunnies)</li>
<li>Handle empty HTML strings being passed to <code class="prettyprint">jsdom.env</code>&rsquo;s <code class="prettyprint">html</code> option. (fluffybunnies)</li>
</ul>

<h2 id="3-0-0">3.0.0</h2>

<p>This release updates large swathes of the DOM APIs to conform to the standard, mostly by removing old stuff. It also fixes a few bugs, introduces a couple new features, and changes some defaults.</p>

<p>3.0.x will be the last release of jsdom to support Node.js. All future releases (starting with 4.0.0) will require <a href="https://iojs.org/">io.js</a>, whose <a href="https://github.com/iojs/io.js/blob/v1.x/CHANGELOG.md#vm">new <code class="prettyprint">vm</code> module</a> will allow us to remove our contextify native-module dependency. (Given that I submitted the relevant patch to joyent/node <a href="https://github.com/joyent/node/commit/7afdba6e0bc3b69c2bf5fdbd59f938ac8f7a64c5">1.5 years ago</a>, I&rsquo;m very excited that we can finally use it!)</p>

<ul>
<li>By default documents now use <code class="prettyprint">about:blank</code> as their URL, instead of trying to infer some type of file URL from the call site (in Node.js) or using <code class="prettyprint">location.href</code> (in browsers).</li>
<li>Introduced a new &ldquo;virtual console&rdquo; abstraction for capturing console output from inside the page. <a href="https://github.com/tmpvar/jsdom#capturing-console-output">See the readme for more information.</a> Note that <code class="prettyprint">console.error</code> will no longer contribute to the (non-standard, and likely dying in the future) <code class="prettyprint">window.errors</code> array. (jeffcarp)</li>
<li>Added the named <code class="prettyprint">new Image(width, height)</code> constructor. (vinothkr)</li>
<li>Fixed an exception when using <code class="prettyprint">querySelector</code> with selectors like <code class="prettyprint">div:last-child &gt; span[title]</code>.</li>
<li>Removed all traces of entities, entity types, notations, default attributes, and CDATA sections.</li>
<li>Differentiated between XML and HTML documents better, for example in how they handle the casing of tag names and attributes.</li>
<li>Updated <code class="prettyprint">DOMImplementation</code> to mostly work per-spec, including removing <code class="prettyprint">addFeature</code> and <code class="prettyprint">removeFeature</code> methods, the <code class="prettyprint">ownerDocument</code> property, and making <code class="prettyprint">hasFeature</code> always return <code class="prettyprint">true</code>.</li>
<li>Re-did the <code class="prettyprint">CharacterData</code> implementation to follow the algorithms in the DOM Standard; this notably removes a few exceptions that were previously thrown.</li>
<li>Re-did <code class="prettyprint">Comment</code>, <code class="prettyprint">Text</code>, and <code class="prettyprint">ProcessingInstruction</code> to follow the DOM Standard and derive from <code class="prettyprint">CharacterData</code>.</li>
<li>Re-did <code class="prettyprint">DocumentType</code> to follow the DOM Standard and be much simpler, notably removing notations, entities, and default attributes.</li>
<li>Fixed a variety of accessors on <code class="prettyprint">Node</code>, <code class="prettyprint">Element</code>, <code class="prettyprint">Attr</code>, and <code class="prettyprint">Document</code>; some were removed that were nonstandard (especially setters); others were updated to reflect the spec; etc.</li>
<li>Re-did name/qname validation, which is done by various APIs, to work with the xml-name-validator package and some centralized algorithms.</li>
<li>Made the XML parser at least somewhat aware of processing instructions.</li>
<li>Cleaned up doctype parsing and association between doctypes and documents. More exotic doctypes should parse better now.</li>
<li><code class="prettyprint">document.contentType</code> now is generally inferred from the parsing mode of the document.</li>
<li>Moved some properties to <code class="prettyprint">Document.prototype</code> and <code class="prettyprint">Window.prototype</code> instead of setting them as own properties during the document/window creation. This should improve memory usage (as well as spec compliance).</li>
</ul>

<h2 id="2-0-0">2.0.0</h2>

<p>This release is largely a refactoring release to remove the defunct concept of &ldquo;levels&rdquo; from jsdom, in favor of the <a href="https://wiki.whatwg.org/wiki/FAQ#What_does_.22Living_Standard.22_mean.3F">living standard model</a> that browsers follow. Although the code is still organized that way, that&rsquo;s now <a href="https://github.com/tmpvar/jsdom/blob/2ff5747488ad4b518fcef97a026c82eab42a0a14/lib/README.md">noted as a historical artifact</a>. The public API changes while doing so were fairly minimal, but this sets the stage for a cleaner jsdom code structure going forward.</p>

<ul>
<li>Removed: <code class="prettyprint">jsdom.level</code>, and the <code class="prettyprint">level</code> option from <code class="prettyprint">jsdom.jsdom</code>.</li>
<li>Change: the nonstandard <code class="prettyprint">Element.prototype.matchesSelector</code> method was replaced with the standard <code class="prettyprint">Element.prototype.matches</code>. (KenPowers)</li>
<li>Fix: <code class="prettyprint">querySelector</code> correctly coerces its argument to a string (1.2.2 previously fixed this for <code class="prettyprint">querySelectorAll</code>).</li>
</ul>

<h2 id="1-5-0">1.5.0</h2>

<ul>
<li>Add: missing <code class="prettyprint">window.console</code> methods, viz. <code class="prettyprint">assert</code>, <code class="prettyprint">clear</code>, <code class="prettyprint">count</code>, <code class="prettyprint">debug</code>, <code class="prettyprint">group</code>, <code class="prettyprint">groupCollapse</code>, <code class="prettyprint">groupEnd</code>, <code class="prettyprint">table</code>, <code class="prettyprint">time</code>, <code class="prettyprint">timeEnd</code>, and <code class="prettyprint">trace</code>. All except <code class="prettyprint">assert</code> do nothing for now, but see <a href="https://github.com/tmpvar/jsdom/issues/979">#979</a> for future plans. (jeffcarp)</li>
<li>Tweak: make <code class="prettyprint">childNodes</code>, and the many places in jsdom that use it, much faster. (Joris-van-der-Wel)</li>
</ul>

<h2 id="1-4-1">1.4.1</h2>

<ul>
<li>Tweak: faster implementation of <code class="prettyprint">NodeList.prototype.length</code>, which should speed up common operations like <code class="prettyprint">appendChild</code> and similar. (Joris-van-der-Wel)</li>
</ul>

<h2 id="1-4-0">1.4.0</h2>

<ul>
<li>Fix: <code class="prettyprint">HTMLInputElement.prototype.checked</code> and <code class="prettyprint">defaultChecked</code> now behave per the spec. (Joris-van-der-Wel)</li>
<li>Fix: <code class="prettyprint">HTMLOptionElement.prototype.selected</code> now behaves per the spec. (Joris-van-der-Wel)</li>
<li>Fix: <code class="prettyprint">HTMLInputElement.prototype.value</code> now behaves per the spec. (Joris-van-der-Wel)</li>
<li>Fix: <code class="prettyprint">HTMLTextAreaElement.prototype.value</code> and <code class="prettyprint">defaultValue</code> now behave per the spec. (Joris-van-der-Wel)</li>
<li>Add: <code class="prettyprint">HTMLTextAreaElement.prototype.defaultValue</code> now has a setter, and <code class="prettyprint">HTMLTextAreaElement.prototype.textLength</code> now exists. (Joris-van-der-Wel)</li>
<li>Fix: resetting a <code class="prettyprint">&lt;form&gt;</code> now behaves per spec for all different types of form elements. (Joris-van-der-Wel)</li>
<li>Fix: radio buttons reset other radio buttons correctly now per the spec. (Joris-van-der-Wel)</li>
<li>Fix: <code class="prettyprint">document.cloneNode</code> now works. (AVGP)</li>
<li>Fix: <code class="prettyprint">hasAttribute</code> is now case-insensitive, as it should be. (AVGP)</li>
<li>Fix: <code class="prettyprint">div.toString()</code> now returns <code class="prettyprint">[object HTMLDivElement]</code>. (AVGP)</li>
</ul>

<h2 id="1-3-2">1.3.2</h2>

<ul>
<li>Fix: check if <code class="prettyprint">module.parent</code> exists before using it to construct a document&rsquo;s initial URL. Apparently some testing frameworks like Jest do not correctly emulate the module environment; this compensates. (SegFaultx64)</li>
</ul>

<h2 id="1-3-1">1.3.1</h2>

<ul>
<li>Fix: changing attributes on <code class="prettyprint">&lt;option&gt;</code> elements will now have the correct consequences. For example changing the <code class="prettyprint">id</code> attribute now interacts correctly with <code class="prettyprint">document.getElementById</code>. (Joris-van-der-Wel)</li>
</ul>

<h2 id="1-3-0">1.3.0</h2>

<ul>
<li>Add: moved <code class="prettyprint">focus</code> and <code class="prettyprint">blur</code> methods to <code class="prettyprint">HTMLElement.prototype</code>, instead of having them only be present on certain element prototypes. Our focus story is still not very spec-compliant, but this is a step in the right direction. (vincentsiao)</li>
</ul>

<h2 id="1-2-3">1.2.3</h2>

<ul>
<li>Tweak: improve performance of <code class="prettyprint">Node.prototype.insertBefore</code>, <code class="prettyprint">Node.prototype.removeChild</code>, and several <code class="prettyprint">AttributeList</code> methods. (Joris-van-der-Wel)</li>
</ul>

<h2 id="1-2-2">1.2.2</h2>

<ul>
<li>Fix: <code class="prettyprint">querySelectorAll</code> correctly coerces its argument to a string; notably this allows you to pass arrays. (jeffcarp)</li>
<li>Fix: the <code class="prettyprint">data</code> setter on text nodes correctly coerces the new value to a string. (medikoo)</li>
<li>Fix: <code class="prettyprint">document.toString()</code> now returns <code class="prettyprint">[object HTMLDocument]</code>. (jeffcarp)</li>
</ul>

<h2 id="1-2-1">1.2.1</h2>

<ul>
<li>Fix: handling of <code class="prettyprint">&lt;template&gt;</code> element parsing and serialization, now that it is supported by parse5. (inikulin)</li>
</ul>

<h2 id="1-2-0">1.2.0</h2>

<ul>
<li>Add: <code class="prettyprint">NodeFilter</code>, in particular its constants. (fhemberger)</li>
<li>Fix: initial <code class="prettyprint">history.length</code> should be <code class="prettyprint">1</code>, not <code class="prettyprint">0</code>. (rgrove)</li>
<li>Fix: <code class="prettyprint">history.pushState</code> and <code class="prettyprint">history.replaceState</code> should not fire the <code class="prettyprint">popstate</code> event. (rgrove)</li>
</ul>

<h2 id="1-1-0">1.1.0</h2>

<ul>
<li>Add: <code class="prettyprint">document.implementation.createHTMLDocument()</code>. (fhemberger)</li>
<li>Fix: <code class="prettyprint">localName</code> was sometimes <code class="prettyprint">null</code> for elements when it should not be. (fhemberger)</li>
</ul>

<h2 id="1-0-3">1.0.3</h2>

<ul>
<li>Update: no longer requiring separate <code class="prettyprint">cssstyle</code> and <code class="prettyprint">cssstyle-browserify</code> dependencies; now <code class="prettyprint">cssstyle</code> can be used directly. This also un-pins the <code class="prettyprint">cssstyle</code> dependency so that future fixes arrive as they appear upstream.</li>
</ul>

<h2 id="1-0-2">1.0.2</h2>

<ul>
<li>Fix: temporarily pin <code class="prettyprint">cssstyle</code> dependency to at most 0.2.18 until <a href="https://github.com/chad3814/CSSStyleDeclaration/issues/20">chad3814/CSSStyleDeclaration#20</a> is fixed.</li>
<li>Fix: browserifying jsdom should work better now that the required packages are included as <code class="prettyprint">dependencies</code> instead of <code class="prettyprint">devDependencies</code>. (Sebmaster)</li>
<li>Fix: using <code class="prettyprint">jsom.env</code> in a browser environment now correctly defaults <code class="prettyprint">options.url</code> to <code class="prettyprint">location.href</code> instead of trying to infer a reasonable <code class="prettyprint">fil://</code> URL using techniques that fail in the browser. (rattrayalex)</li>
</ul>

<h2 id="1-0-1">1.0.1</h2>

<ul>
<li>Fix: the return value of <code class="prettyprint">EventTarget.prototype.dispatchEvent</code> should be <code class="prettyprint">true</code> when the default is <em>not</em> prevented; previously it was the opposite. (eventualbuddha)</li>
</ul>

<h2 id="1-0-0">1.0.0</h2>

<p>For a consolidated list of changes from 0.11.1 to 1.0.0, see <a href="https://github.com/tmpvar/jsdom/wiki/Changes-from-0.11.1-to-1.0.0">this wiki page</a>.</p>

<ul>
<li>Remove: nonstandard <code class="prettyprint">EventTarget.getListeners</code>; <code class="prettyprint">EventTarget.forwardIterator</code>; <code class="prettyprint">EventTarget.backwardIterator</code>; <code class="prettyprint">EventTarget.singleIterator</code>.</li>
<li>Remove: nonstandard <code class="prettyprint">document.innerHTML</code>. (jorendorff)</li>
<li>Fix: <code class="prettyprint">value</code> and <code class="prettyprint">defaultValue</code> properties of a <code class="prettyprint">HTMLInputElement</code> are now correctly synced to the <code class="prettyprint">value=&quot;&quot;</code> attribute. (Sebmaster)</li>
</ul>

<h2 id="1-0-0-pre-7">1.0.0-pre.7</h2>

<ul>
<li>Remove: support for old, untested HTML and XML parsers, namely davglass/node-htmlparser and isaacs/sax-js. In the future we plan to work toward a standardized parsing interface that other parsers can implement, instead of adding custom code to jsdom for various parsers. This interface still is being decided though, as it needs to support complex things like pausing the parse stream (for <code class="prettyprint">document.write</code>) and parsing disconnected fragments (for <code class="prettyprint">document.innerHTML</code>). (Sebmaster)</li>
<li>Add: new <code class="prettyprint">parsingMode</code> configuration, to allow you to manually specify XML or HTML. (Sebmaster)</li>
<li>Change: jsdom will no longer use the presence of <code class="prettyprint">&lt;?xml</code> or similar to attempt to auto-detect XHTML documents. Instead, it will by default treat them the same as browsers do, with the <code class="prettyprint">&lt;?xml</code> declaration just being a bogus comment. If you need your document interpreted as XHTML instead of HTML, use the <code class="prettyprint">parsingMode</code> option. (Sebmaster)</li>
<li>Tweak: memoize various DOM-querying functions (e.g. <code class="prettyprint">getElementsByTagName</code>, <code class="prettyprint">querySelector</code>, etc.) to improve performance. (ccarpita)</li>
</ul>

<h2 id="1-0-0-pre-6">1.0.0-pre.6</h2>

<ul>
<li>Fix: another parsing issues with void elements and <code class="prettyprint">innerHTML</code>, this time related to disconnected nodes. This was a regression between 0.11.1 and 1.0.0-pre.1. (paton)</li>
<li>Fix: same-named radio inputs should not be mutually exclusive unless they are in the same form. (stof)</li>
</ul>

<h2 id="1-0-0-pre-5">1.0.0-pre.5</h2>

<ul>
<li>Fix: sometimes calling <code class="prettyprint">window.close()</code> would cause a segfault. (paton)</li>
</ul>

<h2 id="1-0-0-pre-4">1.0.0-pre.4</h2>

<ul>
<li>Fix: attributes and elements now have their <code class="prettyprint">prefix</code>, <code class="prettyprint">localName</code>, and <code class="prettyprint">namespaceURI</code> properties set correctly in all cases. (Excepting <code class="prettyprint">application/xhtml+xml</code> mode, which jsdom does not support yet.) (Sebmaster)</li>
</ul>

<h2 id="1-0-0-pre-3">1.0.0-pre.3</h2>

<ul>
<li>Fix: void elements no longer parsed correctly when using <code class="prettyprint">innerHTML</code>. This was a regression between 0.11.1 and 1.0.0-pre.1. (Sebmaster)</li>
</ul>

<h2 id="1-0-0-pre-2">1.0.0-pre.2</h2>

<ul>
<li>Fix: parsing and serialization of attributes in the form <code class="prettyprint">x:y</code>, e.g. <code class="prettyprint">xmlns:xlink</code> or <code class="prettyprint">xlink:href</code>. This was a regression between 0.11.1 and 1.0.0-pre.1. (Sebmaster)</li>
</ul>

<h2 id="1-0-0-pre-1">1.0.0-pre.1</h2>

<p>This is a prerelease of jsdom&rsquo;s first major version. It incorporates several great additions, as well as a general cleanup of the API surface, which make it more backward-incompatible than usual. Starting with the 1.0.0 release, we will be following semantic versioning, so that you can depend on stability within major version ranges. But we still have <a href="https://github.com/tmpvar/jsdom/issues?q=is%3Aopen+is%3Aissue+milestone%3A1.0">a few more issues</a> before we can get there, so I don&rsquo;t want to do 1.0.0 quite yet.</p>

<p>This release owes a special thanks to <a href="https://github.com/Sebmaster">@Sebmaster</a>, for his amazing work taking on some of the hardest problems in jsdom and solving them with gusto.</p>

<h3 id="major-changes">Major changes</h3>

<ul>
<li>jsdom now can be browserified into a bundle that works in web workers! This is highly experimental, but also highly exciting! (lawnsea)</li>
<li>An overhaul of the <a href="https://github.com/tmpvar/jsdom#initialization-lifecycle">initialization lifecycle</a>, to bring more control and address common use cases. (Sebmaster)</li>
<li>The excellent <a href="https://npmjs.org/package/parse5">parse5</a> HTML parser is now the default parser, fixing many parsing bugs and giving us full, official-test-suite-passing HTML parsing support. This especially impacts documents that didn&rsquo;t include optional tags like <code class="prettyprint">&lt;html&gt;</code>, <code class="prettyprint">&lt;head&gt;</code>, or <code class="prettyprint">&lt;body&gt;</code> in their source. We also use parse5 for serialization, fixing many bugs there. (Sebmaster)</li>
<li>As part of the new parser story, we are not supporting XML for now. It might work if you switch to a different parser (e.g. htmlparser2), but in the end, HTML and XML are very different, and we are not attempting to be an XML DOM. That said, we eventually want to support XML to the same extent browsers do (i.e., support XHTML and SVG, with an appropriate MIME type switch); this is being planned in <a href="https://github.com/tmpvar/jsdom/issues/820">#820</a>.</li>
</ul>

<h3 id="removed-jsdom-apis">Removed jsdom APIs</h3>

<ul>
<li><code class="prettyprint">jsdom.createWindow</code>: use <code class="prettyprint">document.parentWindow</code> after creating a document</li>
<li><code class="prettyprint">jsdom.html</code>: use <code class="prettyprint">jsdom.jsdom</code></li>
<li><code class="prettyprint">jsdom.version</code>: use <code class="prettyprint">require(&quot;jsdom/package.json&quot;).version</code></li>
<li><code class="prettyprint">jsdom.level</code>: levels are deprecated and will probably be removed in 2.0.0</li>
<li><code class="prettyprint">jsdom.dom</code></li>
<li><code class="prettyprint">jsdom.browserAugmentation</code></li>
<li><code class="prettyprint">jsdom.windowAugmentation</code></li>
</ul>

<h3 id="changed-jsdom-apis">Changed jsdom APIs</h3>

<ul>
<li><code class="prettyprint">jsdom.jsdom</code> no longer takes a level as its second argument.</li>
<li><code class="prettyprint">jsdom.jQueryify</code> now requires a jQuery URL, since <a href="http://blog.jquery.com/2014/07/03/dont-use-jquery-latest-js/">always picking the latest was a bad idea</a>.</li>
</ul>

<h3 id="removed-non-standard-dom-apis">Removed non-standard DOM APIs</h3>

<ul>
<li><code class="prettyprint">document.createWindow</code>: use <code class="prettyprint">document.parentWindow</code></li>
<li><code class="prettyprint">document.innerHTML</code> and <code class="prettyprint">document.outerHTML</code>: use the new <code class="prettyprint">jsdom.serializeDocument</code> to include the DOCTYPE, or use <code class="prettyprint">document.documentElement.outerHTML</code> to omit it.</li>
</ul>

<h3 id="other-fixes">Other fixes</h3>

<ul>
<li>Allow empty strings to be passed to <code class="prettyprint">jsdom.env</code>. (michaelmior)</li>
<li>Fix for a memory leak in <code class="prettyprint">EventTarget.prototype.dispatchEvent</code>. (Joris-van-der-Wel)</li>
<li>Make event listeners in the capture phase also fire on the event target. (Joris-van-der-Wel)</li>
<li>Correctly reset <code class="prettyprint">eventPhase</code> and <code class="prettyprint">currentTarget</code> on events, before and after a dispatch. (Joris-van-der-Wel)</li>
<li>Fix <code class="prettyprint">document.cookie = null</code> to not throw, but instead just do nothing. (kapouer)</li>
</ul>

<h2 id="0-11-1">0.11.1</h2>

<ul>
<li>Add: <code class="prettyprint">Node.prototype.parentElement</code>. (lukasbuenger)</li>
<li>Fix: attributes that are reflected as properties should be <code class="prettyprint">&#39;&#39;</code> when not present, instead of <code class="prettyprint">null</code>. (Note that <code class="prettyprint">getAttribute</code> still returns <code class="prettyprint">null</code> for them). (thejameskyle)</li>
<li>Fix: <code class="prettyprint">textContent</code> now works for nodes that do not have children, like text nodes for example. (hayes)</li>
<li>Fix: <code class="prettyprint">jsdom.jQueryify</code> was using the wrong URL for jQuery by default. (lukasbuenger)</li>
</ul>

<h2 id="0-11-0">0.11.0</h2>

<ul>
<li>Add: new default level, <code class="prettyprint">living</code>, reflecting our focus on the <a href="http://dom.spec.whatwg.org/">DOM Living Standard</a> and the <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/">HTML Living Standard</a>, which are what browsers actually implement. This should open the door for more features of the modern DOM and HTML specs to be implemented in jsdom. (robotlovesyou)</li>
<li>Add: <code class="prettyprint">Node.prototype.contains</code> now implemented. (robotlovesyou)</li>
<li>Add: <code class="prettyprint">navigator.cookieEnabled</code> now implemented; it always returns <code class="prettyprint">true</code>. (Sebmaster)</li>
<li>Change: DOCTYPEs no longer have their <code class="prettyprint">name</code> property uppercased during parsing, and appear in the output of <code class="prettyprint">document.innerHTML</code>.</li>
<li>Fix: <code class="prettyprint">Node.prototype.compareDocumentPosition</code> implemented correctly; various document position constants added to the <code class="prettyprint">Node</code> constructor. (robotlovesyou)</li>
<li>Fix: <code class="prettyprint">DocumentType.prototype.parentNode</code> now returns the document node, not <code class="prettyprint">null</code>. (robotlovesyou)</li>
<li>Fix: various <code class="prettyprint">navigator</code> properties are now getters, not data properties. (Sebmaster)</li>
<li>Fix: a bug involving invalid script paths and <code class="prettyprint">jsdom.jQueryify</code>. (Sebmaster)</li>
</ul>

<h2 id="0-10-6">0.10.6</h2>

<ul>
<li>Add: remaining URL properties to <code class="prettyprint">window.location</code> and <code class="prettyprint">HTMLAnchorElement</code>.</li>
<li>Fix: the presence of <code class="prettyprint">String.prototype.normalize</code>, which is available by default in Node 0.11.13 onwards, caused reflected attributes to break. (brock8503)</li>
<li>Fix: iframes now correctly load <code class="prettyprint">about:blank</code> when the <code class="prettyprint">src</code> attribute is empty or missing. (mcmathja)</li>
<li>Fix: documents containing only whitespace now correctly generate wrapper documents, just like blank documents do. (nikolas)</li>
<li>Tweak: lazy-load the request module, to improve overall jsdom loading time. (tantaman)</li>
</ul>

<h2 id="0-10-5">0.10.5</h2>

<ul>
<li>Fix: the list of void elements has been updated to match the latest HTML spec.</li>
<li>Fix: when serializing void elements, don&rsquo;t include a <code class="prettyprint">/</code>: i.e. the result is now <code class="prettyprint">&lt;br&gt;</code> instead of <code class="prettyprint">&lt;br /&gt;</code>.</li>
</ul>

<h2 id="0-10-4">0.10.4</h2>

<ul>
<li>Fix: another case was found where jQuery 1.11&rsquo;s <code class="prettyprint">show()</code> method would cause errors.</li>
<li>Add: <code class="prettyprint">querySelector</code> and <code class="prettyprint">querySelectorAll</code> methods to <code class="prettyprint">DocumentFragment</code>s. (Joris-van-der-Wel)</li>
</ul>

<h2 id="0-10-3">0.10.3</h2>

<ul>
<li>Fix: various defaults on <code class="prettyprint">HTMLAnchorElement</code> and <code class="prettyprint">window.location</code> should not be <code class="prettyprint">null</code>; they should usually be the empty string.</li>
</ul>

<h2 id="0-10-2">0.10.2</h2>

<ul>
<li>Fix: Using jQuery 1.11&rsquo;s <code class="prettyprint">show()</code> method would cause an error to be thrown.</li>
<li>Fix: <code class="prettyprint">window.location</code> properties were not updating correctly after using <code class="prettyprint">pushState</code> or <code class="prettyprint">replaceState</code>. (toomanydaves)</li>
</ul>

<h2 id="0-10-1">0.10.1</h2>

<ul>
<li>Fix: <code class="prettyprint">window.location.port</code> should default to <code class="prettyprint">&quot;&quot;</code>, not <code class="prettyprint">null</code>. (bpeacock)</li>
</ul>

<h2 id="0-10-0">0.10.0</h2>

<ul>
<li>Add: a more complete <code class="prettyprint">document.cookie</code> implementation, that supports multiple cookies. Note that options like <code class="prettyprint">path</code>, <code class="prettyprint">max-age</code>, etc. are still ignored. (dai-shi)</li>
</ul>

<h2 id="0-9-0">0.9.0</h2>

<ul>
<li>Add: implement attribute ordering semantics from WHATWG DOM spec, and in general overhaul attribute storage implementation to be much more awesome and accurate. (lddubeau)</li>
<li>Add: <code class="prettyprint">port</code> and <code class="prettyprint">protocol</code> to <code class="prettyprint">HTMLAnchorElement</code>. (sporchia)</li>
<li>Fix: make <code class="prettyprint">HTMLInputElement</code> not have a <code class="prettyprint">type</code> <em>attribute</em> by default. It still has a default value for the <code class="prettyprint">type</code> <em>property</em>, viz. <code class="prettyprint">&quot;text&quot;</code>. (aredridel)</li>
<li>Fix: treat empty namespace URI as meaning &ldquo;no namespace&rdquo; with the <code class="prettyprint">getAttributeNS</code>, <code class="prettyprint">hasAttributeNS</code>, and <code class="prettyprint">setAttributeNS</code> functions. (lddubeau)</li>
<li>Fix: reference typed arrays in a way that doesn&rsquo;t immediately break on Node 0.6. Node 0.6 isn&rsquo;t supported in general, though. (kangax)</li>
</ul>

<h2 id="0-8-11">0.8.11</h2>

<ul>
<li>Add: store and use cookies between requests; customizable cookie jars also possible. (stockholmux)</li>
<li>Fix: attributes named the same as prototype properties of <code class="prettyprint">NamedNodeMap</code> no longer break jsdom. (papandreou)</li>
<li>Fix: <code class="prettyprint">removeAttributeNS</code> should not throw on missing attributes. (lddubeau)</li>
<li>Change: remove <code class="prettyprint">__proto__</code>, <code class="prettyprint">__defineGetter__</code>, and <code class="prettyprint">__defineSetter__</code> usage, as part of a project to make jsdom work better across multiple environments. (lawnsea)</li>
</ul>

<h2 id="0-8-10">0.8.10</h2>

<ul>
<li>Add: <code class="prettyprint">hash</code> property to <code class="prettyprint">HTMLAnchorElement</code>. (fr0z3nk0)</li>
</ul>

<h2 id="0-8-9">0.8.9</h2>

<ul>
<li>Upgrade: <code class="prettyprint">cssom</code> to 0.3.0, adding support for <code class="prettyprint">@-moz-document</code> and fixing a few other issues.</li>
<li>Upgrade: <code class="prettyprint">cssstyle</code> to 0.2.6, adding support for many shorthand properties and better unit handling.</li>
</ul>

<h2 id="0-8-8">0.8.8</h2>

<ul>
<li>Fix: avoid repeated <code class="prettyprint">NodeList.prototype.length</code> calculation, for a speed improvement. (peller)</li>
</ul>

<h2 id="0-8-7">0.8.7</h2>

<ul>
<li>Add: <code class="prettyprint">host</code> property to <code class="prettyprint">HTMLAnchorElement</code>. (sporchia)</li>
</ul>

<h2 id="0-8-6">0.8.6</h2>

<ul>
<li>Fix: stop accidentally modifying <code class="prettyprint">Error.prototype</code>. (mitar)</li>
<li>Add: a dummy <code class="prettyprint">getBoundingClientRect</code> method, that returns <code class="prettyprint">0</code> for all properties of the rectangle, is now implemented. (F1LT3R)</li>
</ul>

<h2 id="0-8-5">0.8.5</h2>

<ul>
<li>Add: <code class="prettyprint">href</code> property on <code class="prettyprint">CSSStyleSheet</code> instances for external CSS files. (FrozenCow)</li>
</ul>

<h2 id="0-8-4">0.8.4</h2>

<ul>
<li>Add: typed array constructors on the <code class="prettyprint">window</code>. (nlacasse)</li>
<li>Fix: <code class="prettyprint">querySelector</code> and <code class="prettyprint">querySelectorAll</code> should be on the prototypes of <code class="prettyprint">Element</code> and <code class="prettyprint">Document</code>, not own-properties. (mbostock)</li>
</ul>

<h2 id="0-8-3">0.8.3</h2>

<ul>
<li>Fix: when auto-detecting whether the first parameter to <code class="prettyprint">jsdom.env</code> is a HTML string or a filename, deal with long strings correctly instead of erroring. (baryshev)</li>
</ul>

<h2 id="0-8-2">0.8.2</h2>

<ul>
<li>Add: basic <code class="prettyprint">window.history</code> support, including <code class="prettyprint">back</code>, <code class="prettyprint">forward</code>, <code class="prettyprint">go</code>, <code class="prettyprint">pushState</code>, and <code class="prettyprint">replaceState</code>. (ralphholzmann)</li>
<li>Add: if an <code class="prettyprint">&lt;?xml?&gt;</code> declaration starts the document, will try to parse as XML, e.g. not lowercasing the tags. (robdodson)</li>
<li>Fix: tag names passed to <code class="prettyprint">createElement</code> are coerced to strings before evaluating.</li>
</ul>

<h2 id="0-8-1-hotfix">0.8.1 (hotfix)</h2>

<ul>
<li>Fix: a casing issue that prevented jsdom from loading on Unix and Solaris systems. (dai-shi)</li>
<li>Fix: <code class="prettyprint">window.location.replace</code> was broken. (dai-shi)</li>
<li>Fix: update minimum htmlparser2 version, to ensure you get the latest parsing-related bugfixes.</li>
</ul>

<h2 id="0-8-0">0.8.0</h2>

<ul>
<li>Add: working <code class="prettyprint">XMLHttpRequest</code> support, including cookie passing! (dai-shi)</li>
<li>Add: there is now a <code class="prettyprint">window.navigator.noUI</code> property that evaluates to true, if you want to specifically distinguish jsdom in your tests.</li>
</ul>

<h2 id="0-7-0">0.7.0</h2>

<ul>
<li>Change: the logic when passing <code class="prettyprint">jsdom.env</code> a string is more accurate, and you can be explicit by using the <code class="prettyprint">html</code>, <code class="prettyprint">url</code>, or <code class="prettyprint">file</code> properties. This is a breaking change in the behavior of <code class="prettyprint">html</code>, which used to do the same auto-detection logic as the string-only version.</li>
<li>Fix: errors raised in scripts are now passed to <code class="prettyprint">jsdom.env</code>&rsquo;s callback. (airportyh)</li>
<li>Fix: set <code class="prettyprint">window.location.href</code> correctly when using <code class="prettyprint">jsdom.env</code> to construct a window from a URL, when that URL causes a redirect. (fegs)</li>
<li>Add: a more complete and accurate <code class="prettyprint">window.location</code> object, which includes firing <code class="prettyprint">hashchange</code> events when the hash is changed. (dai-shi)</li>
<li>Add: when using a non-implemented feature, mention exactly what it was that is not implemented in the error message. (papandreou)</li>
</ul>

<h2 id="0-6-5">0.6.5</h2>

<ul>
<li>Fix: custom attributes whose names were the same as properties of <code class="prettyprint">Object.prototype</code>, e.g. <code class="prettyprint">&quot;constructor&quot;</code>, would confuse jsdom massively.</li>
</ul>

<h2 id="0-6-4">0.6.4</h2>

<ul>
<li>Fix: CSS selectors which contain commas inside quotes are no longer misinterpreted. (chad3814)</li>
<li>Add: <code class="prettyprint">&lt;img&gt;</code> elements now fire <code class="prettyprint">&quot;load&quot;</code> events when their <code class="prettyprint">src</code> attributes are changed. (kapouer)</li>
</ul>

<h2 id="0-6-3">0.6.3</h2>

<ul>
<li>Fix: better automatic detection of URLs vs. HTML fragments when using <code class="prettyprint">jsdom.env</code>. (jden)</li>
</ul>

<h2 id="0-6-2">0.6.2</h2>

<ul>
<li>Fix: URL resolution to be amazing and extremely browser-compatible, including the interplay between the document&rsquo;s original URL, any <code class="prettyprint">&lt;base&gt;</code> tags that were set, and any relative <code class="prettyprint">href</code>s. This impacts many parts of jsdom having to do with external resources or accurate <code class="prettyprint">href</code> and <code class="prettyprint">src</code> attributes. (deitch)</li>
<li>Add: access to frames and iframes via named properties. (adrianlang)</li>
<li>Fix: node-canvas integration, which had been broken since 0.5.7.</li>
</ul>

<h2 id="0-6-1">0.6.1</h2>

<ul>
<li>Make the code parseable with Esprima. (squarooticus)</li>
<li>Use the correct <code class="prettyprint">package.json</code> field <code class="prettyprint">&quot;repository&quot;</code> instead of <code class="prettyprint">&quot;repositories&quot;</code> to prevent npm warnings. (jonathanong)</li>
</ul>

<h2 id="0-6-0">0.6.0</h2>

<p>Integrated a new HTML parser, <a href="https://npmjs.org/package/htmlparser2">htmlparser2</a>, from fb55. This is an actively maintained and much less buggy parser, fixing many of our parsing issues, including:</p>

<ul>
<li>Parsing elements with optional closing tags, like <code class="prettyprint">&lt;p&gt;</code> or <code class="prettyprint">&lt;td&gt;</code>.</li>
<li>The <code class="prettyprint">innerHTML</code> of <code class="prettyprint">&lt;script&gt;</code> tags no longer cuts off the first character.</li>
<li>Empty attributes now have <code class="prettyprint">&quot;&quot;</code> as their value instead of the attribute name.</li>
<li>Multiline attributes no longer get horribly mangled.</li>
<li>Attribute names can now be any value allowed by HTML5, including crazy things like <code class="prettyprint">^</code>.</li>
<li>Attribute values can now contain any value allowed by HTML5, including e.g. <code class="prettyprint">&gt;</code> and <code class="prettyprint">&lt;</code>.</li>
</ul>

<h2 id="0-5-7">0.5.7</h2>

<ul>
<li>Fix: make event handlers attached via <code class="prettyprint">on&lt;event&gt;</code> more spec-compatible, supporting <code class="prettyprint">return false</code> and passing the <code class="prettyprint">event</code> argument. (adrianlang)</li>
<li>Fix: make the getter for <code class="prettyprint">textContent</code> more accurate, e.g. in cases involving comment nodes or processing instruction nodes. (adrianlang)</li>
<li>Fix: make <code class="prettyprint">&lt;canvas&gt;</code> behave like a <code class="prettyprint">&lt;div&gt;</code> when the <code class="prettyprint">node-canvas</code> package isn&rsquo;t available, instead of crashing. (stepheneb)</li>
</ul>

<h2 id="0-5-6">0.5.6</h2>

<ul>
<li>Fix: <code class="prettyprint">on&lt;event&gt;</code> properties are correctly updated when using <code class="prettyprint">setAttributeNode</code>, <code class="prettyprint">attributeNode.value =</code>, <code class="prettyprint">removeAttribute</code>, and <code class="prettyprint">removeAttributeNode</code>; before it only worked with <code class="prettyprint">setAttribute</code>. (adrianlang)</li>
<li>Fix: <code class="prettyprint">HTMLCollection</code>s now have named properties based on their members&rsquo; <code class="prettyprint">id</code> and <code class="prettyprint">name</code> attributes, e.g. <code class="prettyprint">form.elements.inputId</code> is now present. (adrianlang)</li>
</ul>

<h2 id="0-5-5">0.5.5</h2>

<ul>
<li>Fix: <code class="prettyprint">readOnly</code> and <code class="prettyprint">selected</code> properties were not correct when their attribute values were falsy, e.g. <code class="prettyprint">&lt;option selected=&quot;&quot;&gt;</code>. (adrianlang)</li>
</ul>

<h2 id="0-5-4">0.5.4</h2>

<p>This release, and all future releases, require at least Node.js 0.8.</p>

<ul>
<li>Add: parser can now be set via <code class="prettyprint">jsdom.env</code> configuration. (xavi-)</li>
<li>Fix: accessing <code class="prettyprint">rowIndex</code> for table rows that are not part of a table would throw. (medikoo)</li>
<li>Fix: several places in the code accidentally created global variables, or referenced nonexistant values. (xavi-)</li>
<li>Fix: <code class="prettyprint">&lt;img&gt;</code> elements&rsquo; <code class="prettyprint">src</code> properties now evaluate relative to <code class="prettyprint">location.href</code>, just like <code class="prettyprint">&lt;a&gt;</code> elements&rsquo; <code class="prettyprint">href</code> properties. (brianmaissy)</li>
</ul>

<h2 id="0-5-3">0.5.3</h2>

<p>This release is compatible with Node.js 0.6, whereas all future releases will require at least Node.js 0.8.</p>

<ul>
<li>Fix: <code class="prettyprint">getAttributeNS</code> now returns <code class="prettyprint">null</code> for attributes that are not present, just like <code class="prettyprint">getAttribute</code>. (mbostock)</li>
<li>Change: <code class="prettyprint">&quot;request&quot;</code> dependency pinned to version 2.14 for Node.js 0.6 compatibility.</li>
</ul>

<h2 id="0-5-2">0.5.2</h2>

<ul>
<li>Fix: stylesheets with <code class="prettyprint">@-webkit-keyframes</code> rules were crashing calls to <code class="prettyprint">getComputedStyle</code>.</li>
<li>Fix: handling of <code class="prettyprint">features</code> option to <code class="prettyprint">jsdom.env</code>.</li>
<li>Change: retain the value of the <code class="prettyprint">style</code> attribute until the element&rsquo;s <code class="prettyprint">style</code> property is touched. (papandreou)</li>
</ul>

<h2 id="0-5-1">0.5.1</h2>

<ul>
<li>Fix: <code class="prettyprint">selectedIndex</code> now changes correctly in response to <code class="prettyprint">&lt;option&gt;</code> elements being selected. This makes <code class="prettyprint">&lt;select&gt;</code> elements actually work like you would want, especially with jQuery. (xcoderzach)</li>
<li>Fix: <code class="prettyprint">checked</code> works correctly on radio buttons, i.e. only one can be checked and clicking on one does not uncheck it. Previously they worked just like checkboxes. (xcoderzach)</li>
<li>Fix: <code class="prettyprint">click()</code> on <code class="prettyprint">&lt;input&gt;</code> elements now fires a click event. (xcoderzach)</li>
</ul>

<h2 id="0-5-0">0.5.0</h2>

<ul>
<li>Fix: Make <code class="prettyprint">contextify</code> a non-optional dependency. jsdom never worked without it, really, so this just caused confusion.</li>
</ul>

<h2 id="0-4-2">0.4.2</h2>

<ul>
<li>Fix: <code class="prettyprint">selected</code> now returns true for the first <code class="prettyprint">&lt;option&gt;</code> in a <code class="prettyprint">&lt;select&gt;</code> if nothing is explicitly set.</li>
<li>Fix: tweaks to accuracy and speed of the <code class="prettyprint">querySelectorAll</code> implementation.</li>
</ul>

<h2 id="0-4-1-hotfix">0.4.1 (hotfix)</h2>

<ul>
<li>Fix: crashes when loading HTML files with <code class="prettyprint">&lt;a&gt;</code> tags with no <code class="prettyprint">href</code> attribute. (eleith)</li>
</ul>

<h2 id="0-4-0">0.4.0</h2>

<ul>
<li>Fix: <code class="prettyprint">getAttribute</code> now returns <code class="prettyprint">null</code> for attributes that are not present, as per DOM4 (but in contradiction to DOM1 through DOM3).</li>
<li>Fix: static <code class="prettyprint">NodeList</code>-returning methods (such as <code class="prettyprint">querySelectorAll</code>) now return a real <code class="prettyprint">NodeList</code> instance.</li>
<li>Change: <code class="prettyprint">NodeList</code>s no longer expose nonstandard properties to the world, like <code class="prettyprint">toArray</code>, without first prefixing them with an underscore.</li>
<li>Change: <code class="prettyprint">NodeList</code>s no longer inconsistently have array methods. Previously, live node lists would have <code class="prettyprint">indexOf</code>, while static node lists would have them all. Now, they have no array methods at all, as is correct per the specification.</li>
</ul>

<h2 id="0-3-4">0.3.4</h2>

<ul>
<li>Fix: stylesheets with <code class="prettyprint">@media</code> rules were crashing calls to <code class="prettyprint">getComputedStyle</code>, e.g. those in jQuery&rsquo;s initialization.</li>
</ul>

<h2 id="0-3-3">0.3.3</h2>

<ul>
<li>Fix: make <code class="prettyprint">document.write</code> calls insert new elements correctly. (johanoverip, kblomquist).</li>
<li>Fix: <code class="prettyprint">&lt;input&gt;</code> tags with no <code class="prettyprint">type</code> attribute now return a default value of <code class="prettyprint">&quot;text&quot;</code> when calling <code class="prettyprint">inputEl.getAttribute(&quot;type&quot;)</code>.</li>
</ul>

<h2 id="0-3-2">0.3.2</h2>

<ul>
<li>Fix: stylesheets with &ldquo;joining&rdquo; rules (i.e. those containing comma-separated selectors) now apply when using <code class="prettyprint">getComputedStyle</code>. (chad3814, godmar)</li>
<li>Add: support for running the tests using @aredridel&rsquo;s <a href="https://npmjs.org/package/html5">html5</a> parser, as a prelude toward maybe eventually making this the default and fixing various parsing bugs.</li>
</ul>

<h2 id="0-3-1-hotfix">0.3.1 (hotfix)</h2>

<ul>
<li>Fix: crashes when invalid selectors were present in stylesheets.</li>
</ul>

<h2 id="0-3-0">0.3.0</h2>

<ul>
<li>Fix: a real <code class="prettyprint">querySelector</code> implementation, courtesy of the nwmatcher project, solves many outstanding <code class="prettyprint">querySelector</code> bugs.</li>
<li>Add: <code class="prettyprint">matchesSelector</code>, again via nwmatcher.</li>
<li>Add: support for styles coming from <code class="prettyprint">&lt;style&gt;</code> and <code class="prettyprint">&lt;link rel=&quot;stylesheet&quot;&gt;</code> elements being applied to the results of <code class="prettyprint">window.getComputedStyle</code>. (chad3814)</li>
<li>Add: basic implementation of <code class="prettyprint">focus()</code> and <code class="prettyprint">blur()</code> methods on appropriate elements. More work remains.</li>
<li>Fix: script filenames containing spaces will now work when passed to <code class="prettyprint">jsdom.env</code>. (TomNomNom)</li>
<li>Fix: elements with IDs <code class="prettyprint">toString</code>, <code class="prettyprint">hasOwnProperty</code>, etc. could cause lots of problems.</li>
<li>Change: A window&rsquo;s <code class="prettyprint">load</code> event always fires asynchronously now, even if no external resources are necessary.</li>
<li>Change: turning off mutation events is not supported, since doing so breaks external-resource fetching.</li>
</ul>

<h2 id="0-2-19">0.2.19</h2>

<ul>
<li>Fix: URL resolution was broken on pages that included <code class="prettyprint">href</code>-less <code class="prettyprint">&lt;base&gt;</code> tags.</li>
<li>Fix: avoid putting <code class="prettyprint">attr</code> in the global scope when using node-canvas. (starsquare)</li>
<li>Add: New <code class="prettyprint">SkipExternalResources</code> feature accepts a regular expression. (fgalassi)</li>
</ul>

<h2 id="0-2-18">0.2.18</h2>

<ul>
<li>Un-revert: cssstyle has fixed its memory problems, so we get back accurate <code class="prettyprint">cssText</code> and <code class="prettyprint">style</code> properties again.</li>
</ul>

<h2 id="0-2-17-hotfix">0.2.17 (hotfix)</h2>

<ul>
<li>Revert: had to revert the use of the cssstyle package. <code class="prettyprint">cssText</code> and <code class="prettyprint">style</code> properties are no longer as accurate.</li>
<li>Fix: cssstyle was causing out-of-memory errors on some larger real-world pages, e.g. reddit.com.</li>
</ul>

<h2 id="0-2-16">0.2.16</h2>

<ul>
<li>Update: Sizzle version updated to circa September 2012.</li>
<li>Fix: when setting a text node&rsquo;s value to a falsy value, convert it to a string instead of coercing it to <code class="prettyprint">&quot;&quot;</code>.</li>
<li>Fix: Use the cssstyle package for <code class="prettyprint">CSSStyleDeclaration</code>, giving much more accurate <code class="prettyprint">cssText</code> and <code class="prettyprint">style</code> properties on all elements. (chad3814)</li>
<li>Fix: the <code class="prettyprint">checked</code> property on checkboxes and radiobuttons now reflects the attribute correctly.</li>
<li>Fix: <code class="prettyprint">HTMLOptionElement</code>&rsquo;s <code class="prettyprint">text</code> property should return the option&rsquo;s text, not its value.</li>
<li>Fix: make the <code class="prettyprint">name</code> property only exist on certain specific tags, and accurately reflect the corresponding <code class="prettyprint">name</code> attribute.</li>
<li>Fix: don&rsquo;t format <code class="prettyprint">outerHTML</code> (especially important for <code class="prettyprint">&lt;pre&gt;</code> elements).</li>
<li>Fix: remove the <code class="prettyprint">value</code> property from <code class="prettyprint">Text</code> instances (e.g. text nodes).</li>
<li>Fix: don&rsquo;t break in the presence of a <code class="prettyprint">String.prototype.normalize</code> method, like that of sugar.js.</li>
<li>Fix: include level3/xpath correctly.</li>
<li>Fix: many more tests passing, especially related to file:/// URLs on Windows. Tests can now be run with <code class="prettyprint">npm test</code>.</li>
</ul>

<h2 id="0-2-15">0.2.15</h2>

<ul>
<li>Fix: make sure that doctypes don&rsquo;t get set as the documentElement (Aria Stewart)</li>
<li>Add: HTTP proxy support for jsdom.env (Eugene Ware)</li>
<li>Add: .hostname and .pathname properties to Anchor elements to comply with WHATWG standard (Avi Deitcher)</li>
<li>Fix: Only decode HTML entities in text when not inside a <code class="prettyprint">&lt;script&gt;</code> or <code class="prettyprint">&lt;style&gt;</code> tag. (Andreas Lind Petersen)</li>
<li>Fix: HTMLSelectElement single selection implemented its type incorrectly as &lsquo;select&rsquo; instead of &#39;select-one&rsquo; (John Roberts)</li>
</ul>

<h2 id="0-2-14">0.2.14</h2>

<ul>
<li>Fix: when serializing single tags use &rsquo; /&gt;&rsquo; instead of &rsquo;/&gt;&rsquo; (kapouer)</li>
<li>Fix: support for contextify simulation using vm.runInContext (trodrigues)</li>
<li>Fix: allow jsdom.env&rsquo;s config.html to handle file paths which contain spaces (shinuza)</li>
<li>Fix: Isolate QuerySelector from prototype (Nao Iizuka)</li>
<li>Add: setting textContent to &ldquo; or clears children (Jason Davies)</li>
<li>Fix: jsdom.env swallows exceptions that occur in the callback (Xavi)</li>
</ul>

<h2 id="0-2-13">0.2.13</h2>

<ul>
<li>Fix: remove unused style property which was causing explosions in 0.2.12 and node 0.4.7</li>
</ul>

<h2 id="0-2-12">0.2.12</h2>

<ul>
<li>Fix: do not include gmon.out/v8.log/tests in npm distribution</li>
</ul>

<h2 id="0-2-11">0.2.11</h2>

<ul>
<li>Add: allow non-unique element ids (Avi Deitcher)</li>
<li>Fix: make contexify an optional dependency (Isaac Schlueter)</li>
<li>Add: scripts injected by jsdom are now marked with a &#39;jsdom&rsquo; class for serialization&rsquo;s sake (Peter Lyons)</li>
<li>Fix: definition for ldquo entity (Andrew Morton)</li>
<li>Fix: access NamedNodeMap items via property (Brian McDaniel)</li>
<li>Add: upgrade sizzle from 1.0 to <a href="https://github.com/jquery/sizzle/commit/fe2f618106bb76857b229113d6d11653707d0b22">fe2f6181</a> which is roughly 1.5.1</li>
<li>Add: documentation now includes <code class="prettyprint">jsdom.level(x, &#39;feature&#39;)</code></li>
<li>Fix: make <code class="prettyprint">toArray</code> and <code class="prettyprint">item</code> on <code class="prettyprint">NodeList</code> objects non-enumerable properties</li>
<li>Add: a reference to <code class="prettyprint">window.close</code> in the readme</li>
<li>Fix: Major performance boost (Felix Gnass)</li>
<li>Fix: Using querySelector <code class="prettyprint">:not()</code> throws a <code class="prettyprint">ReferenceError</code> (Felix Gnass)</li>
</ul>

<h2 id="0-2-10">0.2.10</h2>

<ul>
<li>Fix: problems with lax dependency versions</li>
<li>Fix: CSSOM constructors are hung off of the dom (Brian McDaniel)</li>
<li>Fix: move away from deprecated &#39;sys&rsquo; module</li>
<li>Fix: attribute event handlers on bubbling path aren&rsquo;t called (Brian McDaniel)</li>
<li>Fix: setting textarea.value to markup should not be parsed (Andreas Lind Petersen)</li>
<li>Fix: content of script tags should not be escaped (Ken Sternberg)</li>
<li>Fix: DocumentFeatures for iframes with no src attribute. (Brian McDaniel) Closes #355</li>
<li>Fix: &#39;trigger&rsquo; to &#39;raise&rsquo; to be a bit more descriptive</li>
<li>Fix: When <code class="prettyprint">ProcessExternalResources[&#39;script&#39;]</code> is disabled, do <em>not</em> run inline event handlers. #355</li>
<li>Add: verbose flag to test runner (to show tests as they are running and finishing)</li>
</ul>

<h2 id="0-2-9">0.2.9</h2>

<ul>
<li>Fix: ensure features are properly reset after a jsdom.env invocation. Closes #239</li>
<li>Fix: ReferenceError in the scanForImportRules helper function</li>
<li>Fix: bug in appendHtmlToElement with HTML5 parser (Brian McDaniel)</li>
<li>Add: jsonp support (lheiskan)</li>
<li>Fix: for setting script element&rsquo;s text property (Brian McDaniel)</li>
<li>Fix: for jsdom.env src bug</li>
<li>Add: test for jsdom.env src bug (multiple done calls)</li>
<li>Fix: NodeList properties should enumerate like arrays (Felix Gnass)</li>
<li>Fix: when downloading a file, include the url.search in file path</li>
<li>Add: test for making a jsonp request with jquery from jsdom window</li>
<li>Add: test case for issue #338</li>
<li>Fix: double load behavior when mixing jsdom.env&rsquo;s <code class="prettyprint">scripts</code> and <code class="prettyprint">src</code> properties (cjroebuck)</li>
</ul>

<h2 id="0-2-8-hotfix">0.2.8 (hotfix)</h2>

<ul>
<li>Fix: inline event handlers are ignored by everything except for the javascript context</li>
</ul>

<h2 id="0-2-7-hotfix">0.2.7 (hotfix)</h2>

<ul>
<li>Fix stylesheet loading</li>
</ul>

<h2 id="0-2-6">0.2.6</h2>

<ul>
<li>Add: support for window.location.search and document.cookie (Derek Lindahl)</li>
<li>Add: jsdom.env now has a document configuation option which allows users to change the referer of the document (Derek Lindahl)</li>
<li>Fix: allow users to use different jsdom levels in the same process (sinegar)</li>
<li>Fix: removeAttributeNS no longer has a return value (Jason Davies)</li>
<li>Add: support for encoding/decoding all html entities from html4/5 (papandreou)</li>
<li>Add: jsdom.env() accepts the same features object seen in jsdom.jsdom and friends</li>
</ul>

<h2 id="0-2-5">0.2.5</h2>

<ul>
<li>Fix: serialize special characters in Element.innerHTML/Element.attributes like a grade A browser (Jason Priestley)</li>
<li>Fix: ensure Element.getElementById only returns elements that are attached to the document</li>
<li>Fix: ensure an Element&rsquo;s id is updated when changing the nodeValue of the &#39;id&rsquo; attribute (Felix Gnass)</li>
<li>Add: stacktrace to error reporter (Josh Marshall)</li>
<li>Fix: events now bubble up to the window (Jason Davies)</li>
<li>Add: initial window.location.hash support (Josh Marshall)</li>
<li>Add: Node#insertBefore should do nothing when both params are the same node (Jason Davies)</li>
<li>Add: fixes for DOMAttrModified mutation events (Felix Gnass)</li>
</ul>

<h2 id="0-2-4">0.2.4</h2>

<ul>
<li>Fix: adding script to invalid/incomplete dom (document.documentElement) now catches the error and passes it in the <code class="prettyprint">.env</code> callback (Gregory Tomlinson)</li>
<li>Cleanup: trigger and html tests</li>
<li>Add: support for inline event handlers (ie: <code class="prettyprint">&lt;div onclick=&#39;some.horrible.string()&#39;&gt;</code>) (Brian McDaniel)</li>
<li>Fix: script loading over https (Brian McDaniel) #280</li>
<li>Add: using style.setProperty updates the style attribute (Jimmy Mabey).</li>
<li>Add: invalid markup is reported as an error and attached to the associated element and document</li>
<li>Fix: crash when setChild() failes to create new DOM element (John Hurliman)</li>
<li>Added test for issue #287.</li>
<li>Added support for inline event handlers.</li>
<li>Moved frame tests to test/window/frame.js and cleaned up formatting.</li>
<li>Moved script execution tests to test/window/script.js.</li>
<li>Fix a crash when setChild() fails to create a new DOM element</li>
<li>Override CSSOM to update style attribute</li>
</ul>

<h2 id="0-2-3">0.2.3</h2>

<ul>
<li>Fix: segfault due to window being garbage collected prematurely
NOTE: you must manually close the window to free memory (window.close())</li>
</ul>

<h2 id="0-2-2">0.2.2</h2>

<ul>
<li>Switch to Contextify to manage the window&rsquo;s script execution.</li>
<li>Fix: allow nodelists to have a length of 0 and toArray to return an empty array</li>
<li>Fix: style serialization; issues #230 and #259</li>
<li>Fix: Incomplete DOCTYPE causes JavaScript error</li>
<li>Fix: indentation, removed outdated debug code and trailing whitespace.</li>
<li>Prevent JavaScript error when parsing incomplete <code class="prettyprint">&lt;!DOCTYPE&gt;</code>. Closes #259.</li>
<li>Adding a test from brianmcd that ensures that setTimeout callbacks execute in the context of the window</li>
<li>Fixes issue 250: make <code class="prettyprint">document.parentWindow === window</code> work</li>
<li>Added test to ensure that timer callbacks execute in the window context.</li>
<li>Fixes 2 issues in ResourceQueue</li>
<li>Make frame/iframe load/process scripts if the parent has the features enabled</li>
</ul>

<h2 id="0-2-1">0.2.1</h2>

<ul>
<li>Javascript execution fixes [#248, #163, #179]</li>
<li>XPath (Yonathan and Daniel Cassidy)</li>
<li>Start of cssom integration (Yonathan)</li>
<li>Conversion of tests to nodeunit! (Martin Davis)</li>
<li>Added sizzle tests, only failing 3/15</li>
<li>Set the title node&rsquo;s textContent rather than its innerHTML #242.  (Andreas Lind Petersen)</li>
<li>The textContent getter now walks the DOM and extract the text properly. (Andreas Lind Petersen)</li>
<li>Empty scripts won&rsquo;t cause jsdom.env to hang #172 (Karuna Sagar)</li>
<li>Every document has either a body or a frameset #82. (Karuna Sagar)</li>
<li>Added the ability to grab a level by string + feature. ie: jsdom.level(2, &#39;html&rsquo;) (Aria Stewart)</li>
<li>Cleaned up htmlencoding and fixed character (de)entification #147, #177 (Andreas Lind Petersen)</li>
<li>htmlencoding.HTMLDecode: Fixed decoding of <code class="prettyprint">&amp;lt;</code>, <code class="prettyprint">&amp;gt;</code>, <code class="prettyprint">&amp;amp;</code>, and <code class="prettyprint">&amp;apos;</code>. Closes #147 and #177.</li>
<li>Require dom level as a string or object. (Aria Stewart)</li>
<li>JS errors ar triggered on the script element, not document. (Yonathan)</li>
<li>Added configuration property &#39;headers&rsquo; for HTTP request headers. (antonj)</li>
<li>Attr.specified is readonly - Karuna Sagar</li>
<li>Removed return value from setAttributeNS() #207 (Karuna Sagar)</li>
<li>Pass the correct script filename to runInContext. (robin)</li>
<li>Add http referrer support for the download() function. (Robin)</li>
<li>First attempt at fixing the horrible memory leak via window.stopTimers() (d-ash)</li>
<li>Use vm instead of evals binding (d-ash)</li>
<li>Add a way to set the encoding of the jsdom.env html request.</li>
<li>Fixed various typos/lint problems (d-ash)</li>
<li>The first parameter download is now the object returned by URL.parse(). (Robin)</li>
<li>Fixed serialization of elements with a style attribute.</li>
<li>Added src config option to jsdom.env() (Jerry Sievert)</li>
<li>Removed dead code from getNamedItemNS() (Karuna Sagar)</li>
<li>Changes to language/javascript so jsdom would work on v0.5.0-pre (Gord Tanner)</li>
<li>Correct spelling of &quot;Hierarchy request error&rdquo; (Daniel Cassidy)</li>
<li>Node and Exception type constants are available in all levels. (Daniel Cassidy)</li>
<li>Use \n instead of \r\n during serialization</li>
<li>Fixed auto-insertion of body/html tags  (Adrian Makowski)</li>
<li>Adopt unowned nodes when added to the tree. (Aria Stewart)</li>
<li>Fix the selected and defaultSelected fields of <code class="prettyprint">option</code> element. - Yonathan</li>
<li>Fix: EventTarget.getListeners() now returns a shallow copy so that listeners can be safely removed while an event is being dispatched. (Felix Gnass)</li>
<li>Added removeEventListener() to DOMWindow (Felix Gnass)</li>
<li>Added the ability to pre-load scripts for jsdom.env() (Jerry Sievert)</li>
<li>Mutation event tests/fixes (Felix Gnass)</li>
<li>Changed HTML serialization code to (optionally) pretty print while traversing the tree instead of doing a regexp-based postprocessing. (Andreas Lind Petersen)</li>
<li>Relative and absolute urls now work as expected</li>
<li>setNamedItem no longer sets Node.parentNode #153 (Karuna Sagar)</li>
<li>Added missing semicolon after entity name - Felix Gnass</li>
<li>Added NodeList#indexOf implementation/tests (Karuna Sagar)</li>
<li>resourceLoader.download now works correctly with https and redirects (waslogic)</li>
<li>Scheme-less URLs default to the current protocol #87 (Alexander Flatter)</li>
<li>Simplification the prevSibling(), appendChild(), insertBefore() and replaceChild() code (Karuna Sagar)</li>
<li>Javascript errors use core.Node.trigger (Alexander Flatter)</li>
<li>Add core.Document.trigger in level1/core and level2/events; Make DOMWindow.console use it (Alexander Flatter)</li>
<li>Resource resolver fixes (Alexander Flatter)</li>
<li>Fix serialization of doctypes with new lines #148 (Karuna Sagar)</li>
<li>Child nodes are calculated immediately instead of after .length is called #169, #171, #176 (Karuna Sagar)</li>
</ul>
