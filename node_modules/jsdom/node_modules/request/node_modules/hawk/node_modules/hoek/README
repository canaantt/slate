<p><img alt="hoek Logo" src="https://raw.github.com/hapijs/hoek/master/images/hoek.png" /></p>

<p>Utility methods for the hapi ecosystem. This module is not intended to solve every problem for everyone, but rather as a central place to store hapi-specific methods. If you&rsquo;re looking for a general purpose utility module, check out <a href="https://github.com/lodash/lodash">lodash</a> or <a href="https://github.com/jashkenas/underscore">underscore</a>.</p>

<p><a href="http://travis-ci.org/hapijs/hoek"><img alt="Build Status" src="https://secure.travis-ci.org/hapijs/hoek.svg" /></a></p>

<p>Lead Maintainer: <a href="https://github.com/nlf">Nathan LaFreniere</a></p>

<h1 id="table-of-contents">Table of Contents</h1>

<ul>
<li><a title="Introduction" href="#introduction">Introduction</a></li>
<li><a title="Object" href="#object">Object</a>

<ul>
<li><a title="clone" href="#cloneobj">clone</a></li>
<li><a title="cloneWithShallow" href="#clonewithshallowobj-keys">cloneWithShallow</a></li>
<li><a title="merge" href="#mergetarget-source-isnulloverride-ismergearrays">merge</a></li>
<li><a title="applyToDefaults" href="#applytodefaultsdefaults-options-isnulloverride">applyToDefaults</a></li>
<li><a title="applyToDefaultsWithShallow" href="#applytodefaultswithshallowdefaults-options-keys">applyToDefaultsWithShallow</a></li>
<li><a title="deepEqual" href="#deepequala-b">deepEqual</a></li>
<li><a title="unique" href="#uniquearray-key">unique</a></li>
<li><a title="mapToObject" href="#maptoobjectarray-key">mapToObject</a></li>
<li><a title="intersect" href="#intersectarray1-array2">intersect</a></li>
<li><a title="contain" href="#containref-values-options">contain</a></li>
<li><a title="flatten" href="#flattenarray-target">flatten</a></li>
<li><a title="reach" href="#reachobj-chain-options">reach</a></li>
<li><a title="reachTemplate" href="#reachtemplateobj-template-options">reachTemplate</a></li>
<li><a title="transform" href="#transformobj-transform-options">transform</a></li>
<li><a title="shallow" href="#shallowobj">shallow</a></li>
<li><a title="stringify" href="#stringifyobj">stringify</a></li>
</ul></li>
<li><a title="Timer" href="#timer">Timer</a></li>
<li><a title="Bench" href="#bench">Bench</a></li>
<li><a title="Binary Encoding/Decoding" href="#binary-encodingdecoding">Binary Encoding/Decoding</a>

<ul>
<li><a title="binary64urlEncode" href="#base64urlencodevalue">base64urlEncode</a></li>
<li><a title="binary64urlDecode" href="#base64urldecodevalue">base64urlDecode</a></li>
</ul></li>
<li><a title="Escaping Characters" href="#escaping-characters">Escaping Characters</a>

<ul>
<li><a title="escapeHtml" href="#escapehtmlstring">escapeHtml</a></li>
<li><a title="escapeHeaderAttribute" href="#escapeheaderattributeattribute">escapeHeaderAttribute</a></li>
<li><a title="escapeRegex" href="#escaperegexstring">escapeRegex</a></li>
</ul></li>
<li><a title="Errors" href="#errors">Errors</a>

<ul>
<li><a title="assert" href="#assertcondition-message">assert</a></li>
<li><a title="abort" href="#abortmessage">abort</a></li>
<li><a title="displayStack" href="#displaystackslice">displayStack</a></li>
<li><a title="callStack" href="#callstackslice">callStack</a></li>
</ul></li>
<li><a title="Function" href="#function">Function</a>

<ul>
<li><a title="nextTick" href="#nexttickfn">nextTick</a></li>
<li><a title="once" href="#oncefn">once</a></li>
<li><a title="ignore" href="#ignore">ignore</a></li>
</ul></li>
<li><a title="Miscellaneous" href="#miscellaneous">Miscellaneous</a>

<ul>
<li><a title="uniqueFilename" href="#uniquefilenamepath-extension">uniqueFilename</a></li>
<li><a title="isAbsolutePath" href="#isabsolutepathpath-platform">isAbsolutePath</a></li>
<li><a title="isInteger" href="#isintegervalue">isInteger</a></li>
</ul></li>
</ul>

<h1 id="introduction">Introduction</h1>

<p>The <em>Hoek</em> library contains some common functions used within the hapi ecosystem. It comes with useful methods for Arrays (clone, merge, applyToDefaults), Objects (removeKeys, copy), Asserting and more.</p>

<p>For example, to use Hoek to set configuration with default options:
&ldquo;`javascript
var Hoek = require(&lsquo;hoek&rsquo;);</p>

<p>var default = {url : &quot;www.github.com&rdquo;, port : &ldquo;8000&rdquo;, debug : true};</p>

<p>var config = Hoek.applyToDefaults(default, {port : &ldquo;3000&rdquo;, admin : true});</p>

<p>// In this case, config would be { url: &#39;www.github.com&rsquo;, port: &#39;3000&rsquo;, debug: true, admin: true }
&ldquo;`</p>

<p>Under each of the sections (such as Array), there are subsections which correspond to Hoek methods. Each subsection will explain how to use the corresponding method. In each js excerpt below, the <code class="prettyprint">var Hoek = require(&#39;hoek&#39;);</code> is omitted for brevity.</p>

<h2 id="object">Object</h2>

<p>Hoek provides several helpful methods for objects and arrays.</p>

<h3 id="clone-obj">clone(obj)</h3>

<p>This method is used to clone an object or an array. A <em>deep copy</em> is made (duplicates everything, including values that are objects, as well as non-enumerable properties).</p>
<pre class="highlight javascript"><code>
<span class="kd">var</span> <span class="nx">nestedObj</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">w</span><span class="p">:</span> <span class="sr">/^something$/ig</span><span class="p">,</span>
        <span class="na">x</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">a</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
            <span class="na">b</span><span class="p">:</span> <span class="mi">123456</span><span class="p">,</span>
            <span class="na">c</span><span class="p">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">()</span>
        <span class="p">},</span>
        <span class="na">y</span><span class="p">:</span> <span class="s1">'y'</span><span class="p">,</span>
        <span class="na">z</span><span class="p">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">()</span>
    <span class="p">};</span>

<span class="kd">var</span> <span class="nx">copy</span> <span class="o">=</span> <span class="nx">Hoek</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="nx">nestedObj</span><span class="p">);</span>

<span class="nx">copy</span><span class="p">.</span><span class="nx">x</span><span class="p">.</span><span class="nx">b</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">copy</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span>        <span class="c1">// results in 'y'</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">nestedObj</span><span class="p">.</span><span class="nx">x</span><span class="p">.</span><span class="nx">b</span><span class="p">);</span> <span class="c1">// results in 123456</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">copy</span><span class="p">.</span><span class="nx">x</span><span class="p">.</span><span class="nx">b</span><span class="p">);</span>      <span class="c1">// results in 100</span>
</code></pre>

<h3 id="clonewithshallow-obj-keys">cloneWithShallow(obj, keys)</h3>

<p>keys is an array of key names to shallow copy</p>

<p>This method is also used to clone an object or array, however any keys listed in the <code class="prettyprint">keys</code> array are shallow copied while those not listed are deep copied.</p>
<pre class="highlight javascript"><code>
<span class="kd">var</span> <span class="nx">nestedObj</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">w</span><span class="p">:</span> <span class="sr">/^something$/ig</span><span class="p">,</span>
        <span class="na">x</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">a</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
            <span class="na">b</span><span class="p">:</span> <span class="mi">123456</span><span class="p">,</span>
            <span class="na">c</span><span class="p">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">()</span>
        <span class="p">},</span>
        <span class="na">y</span><span class="p">:</span> <span class="s1">'y'</span><span class="p">,</span>
        <span class="na">z</span><span class="p">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">()</span>
    <span class="p">};</span>

<span class="kd">var</span> <span class="nx">copy</span> <span class="o">=</span> <span class="nx">Hoek</span><span class="p">.</span><span class="nx">cloneWithShallow</span><span class="p">(</span><span class="nx">nestedObj</span><span class="p">,</span> <span class="p">[</span><span class="s1">'x'</span><span class="p">]);</span>

<span class="nx">copy</span><span class="p">.</span><span class="nx">x</span><span class="p">.</span><span class="nx">b</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">copy</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span>        <span class="c1">// results in 'y'</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">nestedObj</span><span class="p">.</span><span class="nx">x</span><span class="p">.</span><span class="nx">b</span><span class="p">);</span> <span class="c1">// results in 100</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">copy</span><span class="p">.</span><span class="nx">x</span><span class="p">.</span><span class="nx">b</span><span class="p">);</span>      <span class="c1">// results in 100</span>
</code></pre>

<h3 id="merge-target-source-isnulloverride-ismergearrays">merge(target, source, isNullOverride, isMergeArrays)</h3>

<p>isNullOverride, isMergeArrays default to true</p>

<p>Merge all the properties of source into target, source wins in conflict, and by default null and undefined from source are applied.
Merge is destructive where the target is modified. For non destructive merge, use <code class="prettyprint">applyToDefaults</code>.</p>
<pre class="highlight javascript"><code>
<span class="kd">var</span> <span class="nx">target</span> <span class="o">=</span> <span class="p">{</span><span class="na">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">b</span> <span class="p">:</span> <span class="mi">2</span><span class="p">};</span>
<span class="kd">var</span> <span class="nx">source</span> <span class="o">=</span> <span class="p">{</span><span class="na">a</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="na">c</span><span class="p">:</span> <span class="mi">5</span><span class="p">};</span>
<span class="kd">var</span> <span class="nx">source2</span> <span class="o">=</span> <span class="p">{</span><span class="na">a</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span> <span class="na">c</span><span class="p">:</span> <span class="mi">5</span><span class="p">};</span>

<span class="nx">Hoek</span><span class="p">.</span><span class="nx">merge</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">source</span><span class="p">);</span>         <span class="c1">// results in {a: 0, b: 2, c: 5}</span>
<span class="nx">Hoek</span><span class="p">.</span><span class="nx">merge</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">source2</span><span class="p">);</span>        <span class="c1">// results in {a: null, b: 2, c: 5}</span>
<span class="nx">Hoek</span><span class="p">.</span><span class="nx">merge</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">source2</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span> <span class="c1">// results in {a: 1, b: 2, c: 5}</span>

<span class="kd">var</span> <span class="nx">targetArray</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">sourceArray</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>

<span class="nx">Hoek</span><span class="p">.</span><span class="nx">merge</span><span class="p">(</span><span class="nx">targetArray</span><span class="p">,</span> <span class="nx">sourceArray</span><span class="p">);</span>              <span class="c1">// results in [1, 2, 3, 4, 5]</span>
<span class="nx">Hoek</span><span class="p">.</span><span class="nx">merge</span><span class="p">(</span><span class="nx">targetArray</span><span class="p">,</span> <span class="nx">sourceArray</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span> <span class="c1">// results in [4, 5]</span>
</code></pre>

<h3 id="applytodefaults-defaults-options-isnulloverride">applyToDefaults(defaults, options, isNullOverride)</h3>

<p>isNullOverride defaults to false</p>

<p>Apply options to a copy of the defaults</p>
<pre class="highlight javascript"><code>
<span class="kd">var</span> <span class="nx">defaults</span> <span class="o">=</span> <span class="p">{</span> <span class="na">host</span><span class="p">:</span> <span class="s2">"localhost"</span><span class="p">,</span> <span class="na">port</span><span class="p">:</span> <span class="mi">8000</span> <span class="p">};</span>
<span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span> <span class="na">port</span><span class="p">:</span> <span class="mi">8080</span> <span class="p">};</span>

<span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">Hoek</span><span class="p">.</span><span class="nx">applyToDefaults</span><span class="p">(</span><span class="nx">defaults</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span> <span class="c1">// results in { host: "localhost", port: 8080 }</span>
</code></pre>

<p>Apply options with a null value to a copy of the defaults</p>
<pre class="highlight javascript"><code>
<span class="kd">var</span> <span class="nx">defaults</span> <span class="o">=</span> <span class="p">{</span> <span class="na">host</span><span class="p">:</span> <span class="s2">"localhost"</span><span class="p">,</span> <span class="na">port</span><span class="p">:</span> <span class="mi">8000</span> <span class="p">};</span>
<span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span> <span class="na">host</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span> <span class="na">port</span><span class="p">:</span> <span class="mi">8080</span> <span class="p">};</span>

<span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">Hoek</span><span class="p">.</span><span class="nx">applyToDefaults</span><span class="p">(</span><span class="nx">defaults</span><span class="p">,</span> <span class="nx">options</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span> <span class="c1">// results in { host: null, port: 8080 }</span>
</code></pre>

<h3 id="applytodefaultswithshallow-defaults-options-keys">applyToDefaultsWithShallow(defaults, options, keys)</h3>

<p>keys is an array of key names to shallow copy</p>

<p>Apply options to a copy of the defaults. Keys specified in the last parameter are shallow copied from options instead of merged.</p>
<pre class="highlight javascript"><code>
<span class="kd">var</span> <span class="nx">defaults</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">server</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">host</span><span class="p">:</span> <span class="s2">"localhost"</span><span class="p">,</span>
            <span class="na">port</span><span class="p">:</span> <span class="mi">8000</span>
        <span class="p">},</span>
        <span class="na">name</span><span class="p">:</span> <span class="s1">'example'</span>
    <span class="p">};</span>

<span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span> <span class="na">server</span><span class="p">:</span> <span class="p">{</span> <span class="na">port</span><span class="p">:</span> <span class="mi">8080</span> <span class="p">}</span> <span class="p">};</span>

<span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">Hoek</span><span class="p">.</span><span class="nx">applyToDefaultsWithShallow</span><span class="p">(</span><span class="nx">defaults</span><span class="p">,</span> <span class="nx">options</span><span class="p">,</span> <span class="p">[</span><span class="s1">'server'</span><span class="p">]);</span> <span class="c1">// results in { server: { port: 8080 }, name: 'example' }</span>
</code></pre>

<h3 id="deepequal-b-a-options">deepEqual(b, a, [options])</h3>

<p>Performs a deep comparison of the two values including support for circular dependencies, prototype, and properties. To skip prototype comparisons, use <code class="prettyprint">options.prototype = false</code></p>
<pre class="highlight javascript"><code><span class="nx">Hoek</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">({</span> <span class="na">a</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="na">b</span><span class="p">:</span> <span class="s1">'string'</span><span class="p">,</span> <span class="na">c</span><span class="p">:</span> <span class="p">{</span> <span class="na">d</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}</span> <span class="p">},</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="na">b</span><span class="p">:</span> <span class="s1">'string'</span><span class="p">,</span> <span class="na">c</span><span class="p">:</span> <span class="p">{</span> <span class="na">d</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}</span> <span class="p">});</span> <span class="c1">//results in true</span>
<span class="nx">Hoek</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="kc">null</span><span class="p">),</span> <span class="p">{},</span> <span class="p">{</span> <span class="na">prototype</span><span class="p">:</span> <span class="kc">false</span> <span class="p">});</span> <span class="c1">//results in true</span>
<span class="nx">Hoek</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="kc">null</span><span class="p">),</span> <span class="p">{});</span> <span class="c1">//results in false</span>
</code></pre>

<h3 id="unique-array-key">unique(array, key)</h3>

<p>Remove duplicate items from Array</p>
<pre class="highlight javascript"><code>
<span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">];</span>

<span class="kd">var</span> <span class="nx">newArray</span> <span class="o">=</span> <span class="nx">Hoek</span><span class="p">.</span><span class="nx">unique</span><span class="p">(</span><span class="nx">array</span><span class="p">);</span>    <span class="c1">// results in [1,2,3,4,5,6]</span>

<span class="nx">array</span> <span class="o">=</span> <span class="p">[{</span><span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="na">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">}];</span>

<span class="nx">newArray</span> <span class="o">=</span> <span class="nx">Hoek</span><span class="p">.</span><span class="nx">unique</span><span class="p">(</span><span class="nx">array</span><span class="p">,</span> <span class="s2">"id"</span><span class="p">);</span>  <span class="c1">// results in [{id: 1}, {id: 2}]</span>
</code></pre>

<h3 id="maptoobject-array-key">mapToObject(array, key)</h3>

<p>Convert an Array into an Object</p>
<pre class="highlight javascript"><code>
<span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">newObject</span> <span class="o">=</span> <span class="nx">Hoek</span><span class="p">.</span><span class="nx">mapToObject</span><span class="p">(</span><span class="nx">array</span><span class="p">);</span>   <span class="c1">// results in [{"1": true}, {"2": true}, {"3": true}]</span>

<span class="nx">array</span> <span class="o">=</span> <span class="p">[{</span><span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="na">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">}];</span>
<span class="nx">newObject</span> <span class="o">=</span> <span class="nx">Hoek</span><span class="p">.</span><span class="nx">mapToObject</span><span class="p">(</span><span class="nx">array</span><span class="p">,</span> <span class="s2">"id"</span><span class="p">);</span> <span class="c1">// results in [{"id": 1}, {"id": 2}]</span>
</code></pre>

<h3 id="intersect-array1-array2">intersect(array1, array2)</h3>

<p>Find the common unique items in two arrays</p>
<pre class="highlight javascript"><code>
<span class="kd">var</span> <span class="nx">array1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">array2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>

<span class="kd">var</span> <span class="nx">newArray</span> <span class="o">=</span> <span class="nx">Hoek</span><span class="p">.</span><span class="nx">intersect</span><span class="p">(</span><span class="nx">array1</span><span class="p">,</span> <span class="nx">array2</span><span class="p">);</span> <span class="c1">// results in [1]</span>
</code></pre>

<h3 id="contain-ref-values-options">contain(ref, values, [options])</h3>

<p>Tests if the reference value contains the provided values where:
- <code class="prettyprint">ref</code> - the reference string, array, or object.
- <code class="prettyprint">values</code> - a single or array of values to find within the <code class="prettyprint">ref</code> value. If <code class="prettyprint">ref</code> is an object, <code class="prettyprint">values</code> can be a key name,
  an array of key names, or an object with key-value pairs to compare.
- <code class="prettyprint">options</code> - an optional object with the following optional settings:
    - <code class="prettyprint">deep</code> - if <code class="prettyprint">true</code>, performed a deep comparison of the values.
    - <code class="prettyprint">once</code> - if <code class="prettyprint">true</code>, allows only one occurrence of each value.
    - <code class="prettyprint">only</code> - if <code class="prettyprint">true</code>, does not allow values not explicitly listed.
    - <code class="prettyprint">part</code> - if <code class="prettyprint">true</code>, allows partial match of the values (at least one must always match).</p>

<p>Note: comparing a string to overlapping values will result in failed comparison (e.g. <code class="prettyprint">contain(&#39;abc&#39;, [&#39;ab&#39;, &#39;bc&#39;])</code>).
Also, if an object key&rsquo;s value does not match the provided value, <code class="prettyprint">false</code> is returned even when <code class="prettyprint">part</code> is specified.</p>
<pre class="highlight javascript"><code><span class="nx">Hoek</span><span class="p">.</span><span class="nx">contain</span><span class="p">(</span><span class="s1">'aaa'</span><span class="p">,</span> <span class="s1">'a'</span><span class="p">,</span> <span class="p">{</span> <span class="na">only</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>                           <span class="c1">// true</span>
<span class="nx">Hoek</span><span class="p">.</span><span class="nx">contain</span><span class="p">([{</span> <span class="na">a</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}],</span> <span class="p">[{</span> <span class="na">a</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}],</span> <span class="p">{</span> <span class="na">deep</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>               <span class="c1">// true</span>
<span class="nx">Hoek</span><span class="p">.</span><span class="nx">contain</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">{</span> <span class="na">once</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>                    <span class="c1">// false</span>
<span class="nx">Hoek</span><span class="p">.</span><span class="nx">contain</span><span class="p">({</span> <span class="na">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">b</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="na">c</span><span class="p">:</span> <span class="mi">3</span> <span class="p">},</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">d</span><span class="p">:</span> <span class="mi">4</span> <span class="p">},</span> <span class="p">{</span> <span class="na">part</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span> <span class="c1">// true</span>
</code></pre>

<h3 id="flatten-array-target">flatten(array, [target])</h3>

<p>Flatten an array</p>
<pre class="highlight javascript"><code>
<span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]];</span>

<span class="kd">var</span> <span class="nx">flattenedArray</span> <span class="o">=</span> <span class="nx">Hoek</span><span class="p">.</span><span class="nx">flatten</span><span class="p">(</span><span class="nx">array</span><span class="p">);</span> <span class="c1">// results in [1, 2, 3]</span>

<span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]];</span>
<span class="nx">target</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="p">[</span><span class="mi">5</span><span class="p">]];</span>

<span class="nx">flattenedArray</span> <span class="o">=</span> <span class="nx">Hoek</span><span class="p">.</span><span class="nx">flatten</span><span class="p">(</span><span class="nx">array</span><span class="p">,</span> <span class="nx">target</span><span class="p">);</span> <span class="c1">// results in [4, [5], 1, 2, 3]</span>
</code></pre>

<h3 id="reach-obj-chain-options">reach(obj, chain, [options])</h3>

<p>Converts an object key chain string to reference</p>

<ul>
<li><code class="prettyprint">options</code> - optional settings

<ul>
<li><code class="prettyprint">separator</code> - string to split chain path on, defaults to &rsquo;.&rsquo;</li>
<li><code class="prettyprint">default</code> - value to return if the path or value is not present, default is <code class="prettyprint">undefined</code></li>
<li><code class="prettyprint">strict</code> - if <code class="prettyprint">true</code>, will throw an error on missing member, default is <code class="prettyprint">false</code></li>
<li><code class="prettyprint">functions</code> - if <code class="prettyprint">true</code> allow traversing functions for properties. <code class="prettyprint">false</code> will throw an error if a function is part of the chain.</li>
</ul></li>
</ul>

<p>A chain including negative numbers will work like negative indices on an
array.</p>

<p>If chain is <code class="prettyprint">null</code>, <code class="prettyprint">undefined</code> or <code class="prettyprint">false</code>, the object itself will be returned.</p>
<pre class="highlight javascript"><code>
<span class="kd">var</span> <span class="nx">chain</span> <span class="o">=</span> <span class="s1">'a.b.c'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="na">a</span> <span class="p">:</span> <span class="p">{</span><span class="na">b</span> <span class="p">:</span> <span class="p">{</span> <span class="na">c</span> <span class="p">:</span> <span class="mi">1</span><span class="p">}}};</span>

<span class="nx">Hoek</span><span class="p">.</span><span class="nx">reach</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">chain</span><span class="p">);</span> <span class="c1">// returns 1</span>

<span class="kd">var</span> <span class="nx">chain</span> <span class="o">=</span> <span class="s1">'a.b.-1'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="na">a</span> <span class="p">:</span> <span class="p">{</span><span class="na">b</span> <span class="p">:</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">]}};</span>

<span class="nx">Hoek</span><span class="p">.</span><span class="nx">reach</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">chain</span><span class="p">);</span> <span class="c1">// returns 6</span>
</code></pre>

<h3 id="reachtemplate-obj-template-options">reachTemplate(obj, template, [options])</h3>

<p>Replaces string parameters (<code class="prettyprint">{name}</code>) with their corresponding object key values by applying the
(<code class="prettyprint">reach()</code>)[#reachobj-chain-options] method where:</p>

<ul>
<li><code class="prettyprint">obj</code> - the context object used for key lookup.</li>
<li><code class="prettyprint">template</code> - a string containing <code class="prettyprint">{}</code> parameters.</li>
<li><code class="prettyprint">options</code> - optional (<code class="prettyprint">reach()</code>)[#reachobj-chain-options] options.</li>
</ul>
<pre class="highlight javascript"><code>
<span class="kd">var</span> <span class="nx">chain</span> <span class="o">=</span> <span class="s1">'a.b.c'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="na">a</span> <span class="p">:</span> <span class="p">{</span><span class="na">b</span> <span class="p">:</span> <span class="p">{</span> <span class="na">c</span> <span class="p">:</span> <span class="mi">1</span><span class="p">}}};</span>

<span class="nx">Hoek</span><span class="p">.</span><span class="nx">reachTemplate</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="s1">'1+{a.b.c}=2'</span><span class="p">);</span> <span class="c1">// returns '1+1=2'</span>
</code></pre>

<h3 id="transform-obj-transform-options">transform(obj, transform, [options])</h3>

<p>Transforms an existing object into a new one based on the supplied <code class="prettyprint">obj</code> and <code class="prettyprint">transform</code> map. <code class="prettyprint">options</code> are the same as the <code class="prettyprint">reach</code> options. The first argument can also be an array of objects. In that case the method will return an array of transformed objects.</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">source</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">address</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">one</span><span class="p">:</span> <span class="s1">'123 main street'</span><span class="p">,</span>
        <span class="na">two</span><span class="p">:</span> <span class="s1">'PO Box 1234'</span>
    <span class="p">},</span>
    <span class="na">title</span><span class="p">:</span> <span class="s1">'Warehouse'</span><span class="p">,</span>
    <span class="na">state</span><span class="p">:</span> <span class="s1">'CA'</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">Hoek</span><span class="p">.</span><span class="nx">transform</span><span class="p">(</span><span class="nx">source</span><span class="p">,</span> <span class="p">{</span>
    <span class="s1">'person.address.lineOne'</span><span class="p">:</span> <span class="s1">'address.one'</span><span class="p">,</span>
    <span class="s1">'person.address.lineTwo'</span><span class="p">:</span> <span class="s1">'address.two'</span><span class="p">,</span>
    <span class="s1">'title'</span><span class="p">:</span> <span class="s1">'title'</span><span class="p">,</span>
    <span class="s1">'person.address.region'</span><span class="p">:</span> <span class="s1">'state'</span>
<span class="p">});</span>
<span class="c1">// Results in</span>
<span class="c1">// {</span>
<span class="c1">//     person: {</span>
<span class="c1">//         address: {</span>
<span class="c1">//             lineOne: '123 main street',</span>
<span class="c1">//             lineTwo: 'PO Box 1234',</span>
<span class="c1">//             region: 'CA'</span>
<span class="c1">//         }</span>
<span class="c1">//     },</span>
<span class="c1">//     title: 'Warehouse'</span>
<span class="c1">// }</span>
</code></pre>

<h3 id="shallow-obj">shallow(obj)</h3>

<p>Performs a shallow copy by copying the references of all the top level children where:
- <code class="prettyprint">obj</code> - the object to be copied.</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">shallow</span> <span class="o">=</span> <span class="nx">Hoek</span><span class="p">.</span><span class="nx">shallow</span><span class="p">({</span> <span class="na">a</span><span class="p">:</span> <span class="p">{</span> <span class="na">b</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}</span> <span class="p">});</span>
</code></pre>

<h3 id="stringify-obj">stringify(obj)</h3>

<p>Converts an object to string using the built-in <code class="prettyprint">JSON.stringify()</code> method with the difference that any errors are caught
and reported back in the form of the returned string. Used as a shortcut for displaying information to the console (e.g. in
error message) without the need to worry about invalid conversion.</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">{};</span>
<span class="nx">a</span><span class="p">.</span><span class="nx">b</span> <span class="o">=</span> <span class="nx">a</span><span class="p">;</span>
<span class="nx">Hoek</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>      <span class="c1">// Returns '[Cannot display object: Converting circular structure to JSON]'</span>
</code></pre>

<h1 id="timer">Timer</h1>

<p>A Timer object. Initializing a new timer object sets the ts to the number of milliseconds elapsed since 1 January 1970 00:00:00 UTC.</p>
<pre class="highlight javascript"><code>
<span class="kd">var</span> <span class="nx">timerObj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Hoek</span><span class="p">.</span><span class="nx">Timer</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"Time is now: "</span> <span class="o">+</span> <span class="nx">timerObj</span><span class="p">.</span><span class="nx">ts</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"Elapsed time from initialization: "</span> <span class="o">+</span> <span class="nx">timerObj</span><span class="p">.</span><span class="nx">elapsed</span><span class="p">()</span> <span class="o">+</span> <span class="s1">'milliseconds'</span><span class="p">);</span>
</code></pre>

<h1 id="bench">Bench</h1>

<p>Same as Timer with the exception that <code class="prettyprint">ts</code> stores the internal node clock which is not related to <code class="prettyprint">Date.now()</code> and cannot be used to display
human-readable timestamps. More accurate for benchmarking or internal timers.</p>

<h1 id="binary-encoding-decoding">Binary Encoding/Decoding</h1>

<h3 id="base64urlencode-value">base64urlEncode(value)</h3>

<p>Encodes value in Base64 or URL encoding</p>

<h3 id="base64urldecode-value">base64urlDecode(value)</h3>

<p>Decodes data in Base64 or URL encoding.</p>

<h1 id="escaping-characters">Escaping Characters</h1>

<p>Hoek provides convenient methods for escaping html characters. The escaped characters are as followed:</p>
<pre class="highlight javascript"><code>
<span class="nx">internals</span><span class="p">.</span><span class="nx">htmlEscaped</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s1">'&amp;'</span><span class="p">:</span> <span class="s1">'&amp;amp;'</span><span class="p">,</span>
    <span class="s1">'&lt;'</span><span class="p">:</span> <span class="s1">'&amp;lt;'</span><span class="p">,</span>
    <span class="s1">'&gt;'</span><span class="p">:</span> <span class="s1">'&amp;gt;'</span><span class="p">,</span>
    <span class="s1">'"'</span><span class="p">:</span> <span class="s1">'&amp;quot;'</span><span class="p">,</span>
    <span class="s2">"'"</span><span class="p">:</span> <span class="s1">'&amp;#x27;'</span><span class="p">,</span>
    <span class="s1">'`'</span><span class="p">:</span> <span class="s1">'&amp;#x60;'</span>
<span class="p">};</span>
</code></pre>

<h3 id="escapehtml-string">escapeHtml(string)</h3>
<pre class="highlight javascript"><code>
<span class="kd">var</span> <span class="nx">string</span> <span class="o">=</span> <span class="s1">'&lt;html&gt; hey &lt;/html&gt;'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">escapedString</span> <span class="o">=</span> <span class="nx">Hoek</span><span class="p">.</span><span class="nx">escapeHtml</span><span class="p">(</span><span class="nx">string</span><span class="p">);</span> <span class="c1">// returns &amp;lt;html&amp;gt; hey &amp;lt;/html&amp;gt;</span>
</code></pre>

<h3 id="escapeheaderattribute-attribute">escapeHeaderAttribute(attribute)</h3>

<p>Escape attribute value for use in HTTP header</p>
<pre class="highlight javascript"><code>
<span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">Hoek</span><span class="p">.</span><span class="nx">escapeHeaderAttribute</span><span class="p">(</span><span class="s1">'I said "go w\\o me"'</span><span class="p">);</span>  <span class="c1">//returns I said \"go w\\o me\"</span>
</code></pre>

<h3 id="escaperegex-string">escapeRegex(string)</h3>

<p>Escape string for Regex construction</p>
<pre class="highlight javascript"><code>
<span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">Hoek</span><span class="p">.</span><span class="nx">escapeRegex</span><span class="p">(</span><span class="s1">'4^f$s.4*5+-_?%=#!:@|~\\/`"(&gt;)[&lt;]d{}s,'</span><span class="p">);</span>  <span class="c1">// returns 4\^f\$s\.4\*5\+\-_\?%\=#\!\:@\|~\\\/`"\(&gt;\)\[&lt;\]d\{\}s\,</span>
</code></pre>

<h1 id="errors">Errors</h1>

<h3 id="assert-condition-message">assert(condition, message)</h3>
<pre class="highlight javascript"><code>
<span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>

<span class="nx">Hoek</span><span class="p">.</span><span class="nx">assert</span><span class="p">(</span><span class="nx">a</span> <span class="o">===</span> <span class="nx">b</span><span class="p">,</span> <span class="s1">'a should equal b'</span><span class="p">);</span>  <span class="c1">// Throws 'a should equal b'</span>
</code></pre>

<p>Note that you may also pass an already created Error object as the second parameter, and <code class="prettyprint">assert</code> will throw that object.</p>
<pre class="highlight javascript"><code>
<span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>

<span class="nx">Hoek</span><span class="p">.</span><span class="nx">assert</span><span class="p">(</span><span class="nx">a</span> <span class="o">===</span> <span class="nx">b</span><span class="p">,</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">'a should equal b'</span><span class="p">));</span> <span class="c1">// Throws the given error object</span>
</code></pre>

<h3 id="abort-message">abort(message)</h3>

<p>First checks if <code class="prettyprint">process.env.NODE_ENV === &#39;test&#39;</code>, and if so, throws error message. Otherwise,
displays most recent stack and then exits process.</p>

<h3 id="displaystack-slice">displayStack(slice)</h3>

<p>Displays the trace stack</p>
<pre class="highlight javascript"><code>
<span class="kd">var</span> <span class="nx">stack</span> <span class="o">=</span> <span class="nx">Hoek</span><span class="p">.</span><span class="nx">displayStack</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">stack</span><span class="p">);</span> <span class="c1">// returns something like:</span>

<span class="p">[</span> <span class="s1">'null (/Users/user/Desktop/hoek/test.js:4:18)'</span><span class="p">,</span>
  <span class="s1">'Module._compile (module.js:449:26)'</span><span class="p">,</span>
  <span class="s1">'Module._extensions..js (module.js:467:10)'</span><span class="p">,</span>
  <span class="s1">'Module.load (module.js:356:32)'</span><span class="p">,</span>
  <span class="s1">'Module._load (module.js:312:12)'</span><span class="p">,</span>
  <span class="s1">'Module.runMain (module.js:492:10)'</span><span class="p">,</span>
  <span class="s1">'startup.processNextTick.process._tickCallback (node.js:244:9)'</span> <span class="p">]</span>
</code></pre>

<h3 id="callstack-slice">callStack(slice)</h3>

<p>Returns a trace stack array.</p>
<pre class="highlight javascript"><code>
<span class="kd">var</span> <span class="nx">stack</span> <span class="o">=</span> <span class="nx">Hoek</span><span class="p">.</span><span class="nx">callStack</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">stack</span><span class="p">);</span>  <span class="c1">// returns something like:</span>

<span class="p">[</span> <span class="p">[</span> <span class="s1">'/Users/user/Desktop/hoek/test.js'</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="kc">false</span> <span class="p">],</span>
  <span class="p">[</span> <span class="s1">'module.js'</span><span class="p">,</span> <span class="mi">449</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="s1">'Module._compile'</span><span class="p">,</span> <span class="kc">false</span> <span class="p">],</span>
  <span class="p">[</span> <span class="s1">'module.js'</span><span class="p">,</span> <span class="mi">467</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="s1">'Module._extensions..js'</span><span class="p">,</span> <span class="kc">false</span> <span class="p">],</span>
  <span class="p">[</span> <span class="s1">'module.js'</span><span class="p">,</span> <span class="mi">356</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="s1">'Module.load'</span><span class="p">,</span> <span class="kc">false</span> <span class="p">],</span>
  <span class="p">[</span> <span class="s1">'module.js'</span><span class="p">,</span> <span class="mi">312</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="s1">'Module._load'</span><span class="p">,</span> <span class="kc">false</span> <span class="p">],</span>
  <span class="p">[</span> <span class="s1">'module.js'</span><span class="p">,</span> <span class="mi">492</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="s1">'Module.runMain'</span><span class="p">,</span> <span class="kc">false</span> <span class="p">],</span>
  <span class="p">[</span> <span class="s1">'node.js'</span><span class="p">,</span>
    <span class="mi">244</span><span class="p">,</span>
    <span class="mi">9</span><span class="p">,</span>
    <span class="s1">'startup.processNextTick.process._tickCallback'</span><span class="p">,</span>
    <span class="kc">false</span> <span class="p">]</span> <span class="p">]</span>
</code></pre>

<h2 id="function">Function</h2>

<h3 id="nexttick-fn">nextTick(fn)</h3>

<p>Returns a new function that wraps <code class="prettyprint">fn</code> in <code class="prettyprint">process.nextTick</code>.</p>
<pre class="highlight javascript"><code>
<span class="kd">var</span> <span class="nx">myFn</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Do this later'</span><span class="p">);</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">nextFn</span> <span class="o">=</span> <span class="nx">Hoek</span><span class="p">.</span><span class="nx">nextTick</span><span class="p">(</span><span class="nx">myFn</span><span class="p">);</span>

<span class="nx">nextFn</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Do this first'</span><span class="p">);</span>

<span class="c1">// Results in:</span>
<span class="c1">//</span>
<span class="c1">// Do this first</span>
<span class="c1">// Do this later</span>
</code></pre>

<h3 id="once-fn">once(fn)</h3>

<p>Returns a new function that can be run multiple times, but makes sure <code class="prettyprint">fn</code> is only run once.</p>
<pre class="highlight javascript"><code>
<span class="kd">var</span> <span class="nx">myFn</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Ran myFn'</span><span class="p">);</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">onceFn</span> <span class="o">=</span> <span class="nx">Hoek</span><span class="p">.</span><span class="nx">once</span><span class="p">(</span><span class="nx">myFn</span><span class="p">);</span>
<span class="nx">onceFn</span><span class="p">();</span> <span class="c1">// results in "Ran myFn"</span>
<span class="nx">onceFn</span><span class="p">();</span> <span class="c1">// results in undefined</span>
</code></pre>

<h3 id="ignore">ignore</h3>

<p>A simple no-op function. It does nothing at all.</p>

<h2 id="miscellaneous">Miscellaneous</h2>

<h3 id="uniquefilename-path-extension">uniqueFilename(path, extension)</h3>

<p><code class="prettyprint">path</code> to prepend with the randomly generated file name. <code class="prettyprint">extension</code> is the optional file extension, defaults to <code class="prettyprint">&#39;&#39;</code>.</p>

<p>Returns a randomly generated file name at the specified <code class="prettyprint">path</code>. The result is a fully resolved path to a file.</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">Hoek</span><span class="p">.</span><span class="nx">uniqueFilename</span><span class="p">(</span><span class="s1">'./test/modules'</span><span class="p">,</span> <span class="s1">'txt'</span><span class="p">);</span> <span class="c1">// results in "full/path/test/modules/{random}.txt"</span>
</code></pre>

<h3 id="isabsolutepath-path-platform">isAbsolutePath(path, [platform])</h3>

<p>Determines whether <code class="prettyprint">path</code> is an absolute path. Returns <code class="prettyprint">true</code> or <code class="prettyprint">false</code>.</p>

<ul>
<li><code class="prettyprint">path</code> - A file path to test for whether it is absolute or not.</li>
<li><code class="prettyprint">platform</code> - An optional parameter used for specifying the platform. Defaults to <code class="prettyprint">process.platform</code>.</li>
</ul>

<h3 id="isinteger-value">isInteger(value)</h3>

<p>Check <code class="prettyprint">value</code> to see if it is an integer.  Returns true/false.</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">Hoek</span><span class="p">.</span><span class="nx">isInteger</span><span class="p">(</span><span class="s1">'23'</span><span class="p">)</span>
</code></pre>
