<h1 id="qs">qs</h1>

<p>A querystring parsing and stringifying library with some added security.</p>

<p><a href="http://travis-ci.org/ljharb/qs"><img alt="Build Status" src="https://api.travis-ci.org/ljharb/qs.svg" /></a></p>

<p>Lead Maintainer: <a href="https://github.com/ljharb">Jordan Harband</a></p>

<p>The <strong>qs</strong> module was originally created and maintained by <a href="https://github.com/visionmedia/node-querystring">TJ Holowaychuk</a>.</p>

<h2 id="usage">Usage</h2>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">qs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'qs'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'assert'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">'a=c'</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="s1">'c'</span> <span class="p">});</span>

<span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">str</span><span class="p">,</span> <span class="s1">'a=c'</span><span class="p">);</span>
</code></pre>

<h3 id="parsing-objects">Parsing Objects</h3>

<p><a href="#preventEval"></a>
<code class="prettyprint">javascript
qs.parse(string, [options]);
</code></p>

<p><strong>qs</strong> allows you to create nested objects within your query strings, by surrounding the name of sub-keys with square brackets <code class="prettyprint">[]</code>.
For example, the string <code class="prettyprint">&#39;foo[bar]=baz&#39;</code> converts to:</p>
<pre class="highlight javascript"><code><span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">'foo[bar]=baz'</span><span class="p">),</span> <span class="p">{</span>
  <span class="na">foo</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">bar</span><span class="p">:</span> <span class="s1">'baz'</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre>

<p>When using the <code class="prettyprint">plainObjects</code> option the parsed value is returned as a plain object, created via <code class="prettyprint">Object.create(null)</code> and as such you should be aware that prototype methods will not exist on it and a user may set those names to whatever value they like:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">plainObject</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">'a[hasOwnProperty]=b'</span><span class="p">,</span> <span class="p">{</span> <span class="na">plainObjects</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">plainObject</span><span class="p">,</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="p">{</span> <span class="na">hasOwnProperty</span><span class="p">:</span> <span class="s1">'b'</span> <span class="p">}</span> <span class="p">});</span>
</code></pre>

<p>By default parameters that would overwrite properties on the object prototype are ignored, if you wish to keep the data from those fields either use <code class="prettyprint">plainObjects</code> as mentioned above, or set <code class="prettyprint">allowPrototypes</code> to <code class="prettyprint">true</code> which will allow user input to overwrite those properties. <em>WARNING</em> It is generally a bad idea to enable this option as it can cause problems when attempting to use the properties that have been overwritten. Always be careful with this option.</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">protoObject</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">'a[hasOwnProperty]=b'</span><span class="p">,</span> <span class="p">{</span> <span class="na">allowPrototypes</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">protoObject</span><span class="p">,</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="p">{</span> <span class="na">hasOwnProperty</span><span class="p">:</span> <span class="s1">'b'</span> <span class="p">}</span> <span class="p">});</span>
</code></pre>

<p>URI encoded strings work too:</p>
<pre class="highlight javascript"><code><span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">'a%5Bb%5D=c'</span><span class="p">),</span> <span class="p">{</span>
  <span class="na">a</span><span class="p">:</span> <span class="p">{</span> <span class="na">b</span><span class="p">:</span> <span class="s1">'c'</span> <span class="p">}</span>
<span class="p">});</span>
</code></pre>

<p>You can also nest your objects, like <code class="prettyprint">&#39;foo[bar][baz]=foobarbaz&#39;</code>:</p>
<pre class="highlight javascript"><code><span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">'foo[bar][baz]=foobarbaz'</span><span class="p">),</span> <span class="p">{</span>
  <span class="na">foo</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">bar</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">baz</span><span class="p">:</span> <span class="s1">'foobarbaz'</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre>

<p>By default, when nesting objects <strong>qs</strong> will only parse up to 5 children deep. This means if you attempt to parse a string like
<code class="prettyprint">&#39;a[b][c][d][e][f][g][h][i]=j&#39;</code> your resulting object will be:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">expected</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">a</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">b</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">c</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">d</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">e</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">f</span><span class="p">:</span> <span class="p">{</span>
              <span class="s1">'[g][h][i]'</span><span class="p">:</span> <span class="s1">'j'</span>
            <span class="p">}</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">};</span>
<span class="kd">var</span> <span class="nx">string</span> <span class="o">=</span> <span class="s1">'a[b][c][d][e][f][g][h][i]=j'</span><span class="p">;</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">string</span><span class="p">),</span> <span class="nx">expected</span><span class="p">);</span>
</code></pre>

<p>This depth can be overridden by passing a <code class="prettyprint">depth</code> option to <code class="prettyprint">qs.parse(string, [options])</code>:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">deep</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">'a[b][c][d][e][f][g][h][i]=j'</span><span class="p">,</span> <span class="p">{</span> <span class="na">depth</span><span class="p">:</span> <span class="mi">1</span> <span class="p">});</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">deep</span><span class="p">,</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="p">{</span> <span class="na">b</span><span class="p">:</span> <span class="p">{</span> <span class="s1">'[c][d][e][f][g][h][i]'</span><span class="p">:</span> <span class="s1">'j'</span> <span class="p">}</span> <span class="p">}</span> <span class="p">});</span>
</code></pre>

<p>The depth limit helps mitigate abuse when <strong>qs</strong> is used to parse user input, and it is recommended to keep it a reasonably small number.</p>

<p>For similar reasons, by default <strong>qs</strong> will only parse up to 1000 parameters. This can be overridden by passing a <code class="prettyprint">parameterLimit</code> option:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">limited</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">'a=b&amp;c=d'</span><span class="p">,</span> <span class="p">{</span> <span class="na">parameterLimit</span><span class="p">:</span> <span class="mi">1</span> <span class="p">});</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">limited</span><span class="p">,</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="s1">'b'</span> <span class="p">});</span>
</code></pre>

<p>An optional delimiter can also be passed:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">delimited</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">'a=b;c=d'</span><span class="p">,</span> <span class="p">{</span> <span class="na">delimiter</span><span class="p">:</span> <span class="s1">';'</span> <span class="p">});</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">delimited</span><span class="p">,</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="s1">'b'</span><span class="p">,</span> <span class="na">c</span><span class="p">:</span> <span class="s1">'d'</span> <span class="p">});</span>
</code></pre>

<p>Delimiters can be a regular expression too:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">regexed</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">'a=b;c=d,e=f'</span><span class="p">,</span> <span class="p">{</span> <span class="na">delimiter</span><span class="p">:</span> <span class="sr">/</span><span class="se">[</span><span class="sr">;,</span><span class="se">]</span><span class="sr">/</span> <span class="p">});</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">regexed</span><span class="p">,</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="s1">'b'</span><span class="p">,</span> <span class="na">c</span><span class="p">:</span> <span class="s1">'d'</span><span class="p">,</span> <span class="na">e</span><span class="p">:</span> <span class="s1">'f'</span> <span class="p">});</span>
</code></pre>

<p>Option <code class="prettyprint">allowDots</code> can be used to enable dot notation:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">withDots</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">'a.b=c'</span><span class="p">,</span> <span class="p">{</span> <span class="na">allowDots</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">withDots</span><span class="p">,</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="p">{</span> <span class="na">b</span><span class="p">:</span> <span class="s1">'c'</span> <span class="p">}</span> <span class="p">});</span>
</code></pre>

<h3 id="parsing-arrays">Parsing Arrays</h3>

<p><strong>qs</strong> can also parse arrays using a similar <code class="prettyprint">[]</code> notation:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">withArray</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">'a[]=b&amp;a[]=c'</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">withArray</span><span class="p">,</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="p">[</span><span class="s1">'b'</span><span class="p">,</span> <span class="s1">'c'</span><span class="p">]</span> <span class="p">});</span>
</code></pre>

<p>You may specify an index as well:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">withIndexes</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">'a[1]=c&amp;a[0]=b'</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">withIndexes</span><span class="p">,</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="p">[</span><span class="s1">'b'</span><span class="p">,</span> <span class="s1">'c'</span><span class="p">]</span> <span class="p">});</span>
</code></pre>

<p>Note that the only difference between an index in an array and a key in an object is that the value between the brackets must be a number
to create an array. When creating arrays with specific indices, <strong>qs</strong> will compact a sparse array to only the existing values preserving
their order:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">noSparse</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">'a[1]=b&amp;a[15]=c'</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">noSparse</span><span class="p">,</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="p">[</span><span class="s1">'b'</span><span class="p">,</span> <span class="s1">'c'</span><span class="p">]</span> <span class="p">});</span>
</code></pre>

<p>Note that an empty string is also a value, and will be preserved:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">withEmptyString</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">'a[]=&amp;a[]=b'</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">withEmptyString</span><span class="p">,</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="p">[</span><span class="s1">''</span><span class="p">,</span> <span class="s1">'b'</span><span class="p">]</span> <span class="p">});</span>

<span class="kd">var</span> <span class="nx">withIndexedEmptyString</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">'a[0]=b&amp;a[1]=&amp;a[2]=c'</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">withIndexedEmptyString</span><span class="p">,</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="p">[</span><span class="s1">'b'</span><span class="p">,</span> <span class="s1">''</span><span class="p">,</span> <span class="s1">'c'</span><span class="p">]</span> <span class="p">});</span>
</code></pre>

<p><strong>qs</strong> will also limit specifying indices in an array to a maximum index of <code class="prettyprint">20</code>. Any array members with an index of greater than <code class="prettyprint">20</code> will
instead be converted to an object with the index as the key:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">withMaxIndex</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">'a[100]=b'</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">withMaxIndex</span><span class="p">,</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="p">{</span> <span class="s1">'100'</span><span class="p">:</span> <span class="s1">'b'</span> <span class="p">}</span> <span class="p">});</span>
</code></pre>

<p>This limit can be overridden by passing an <code class="prettyprint">arrayLimit</code> option:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">withArrayLimit</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">'a[1]=b'</span><span class="p">,</span> <span class="p">{</span> <span class="na">arrayLimit</span><span class="p">:</span> <span class="mi">0</span> <span class="p">});</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">withArrayLimit</span><span class="p">,</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="p">{</span> <span class="s1">'1'</span><span class="p">:</span> <span class="s1">'b'</span> <span class="p">}</span> <span class="p">});</span>
</code></pre>

<p>To disable array parsing entirely, set <code class="prettyprint">parseArrays</code> to <code class="prettyprint">false</code>.</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">noParsingArrays</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">'a[]=b'</span><span class="p">,</span> <span class="p">{</span> <span class="na">parseArrays</span><span class="p">:</span> <span class="kc">false</span> <span class="p">});</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">noParsingArrays</span><span class="p">,</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="p">{</span> <span class="s1">'0'</span><span class="p">:</span> <span class="s1">'b'</span> <span class="p">}</span> <span class="p">});</span>
</code></pre>

<p>If you mix notations, <strong>qs</strong> will merge the two items into an object:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">mixedNotation</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">'a[0]=b&amp;a[b]=c'</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">mixedNotation</span><span class="p">,</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="p">{</span> <span class="s1">'0'</span><span class="p">:</span> <span class="s1">'b'</span><span class="p">,</span> <span class="na">b</span><span class="p">:</span> <span class="s1">'c'</span> <span class="p">}</span> <span class="p">});</span>
</code></pre>

<p>You can also create arrays of objects:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">arraysOfObjects</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">'a[][b]=c'</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">arraysOfObjects</span><span class="p">,</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="p">[{</span> <span class="na">b</span><span class="p">:</span> <span class="s1">'c'</span> <span class="p">}]</span> <span class="p">});</span>
</code></pre>

<h3 id="stringifying">Stringifying</h3>

<p><a href="#preventEval"></a>
<code class="prettyprint">javascript
qs.stringify(object, [options]);
</code></p>

<p>When stringifying, <strong>qs</strong> by default URI encodes output. Objects are stringified as you would expect:</p>
<pre class="highlight javascript"><code><span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">qs</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">a</span><span class="p">:</span> <span class="s1">'b'</span> <span class="p">}),</span> <span class="s1">'a=b'</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">qs</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">a</span><span class="p">:</span> <span class="p">{</span> <span class="na">b</span><span class="p">:</span> <span class="s1">'c'</span> <span class="p">}</span> <span class="p">}),</span> <span class="s1">'a%5Bb%5D=c'</span><span class="p">);</span>
</code></pre>

<p>This encoding can be disabled by setting the <code class="prettyprint">encode</code> option to <code class="prettyprint">false</code>:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">unencoded</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">a</span><span class="p">:</span> <span class="p">{</span> <span class="na">b</span><span class="p">:</span> <span class="s1">'c'</span> <span class="p">}</span> <span class="p">},</span> <span class="p">{</span> <span class="na">encode</span><span class="p">:</span> <span class="kc">false</span> <span class="p">});</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">unencoded</span><span class="p">,</span> <span class="s1">'a[b]=c'</span><span class="p">);</span>
</code></pre>

<p>This encoding can also be replaced by a custom encoding method set as <code class="prettyprint">encoder</code> option:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">encoded</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">a</span><span class="p">:</span> <span class="p">{</span> <span class="na">b</span><span class="p">:</span> <span class="s1">'c'</span> <span class="p">}</span> <span class="p">},</span> <span class="p">{</span> <span class="na">encoder</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Passed in values `a`, `b`, `c`</span>
  <span class="k">return</span> <span class="c1">// Return encoded string</span>
<span class="p">}})</span>
</code></pre>

<p><em>(Note: the <code class="prettyprint">encoder</code> option does not apply if <code class="prettyprint">encode</code> is <code class="prettyprint">false</code>)</em></p>

<p>Analogue to the <code class="prettyprint">encoder</code> there is a <code class="prettyprint">decoder</code> option for <code class="prettyprint">parse</code> to override decoding of properties and values:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">decoded</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">'x=z'</span><span class="p">,</span> <span class="p">{</span> <span class="na">decoder</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Passed in values `x`, `z`</span>
  <span class="k">return</span> <span class="c1">// Return decoded string</span>
<span class="p">}})</span>
</code></pre>

<p>Examples beyond this point will be shown as though the output is not URI encoded for clarity. Please note that the return values in these cases <em>will</em> be URI encoded during real usage.</p>

<p>When arrays are stringified, by default they are given explicit indices:</p>
<pre class="highlight javascript"><code><span class="nx">qs</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">a</span><span class="p">:</span> <span class="p">[</span><span class="s1">'b'</span><span class="p">,</span> <span class="s1">'c'</span><span class="p">,</span> <span class="s1">'d'</span><span class="p">]</span> <span class="p">});</span>
<span class="c1">// 'a[0]=b&amp;a[1]=c&amp;a[2]=d'</span>
</code></pre>

<p>You may override this by setting the <code class="prettyprint">indices</code> option to <code class="prettyprint">false</code>:</p>
<pre class="highlight javascript"><code><span class="nx">qs</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">a</span><span class="p">:</span> <span class="p">[</span><span class="s1">'b'</span><span class="p">,</span> <span class="s1">'c'</span><span class="p">,</span> <span class="s1">'d'</span><span class="p">]</span> <span class="p">},</span> <span class="p">{</span> <span class="na">indices</span><span class="p">:</span> <span class="kc">false</span> <span class="p">});</span>
<span class="c1">// 'a=b&amp;a=c&amp;a=d'</span>
</code></pre>

<p>You may use the <code class="prettyprint">arrayFormat</code> option to specify the format of the output array</p>
<pre class="highlight javascript"><code><span class="nx">qs</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">a</span><span class="p">:</span> <span class="p">[</span><span class="s1">'b'</span><span class="p">,</span> <span class="s1">'c'</span><span class="p">]</span> <span class="p">},</span> <span class="p">{</span> <span class="na">arrayFormat</span><span class="p">:</span> <span class="s1">'indices'</span> <span class="p">})</span>
<span class="c1">// 'a[0]=b&amp;a[1]=c'</span>
<span class="nx">qs</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">a</span><span class="p">:</span> <span class="p">[</span><span class="s1">'b'</span><span class="p">,</span> <span class="s1">'c'</span><span class="p">]</span> <span class="p">},</span> <span class="p">{</span> <span class="na">arrayFormat</span><span class="p">:</span> <span class="s1">'brackets'</span> <span class="p">})</span>
<span class="c1">// 'a[]=b&amp;a[]=c'</span>
<span class="nx">qs</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">a</span><span class="p">:</span> <span class="p">[</span><span class="s1">'b'</span><span class="p">,</span> <span class="s1">'c'</span><span class="p">]</span> <span class="p">},</span> <span class="p">{</span> <span class="na">arrayFormat</span><span class="p">:</span> <span class="s1">'repeat'</span> <span class="p">})</span>
<span class="c1">// 'a=b&amp;a=c'</span>
</code></pre>

<p>Empty strings and null values will omit the value, but the equals sign (=) remains in place:</p>
<pre class="highlight javascript"><code><span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">qs</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">a</span><span class="p">:</span> <span class="s1">''</span> <span class="p">}),</span> <span class="s1">'a='</span><span class="p">);</span>
</code></pre>

<p>Properties that are set to <code class="prettyprint">undefined</code> will be omitted entirely:</p>
<pre class="highlight javascript"><code><span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">qs</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">a</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span> <span class="na">b</span><span class="p">:</span> <span class="kc">undefined</span> <span class="p">}),</span> <span class="s1">'a='</span><span class="p">);</span>
</code></pre>

<p>The delimiter may be overridden with stringify as well:</p>
<pre class="highlight javascript"><code><span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">qs</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">a</span><span class="p">:</span> <span class="s1">'b'</span><span class="p">,</span> <span class="na">c</span><span class="p">:</span> <span class="s1">'d'</span> <span class="p">},</span> <span class="p">{</span> <span class="na">delimiter</span><span class="p">:</span> <span class="s1">';'</span> <span class="p">}),</span> <span class="s1">'a=b;c=d'</span><span class="p">);</span>
</code></pre>

<p>Finally, you can use the <code class="prettyprint">filter</code> option to restrict which keys will be included in the stringified output.
If you pass a function, it will be called for each key to obtain the replacement value. Otherwise, if you
pass an array, it will be used to select properties and array indices for stringification:</p>
<pre class="highlight javascript"><code><span class="kd">function</span> <span class="nx">filterFunc</span><span class="p">(</span><span class="nx">prefix</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">prefix</span> <span class="o">==</span> <span class="s1">'b'</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Return an `undefined` value to omit a property.</span>
    <span class="k">return</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">prefix</span> <span class="o">==</span> <span class="s1">'e[f]'</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">value</span><span class="p">.</span><span class="nx">getTime</span><span class="p">();</span>
  <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">prefix</span> <span class="o">==</span> <span class="s1">'e[g][0]'</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">value</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">qs</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">a</span><span class="p">:</span> <span class="s1">'b'</span><span class="p">,</span> <span class="na">c</span><span class="p">:</span> <span class="s1">'d'</span><span class="p">,</span> <span class="na">e</span><span class="p">:</span> <span class="p">{</span> <span class="na">f</span><span class="p">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">123</span><span class="p">),</span> <span class="na">g</span><span class="p">:</span> <span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="p">}</span> <span class="p">},</span> <span class="p">{</span> <span class="na">filter</span><span class="p">:</span> <span class="nx">filterFunc</span> <span class="p">});</span>
<span class="c1">// 'a=b&amp;c=d&amp;e[f]=123&amp;e[g][0]=4'</span>
<span class="nx">qs</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">a</span><span class="p">:</span> <span class="s1">'b'</span><span class="p">,</span> <span class="na">c</span><span class="p">:</span> <span class="s1">'d'</span><span class="p">,</span> <span class="na">e</span><span class="p">:</span> <span class="s1">'f'</span> <span class="p">},</span> <span class="p">{</span> <span class="na">filter</span><span class="p">:</span> <span class="p">[</span><span class="s1">'a'</span><span class="p">,</span> <span class="s1">'e'</span><span class="p">]</span> <span class="p">});</span>
<span class="c1">// 'a=b&amp;e=f'</span>
<span class="nx">qs</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">a</span><span class="p">:</span> <span class="p">[</span><span class="s1">'b'</span><span class="p">,</span> <span class="s1">'c'</span><span class="p">,</span> <span class="s1">'d'</span><span class="p">],</span> <span class="na">e</span><span class="p">:</span> <span class="s1">'f'</span> <span class="p">},</span> <span class="p">{</span> <span class="na">filter</span><span class="p">:</span> <span class="p">[</span><span class="s1">'a'</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span> <span class="p">});</span>
<span class="c1">// 'a[0]=b&amp;a[2]=d'</span>
</code></pre>

<h3 id="handling-of-null-values">Handling of <code class="prettyprint">null</code> values</h3>

<p>By default, <code class="prettyprint">null</code> values are treated like empty strings:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">withNull</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">a</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span> <span class="na">b</span><span class="p">:</span> <span class="s1">''</span> <span class="p">});</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">withNull</span><span class="p">,</span> <span class="s1">'a=&amp;b='</span><span class="p">);</span>
</code></pre>

<p>Parsing does not distinguish between parameters with and without equal signs. Both are converted to empty strings.</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">equalsInsensitive</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">'a&amp;b='</span><span class="p">);</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">equalsInsensitive</span><span class="p">,</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="s1">''</span><span class="p">,</span> <span class="na">b</span><span class="p">:</span> <span class="s1">''</span> <span class="p">});</span>
</code></pre>

<p>To distinguish between <code class="prettyprint">null</code> values and empty strings use the <code class="prettyprint">strictNullHandling</code> flag. In the result string the <code class="prettyprint">null</code>
values have no <code class="prettyprint">=</code> sign:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">strictNull</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">a</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span> <span class="na">b</span><span class="p">:</span> <span class="s1">''</span> <span class="p">},</span> <span class="p">{</span> <span class="na">strictNullHandling</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">strictNull</span><span class="p">,</span> <span class="s1">'a&amp;b='</span><span class="p">);</span>
</code></pre>

<p>To parse values without <code class="prettyprint">=</code> back to <code class="prettyprint">null</code> use the <code class="prettyprint">strictNullHandling</code> flag:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">parsedStrictNull</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">'a&amp;b='</span><span class="p">,</span> <span class="p">{</span> <span class="na">strictNullHandling</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">parsedStrictNull</span><span class="p">,</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span> <span class="na">b</span><span class="p">:</span> <span class="s1">''</span> <span class="p">});</span>
</code></pre>

<p>To completely skip rendering keys with <code class="prettyprint">null</code> values, use the <code class="prettyprint">skipNulls</code> flag:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">nullsSkipped</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">a</span><span class="p">:</span> <span class="s1">'b'</span><span class="p">,</span> <span class="na">c</span><span class="p">:</span> <span class="kc">null</span><span class="p">},</span> <span class="p">{</span> <span class="na">skipNulls</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">nullsSkipped</span><span class="p">,</span> <span class="s1">'a=b'</span><span class="p">);</span>
</code></pre>

<h3 id="dealing-with-special-character-sets">Dealing with special character sets</h3>

<p>By default the encoding and decoding of characters is done in <code class="prettyprint">utf-8</code>. If you 
wish to encode querystrings to a different character set (i.e.
<a href="https://en.wikipedia.org/wiki/Shift_JIS">Shift JIS</a>) you can use the
<a href="https://github.com/martinheidegger/qs-iconv"><code class="prettyprint">qs-iconv</code></a> library:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">encoder</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'qs-iconv/encoder'</span><span class="p">)(</span><span class="s1">'shift_jis'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">shiftJISEncoded</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">a</span><span class="p">:</span> <span class="s1">'こんにちは！'</span> <span class="p">},</span> <span class="p">{</span> <span class="na">encoder</span><span class="p">:</span> <span class="nx">encoder</span> <span class="p">});</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">shiftJISEncoded</span><span class="p">,</span> <span class="s1">'a=%82%B1%82%F1%82%C9%82%BF%82%CD%81I'</span><span class="p">);</span>
</code></pre>

<p>This also works for decoding of query strings:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">decoder</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'qs-iconv/decoder'</span><span class="p">)(</span><span class="s1">'shift_jis'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">'a=%82%B1%82%F1%82%C9%82%BF%82%CD%81I'</span><span class="p">,</span> <span class="p">{</span> <span class="na">decoder</span><span class="p">:</span> <span class="nx">decoder</span> <span class="p">});</span>
<span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="s1">'こんにちは！'</span> <span class="p">});</span>
</code></pre>
