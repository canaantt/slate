<h1 id="v2-0-1">v2.0.1</h1>

<ul>
<li>Significantly optimized all iteration based collection methods such as <code class="prettyprint">each</code>, <code class="prettyprint">map</code>, <code class="prettyprint">filter</code>, etc (#1245, #1246, #1247).</li>
</ul>

<h1 id="v2-0-0">v2.0.0</h1>

<p>Lots of changes here!</p>

<p>First and foremost, we have a slick new <a href="https://caolan.github.io/async/">site for docs</a>. Special thanks to <a href="https://github.com/hargasinski"><strong>@hargasinski</strong></a> for his work converting our old docs to <code class="prettyprint">jsdoc</code> format and implementing the new website. Also huge ups to <a href="https://github.com/ivanseidel"><strong>@ivanseidel</strong></a> for designing our new logo. It was a long process for both of these tasks, but I think these changes turned out extraordinary well.</p>

<p>The biggest feature is modularization. You can now <code class="prettyprint">require(&quot;async/series&quot;)</code> to only require the <code class="prettyprint">series</code> function. Every Async library function is available this way. You still can <code class="prettyprint">require(&quot;async&quot;)</code> to require the entire library, like you could do before.</p>

<p>We also provide Async as a collection of ES2015 modules. You can now <code class="prettyprint">import {each} from &#39;async-es&#39;</code> or <code class="prettyprint">import waterfall from &#39;async-es/waterfall&#39;</code>. If you are using only a few Async functions, and are using a ES bundler such as Rollup, this can significantly lower your build size.</p>

<p>Major thanks to <a href="github.com/Kikobeats"><strong>@Kikobeats</strong></a>, <a href="github.com/aearly"><strong>@aearly</strong></a> and <a href="github.com/megawac"><strong>@megawac</strong></a> for doing the majority of the modularization work, as well as <a href="github.com/jdalton"><strong>@jdalton</strong></a> and <a href="github.com/Rich-Harris"><strong>@Rich-Harris</strong></a> for advisory work on the general modularization strategy.</p>

<p>Another one of the general themes of the 2.0 release is standardization of what an &ldquo;async&rdquo; function is. We are now more strictly following the node-style continuation passing style. That is, an async function is a function that:</p>

<ol>
<li>Takes a variable number of arguments</li>
<li>The last argument is always a callback</li>
<li>The callback can accept any number of arguments</li>
<li>The first argument passed to the callback will be treated as an error result, if the argument is truthy</li>
<li>Any number of result arguments can be passed after the &ldquo;error&rdquo; argument</li>
<li>The callback is called once and exactly once, either on the same tick or later tick of the JavaScript event loop.</li>
</ol>

<p>There were several cases where Async accepted some functions that did not strictly have these properties, most notably <code class="prettyprint">auto</code>, <code class="prettyprint">every</code>, <code class="prettyprint">some</code>, and <code class="prettyprint">filter</code>.</p>

<p>Another theme is performance. We have eliminated internal deferrals in all cases where they make sense. For example, in <code class="prettyprint">waterfall</code> and <code class="prettyprint">auto</code>, there was a <code class="prettyprint">setImmediate</code> between each task &ndash; these deferrals have been removed. A <code class="prettyprint">setImmediate</code> call can add up to 1ms of delay. This might not seem like a lot, but it can add up if you are using many Async functions in the course of processing a HTTP request, for example. Nearly all asynchronous functions that do I/O already have some sort of deferral built in, so the extra deferral is unnecessary. The trade-off of this change is removing our built-in stack-overflow defense. Many synchronous callback calls in series can quickly overflow the JS call stack. If you do have a function that is sometimes synchronous (calling its callback on the same tick), and are running into stack overflows, wrap it with <code class="prettyprint">async.ensureAsync()</code>.</p>

<p>Another big performance win has been re-implementing <code class="prettyprint">queue</code>, <code class="prettyprint">cargo</code>, and <code class="prettyprint">priorityQueue</code> with <a href="https://en.wikipedia.org/wiki/Doubly_linked_list">doubly linked lists</a> instead of arrays. This has lead to queues being an order of <a href="https://github.com/caolan/async/pull/1205">magnitude faster on large sets of tasks</a>.</p>

<h2 id="new-features">New Features</h2>

<ul>
<li>Async is now modularized. Individual functions can be <code class="prettyprint">require()</code>d from the main package. (<code class="prettyprint">require(&#39;async/auto&#39;)</code>) (#984, #996)</li>
<li>Async is also available as a collection of ES2015 modules in the new <code class="prettyprint">async-es</code> package. (<code class="prettyprint">import {forEachSeries} from &#39;async-es&#39;</code>) (#984, #996)</li>
<li>Added <code class="prettyprint">race</code>, analogous to <code class="prettyprint">Promise.race()</code>. It will run an array of async tasks in parallel and will call its callback with the result of the first task to respond. (#568, #1038)</li>
<li>Collection methods now accept ES2015 iterators.  Maps, Sets, and anything that implements the iterator spec can now be passed directly to <code class="prettyprint">each</code>, <code class="prettyprint">map</code>, <code class="prettyprint">parallel</code>, etc.. (#579, #839, #1074)</li>
<li>Added <code class="prettyprint">mapValues</code>, for mapping over the properties of an object and returning an object with the same keys. (#1157, #1177)</li>
<li>Added <code class="prettyprint">timeout</code>, a wrapper for an async function that will make the task time-out after the specified time. (#1007, #1027)</li>
<li>Added <code class="prettyprint">reflect</code> and <code class="prettyprint">reflectAll</code>, analagous to <a href="http://bluebirdjs.com/docs/api/reflect.html"><code class="prettyprint">Promise.reflect()</code></a>, a wrapper for async tasks that always succeeds, by gathering results and errors into an object.  (#942, #1012, #1095)</li>
<li><code class="prettyprint">constant</code> supports dynamic arguments &ndash; it will now always use its last argument as the callback. (#1016, #1052)</li>
<li><code class="prettyprint">setImmediate</code> and <code class="prettyprint">nextTick</code> now support arguments to partially apply to the deferred function, like the node-native versions do. (#940, #1053)</li>
<li><code class="prettyprint">auto</code> now supports resolving cyclic dependencies using <a href="https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm">Kahn&rsquo;s algorithm</a> (#1140).</li>
<li>Added <code class="prettyprint">autoInject</code>, a relative of <code class="prettyprint">auto</code> that automatically spreads a task&rsquo;s dependencies as arguments to the task function. (#608, #1055, #1099, #1100)</li>
<li>You can now limit the concurrency of <code class="prettyprint">auto</code> tasks. (#635, #637)</li>
<li>Added <code class="prettyprint">retryable</code>, a relative of <code class="prettyprint">retry</code> that wraps an async function, making it retry when called. (#1058)</li>
<li><code class="prettyprint">retry</code> now supports specifying a function that determines the next time interval, useful for exponential backoff, logging and other retry strategies. (#1161)</li>
<li><code class="prettyprint">retry</code> will now pass all of the arguments the task function was resolved with to the callback (#1231).</li>
<li>Added <code class="prettyprint">q.unsaturated</code> &ndash; callback called when a <code class="prettyprint">queue</code>&rsquo;s number of running workers falls below a threshold. (#868, #1030, #1033, #1034)</li>
<li>Added <code class="prettyprint">q.error</code> &ndash; a callback called whenever a <code class="prettyprint">queue</code> task calls its callback with an error. (#1170)</li>
<li><code class="prettyprint">applyEach</code> and <code class="prettyprint">applyEachSeries</code> now pass results to the final callback. (#1088)</li>
</ul>

<h2 id="breaking-changes">Breaking changes</h2>

<ul>
<li>Calling a callback more than once is considered an error, and an error will be thrown. This had an explicit breaking change in <code class="prettyprint">waterfall</code>. If you were relying on this behavior, you should more accurately represent your control flow as an event emitter or stream. (#814, #815, #1048, #1050)</li>
<li><code class="prettyprint">auto</code> task functions now always take the callback as the last argument. If a task has dependencies, the <code class="prettyprint">results</code> object will be passed as the first argument. To migrate old task functions, wrap them with <a href="https://lodash.com/docs#flip"><code class="prettyprint">_.flip</code></a> (#1036, #1042)</li>
<li>Internal <code class="prettyprint">setImmediate</code> calls have been refactored away. This may make existing flows vulnerable to stack overflows if you use many synchronous functions in series. Use <code class="prettyprint">ensureAsync</code> to work around this. (#696, #704, #1049, #1050)</li>
<li><code class="prettyprint">map</code> used to return an object when iterating over an object.  <code class="prettyprint">map</code> now always returns an array, like in other libraries.  The previous object behavior has been split out into <code class="prettyprint">mapValues</code>. (#1157, #1177)</li>
<li><code class="prettyprint">filter</code>, <code class="prettyprint">reject</code>, <code class="prettyprint">some</code>, <code class="prettyprint">every</code>, and related functions now expect an error as the first callback argument, rather than just a simple boolean. Pass <code class="prettyprint">null</code> as the first argument, or use <code class="prettyprint">fs.access</code> instead of <code class="prettyprint">fs.exists</code>. (#118, #774, #1028, #1041)</li>
<li><code class="prettyprint">{METHOD}</code> and <code class="prettyprint">{METHOD}Series</code> are now implemented in terms of <code class="prettyprint">{METHOD}Limit</code>. This is a major internal simplification, and is not expected to cause many problems, but it does subtly affect how functions execute internally. (#778, #847)</li>
<li><code class="prettyprint">retry</code>&rsquo;s callback is now optional. Previously, omitting the callback would partially apply the function, meaning it could be passed directly as a task to <code class="prettyprint">series</code> or <code class="prettyprint">auto</code>. The partially applied &ldquo;control-flow&rdquo; behavior has been separated out into <code class="prettyprint">retryable</code>. (#1054, #1058)</li>
<li>The test function for <code class="prettyprint">whilst</code>, <code class="prettyprint">until</code>, and <code class="prettyprint">during</code> used to be passed non-error args from the iteratee function&rsquo;s callback, but this led to weirdness where the first call of the test function would be passed no args. We have made it so the test function is never passed extra arguments, and only the <code class="prettyprint">doWhilst</code>, <code class="prettyprint">doUntil</code>, and <code class="prettyprint">doDuring</code> functions pass iteratee callback arguments to the test function (#1217, #1224)</li>
<li>The <code class="prettyprint">q.tasks</code> array has been renamed <code class="prettyprint">q._tasks</code> and is now implemented as a doubly linked list (DLL). Any code that used to interact with this array will need to be updated to either use the provided helpers or support DLLs (#1205).</li>
<li>The timing of the <code class="prettyprint">q.saturated()</code> callback in a <code class="prettyprint">queue</code> has been modified to better reflect when tasks pushed to the queue will start queueing. (#724, #1078)</li>
<li>Removed <code class="prettyprint">iterator</code> method in favour of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators">ES2015 iterator protocol</a> which natively supports arrays (#1237)</li>
<li>Dropped support for Component, Jam, SPM, and Volo (#1175, ##176)</li>
</ul>

<h2 id="bug-fixes">Bug Fixes</h2>

<ul>
<li>Improved handling of no dependency cases in <code class="prettyprint">auto</code> &amp; <code class="prettyprint">autoInject</code> (#1147).</li>
<li>Fixed a bug where the callback generated by <code class="prettyprint">asyncify</code> with  <code class="prettyprint">Promises</code> could resolve twice (#1197).</li>
<li>Fixed several documented optional callbacks not actually being optional (#1223).</li>
</ul>

<h2 id="other">Other</h2>

<ul>
<li>Added <code class="prettyprint">someSeries</code> and <code class="prettyprint">everySeries</code> for symmetry, as well as a complete set of <code class="prettyprint">any</code>/<code class="prettyprint">anyLimit</code>/<code class="prettyprint">anySeries</code> and <code class="prettyprint">all</code>/<code class="prettyprint">/allLmit</code>/<code class="prettyprint">allSeries</code> aliases.</li>
<li>Added <code class="prettyprint">find</code> as an alias for <code class="prettyprint">detect. (as well as</code>findLimit<code class="prettyprint">and</code>findSeries`).</li>
<li>Various doc fixes (#1005, #1008, #1010, #1015, #1021, #1037, #1039, #1051, #1102, #1107, #1121, #1123, #1129, #1135, #1138, #1141, #1153, #1216, #1217, #1232, #1233, #1236, #1238)</li>
</ul>

<p>Thank you <a href="github.com/aearly"><strong>@aearly</strong></a> and <a href="github.com/megawac"><strong>@megawac</strong></a> for taking the lead on version 2 of async.</p>

<hr>

<h1 id="v1-5-2">v1.5.2</h1>

<ul>
<li>Allow using <code class="prettyprint">&quot;constructor&quot;</code> as an argument in <code class="prettyprint">memoize</code> (#998)</li>
<li>Give a better error messsage when <code class="prettyprint">auto</code> dependency checking fails (#994)</li>
<li>Various doc updates (#936, #956, #979, #1002)</li>
</ul>

<h1 id="v1-5-1">v1.5.1</h1>

<ul>
<li>Fix issue with <code class="prettyprint">pause</code> in <code class="prettyprint">queue</code> with concurrency enabled (#946)</li>
<li><code class="prettyprint">while</code> and <code class="prettyprint">until</code> now pass the final result to callback (#963)</li>
<li><code class="prettyprint">auto</code> will properly handle concurrency when there is no callback (#966)</li>
<li><code class="prettyprint">auto</code> will no. properly stop execution when an error occurs (#988, #993)</li>
<li>Various doc fixes (#971, #980)</li>
</ul>

<h1 id="v1-5-0">v1.5.0</h1>

<ul>
<li>Added <code class="prettyprint">transform</code>, analogous to <a href="http://lodash.com/docs#transform"><code class="prettyprint">_.transform</code></a> (#892)</li>
<li><code class="prettyprint">map</code> now returns an object when an object is passed in, rather than array with non-numeric keys. <code class="prettyprint">map</code> will begin always returning an array with numeric indexes in the next major release. (#873)</li>
<li><code class="prettyprint">auto</code> now accepts an optional <code class="prettyprint">concurrency</code> argument to limit the number o. running tasks (#637)</li>
<li>Added <code class="prettyprint">queue#workersList()</code>, to retrieve the lis. of currently running tasks. (#891)</li>
<li>Various code simplifications (#896, #904)</li>
<li>Various doc fixes :scroll: (#890, #894, #903, #905, #912)</li>
</ul>

<h1 id="v1-4-2">v1.4.2</h1>

<ul>
<li>Ensure coverage files don&rsquo;t get published on npm (#879)</li>
</ul>

<h1 id="v1-4-1">v1.4.1</h1>

<ul>
<li>Add in overlooked <code class="prettyprint">detectLimit</code> method (#866)</li>
<li>Removed unnecessary files from npm releases (#861)</li>
<li>Removed usage of a reserved word to prevent :boom: in older environments (#870)</li>
</ul>

<h1 id="v1-4-0">v1.4.0</h1>

<ul>
<li><code class="prettyprint">asyncify</code> now supports promises (#840)</li>
<li>Added <code class="prettyprint">Limit</code> versions of <code class="prettyprint">filter</code> and <code class="prettyprint">reject</code> (#836)</li>
<li>Add <code class="prettyprint">Limit</code> versions of <code class="prettyprint">detect</code>, <code class="prettyprint">some</code> and <code class="prettyprint">every</code> (#828, #829)</li>
<li><code class="prettyprint">some</code>, <code class="prettyprint">every</code> and <code class="prettyprint">detect</code> now short circuit early (#828, #829)</li>
<li>Improve detection of the global object (#804), enabling use in WebWorkers</li>
<li><code class="prettyprint">whilst</code> now called with arguments from iterator (#823)</li>
<li><code class="prettyprint">during</code> now gets called with arguments from iterator (#824)</li>
<li>Code simplifications and optimizations aplenty (<a href="https://github.com/caolan/async/compare/v1.3.0...v1.4.0">diff</a>)</li>
</ul>

<h1 id="v1-3-0">v1.3.0</h1>

<p>New Features:
- Added <code class="prettyprint">constant</code>
- Added <code class="prettyprint">asyncify</code>/<code class="prettyprint">wrapSync</code> for making sync functions work with callbacks. (#671, #806)
- Added <code class="prettyprint">during</code> and <code class="prettyprint">doDuring</code>, which are like <code class="prettyprint">whilst</code> with an async truth test. (#800)
- <code class="prettyprint">retry</code> now accepts an <code class="prettyprint">interval</code> parameter to specify a delay between retries. (#793)
- <code class="prettyprint">async</code> should work better in Web Workers due to better <code class="prettyprint">root</code> detection (#804)
- Callbacks are now optional in <code class="prettyprint">whilst</code>, <code class="prettyprint">doWhilst</code>, <code class="prettyprint">until</code>, and <code class="prettyprint">doUntil</code> (#642)
- Various internal updates (#786, #801, #802, #803)
- Various doc fixes (#790, #794)</p>

<p>Bug Fixes:
- <code class="prettyprint">cargo</code> now exposes the <code class="prettyprint">payload</code> size, and <code class="prettyprint">cargo.payload</code> can be changed on the fly after the <code class="prettyprint">cargo</code> is created. (#740, #744, #783)</p>

<h1 id="v1-2-1">v1.2.1</h1>

<p>Bug Fix:</p>

<ul>
<li>Small regression with synchronous iterator behavior in <code class="prettyprint">eachSeries</code> with a 1-element array. Before 1.1.0, <code class="prettyprint">eachSeries</code>&rsquo;s callback was called on the same tick, which this patch restores. In 2.0.0, it will be called on the next tick. (#782)</li>
</ul>

<h1 id="v1-2-0">v1.2.0</h1>

<p>New Features:</p>

<ul>
<li>Added <code class="prettyprint">timesLimit</code> (#743)</li>
<li><code class="prettyprint">concurrency</code> can be changed after initialization in <code class="prettyprint">queue</code> by setting <code class="prettyprint">q.concurrency</code>. The new concurrency will be reflected the next time a task is processed. (#747, #772)</li>
</ul>

<p>Bug Fixes:</p>

<ul>
<li>Fixed a regression in <code class="prettyprint">each</code> and family with empty arrays that have additional properties. (#775, #777)</li>
</ul>

<h1 id="v1-1-1">v1.1.1</h1>

<p>Bug Fix:</p>

<ul>
<li>Small regression with synchronous iterator behavior in <code class="prettyprint">eachSeries</code> with a 1-element array. Before 1.1.0, <code class="prettyprint">eachSeries</code>&rsquo;s callback was called on the same tick, which this patch restores. In 2.0.0, it will be called on the next tick. (#782)</li>
</ul>

<h1 id="v1-1-0">v1.1.0</h1>

<p>New Features:</p>

<ul>
<li><code class="prettyprint">cargo</code> now supports all of the same methods and event callbacks as <code class="prettyprint">queue</code>.</li>
<li>Added <code class="prettyprint">ensureAsync</code> - A wrapper that ensures an async function calls its callback on a later tick. (#769)</li>
<li>Optimized <code class="prettyprint">map</code>, <code class="prettyprint">eachOf</code>, and <code class="prettyprint">waterfall</code> families of functions</li>
<li>Passing a <code class="prettyprint">null</code> or <code class="prettyprint">undefined</code> array to <code class="prettyprint">map</code>, <code class="prettyprint">each</code>, <code class="prettyprint">parallel</code> and families will be treated as an empty array (#667).</li>
<li>The callback is now optional for the composed results of <code class="prettyprint">compose</code> and <code class="prettyprint">seq</code>. (#618)</li>
<li>Reduced file size by 4kb, (minified version by 1kb)</li>
<li>Added code coverage through <code class="prettyprint">nyc</code> and <code class="prettyprint">coveralls</code> (#768)</li>
</ul>

<p>Bug Fixes:</p>

<ul>
<li><code class="prettyprint">forever</code> will no longer stack overflow with a synchronous iterator (#622)</li>
<li><code class="prettyprint">eachLimit</code> and other limit functions will stop iterating once an error occurs (#754)</li>
<li>Always pass <code class="prettyprint">null</code> in callbacks when there is no error (#439)</li>
<li>Ensure proper conditions when calling <code class="prettyprint">drain()</code> after pushing an empty data set to a queue (#668)</li>
<li><code class="prettyprint">each</code> and family will properly handle an empty array (#578)</li>
<li><code class="prettyprint">eachSeries</code> and family will finish if the underlying array is modified during execution (#557)</li>
<li><code class="prettyprint">queue</code> will throw if a non-function is passed to <code class="prettyprint">q.push()</code> (#593)</li>
<li>Doc fixes (#629, #766)</li>
</ul>

<h1 id="v1-0-0">v1.0.0</h1>

<p>No known breaking changes, we are simply complying with semver from here on out.</p>

<p>Changes:</p>

<ul>
<li>Start using a changelog!</li>
<li>Add <code class="prettyprint">forEachOf</code> for iterating over Objects (or to iterate Arrays with indexes available) (#168 #704 #321)</li>
<li>Detect deadlocks in <code class="prettyprint">auto</code> (#663)</li>
<li>Better support for require.js (#527)</li>
<li>Throw if queue created with concurrency <code class="prettyprint">0</code> (#714)</li>
<li>Fix unneeded iteration in <code class="prettyprint">queue.resume()</code> (#758)</li>
<li>Guard against timer mocking overriding <code class="prettyprint">setImmediate</code> (#609 #611)</li>
<li>Miscellaneous doc fixes (#542 #596 #615 #628 #631 #690 #729)</li>
<li>Use single noop function internally (#546)</li>
<li>Optimize internal <code class="prettyprint">_each</code>, <code class="prettyprint">_map</code> and <code class="prettyprint">_keys</code> functions.</li>
</ul>
