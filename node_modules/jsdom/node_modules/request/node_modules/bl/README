<h1 id="bl-bufferlist">bl <em>(BufferList)</em></h1>

<p><a href="https://travis-ci.org/rvagg/bl"><img alt="Build Status" src="https://travis-ci.org/rvagg/bl.svg?branch=master" /></a></p>

<p><strong>A Node.js Buffer list collector, reader and streamer thingy.</strong></p>

<p><a href="https://nodei.co/npm/bl/"><img alt="NPM" src="https://nodei.co/npm/bl.png?downloads=true&amp;downloadRank=true" /></a>
<a href="https://nodei.co/npm/bl/"><img alt="NPM" src="https://nodei.co/npm-dl/bl.png?months=6&amp;height=3" /></a></p>

<p><strong>bl</strong> is a storage object for collections of Node Buffers, exposing them with the main Buffer readable API. Also works as a duplex stream so you can collect buffers from a stream that emits them and emit buffers to a stream that consumes them!</p>

<p>The original buffers are kept intact and copies are only done as necessary. Any reads that require the use of a single original buffer will return a slice of that buffer only (which references the same memory as the original buffer). Reads that span buffers perform concatenation as required and return the results transparently.</p>
<pre class="highlight javascript"><code><span class="kr">const</span> <span class="nx">BufferList</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'bl'</span><span class="p">)</span>

<span class="kd">var</span> <span class="nx">bl</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BufferList</span><span class="p">()</span>
<span class="nx">bl</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="k">new</span> <span class="nx">Buffer</span><span class="p">(</span><span class="s1">'abcd'</span><span class="p">))</span>
<span class="nx">bl</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="k">new</span> <span class="nx">Buffer</span><span class="p">(</span><span class="s1">'efg'</span><span class="p">))</span>
<span class="nx">bl</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'hi'</span><span class="p">)</span>                     <span class="c1">// bl will also accept &amp; convert Strings</span>
<span class="nx">bl</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="k">new</span> <span class="nx">Buffer</span><span class="p">(</span><span class="s1">'j'</span><span class="p">))</span>
<span class="nx">bl</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="k">new</span> <span class="nx">Buffer</span><span class="p">([</span> <span class="mh">0x3</span><span class="p">,</span> <span class="mh">0x4</span> <span class="p">]))</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bl</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="c1">// 12</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bl</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="s1">'ascii'</span><span class="p">))</span> <span class="c1">// 'abcdefghij'</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bl</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">10</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="s1">'ascii'</span><span class="p">))</span> <span class="c1">// 'defghij'</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bl</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="s1">'ascii'</span><span class="p">))</span>  <span class="c1">// 'def'</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bl</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">8</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="s1">'ascii'</span><span class="p">))</span>  <span class="c1">// 'defgh'</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bl</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="s1">'ascii'</span><span class="p">))</span> <span class="c1">// 'fghij'</span>

<span class="c1">// or just use toString!</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bl</span><span class="p">.</span><span class="nx">toString</span><span class="p">())</span>               <span class="c1">// 'abcdefghij\u0003\u0004'</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bl</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="s1">'ascii'</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>  <span class="c1">// 'defgh'</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bl</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="s1">'ascii'</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span> <span class="c1">// 'fghij'</span>

<span class="c1">// other standard Buffer readables</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bl</span><span class="p">.</span><span class="nx">readUInt16BE</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span> <span class="c1">// 0x0304</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bl</span><span class="p">.</span><span class="nx">readUInt16LE</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span> <span class="c1">// 0x0403</span>
</code></pre>

<p>Give it a callback in the constructor and use it just like <strong><a href="https://github.com/maxogden/node-concat-stream">concat-stream</a></strong>:</p>
<pre class="highlight javascript"><code><span class="kr">const</span> <span class="nx">bl</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'bl'</span><span class="p">)</span>
    <span class="p">,</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'fs'</span><span class="p">)</span>

<span class="nx">fs</span><span class="p">.</span><span class="nx">createReadStream</span><span class="p">(</span><span class="s1">'README.md'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">bl</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// note 'new' isn't strictly required</span>
    <span class="c1">// `data` is a complete Buffer object containing the full data</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">toString</span><span class="p">())</span>
  <span class="p">}))</span>
</code></pre>

<p>Note that when you use the <em>callback</em> method like this, the resulting <code class="prettyprint">data</code> parameter is a concatenation of all <code class="prettyprint">Buffer</code> objects in the list. If you want to avoid the overhead of this concatenation (in cases of extreme performance consciousness), then avoid the <em>callback</em> method and just listen to <code class="prettyprint">&#39;end&#39;</code> instead, like a standard Stream.</p>

<p>Or to fetch a URL using <a href="https://github.com/substack/hyperquest">hyperquest</a> (should work with <a href="http://github.com/mikeal/request">request</a> and even plain Node http too!):
&ldquo;`js
const hyperquest = require(&lsquo;hyperquest&rsquo;)
    , bl         = require(&#39;bl&rsquo;)
    , url        = &#39;https://raw.github.com/rvagg/bl/master/README.md&rsquo;</p>

<p>hyperquest(url).pipe(bl(function (err, data) {
  console.log(data.toString())
}))
&rdquo;`</p>

<p>Or, use it as a readable stream to recompose a list of Buffers to an output source:</p>
<pre class="highlight javascript"><code><span class="kr">const</span> <span class="nx">BufferList</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'bl'</span><span class="p">)</span>
    <span class="p">,</span> <span class="nx">fs</span>         <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'fs'</span><span class="p">)</span>

<span class="kd">var</span> <span class="nx">bl</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BufferList</span><span class="p">()</span>
<span class="nx">bl</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="k">new</span> <span class="nx">Buffer</span><span class="p">(</span><span class="s1">'abcd'</span><span class="p">))</span>
<span class="nx">bl</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="k">new</span> <span class="nx">Buffer</span><span class="p">(</span><span class="s1">'efg'</span><span class="p">))</span>
<span class="nx">bl</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="k">new</span> <span class="nx">Buffer</span><span class="p">(</span><span class="s1">'hi'</span><span class="p">))</span>
<span class="nx">bl</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="k">new</span> <span class="nx">Buffer</span><span class="p">(</span><span class="s1">'j'</span><span class="p">))</span>

<span class="nx">bl</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">createWriteStream</span><span class="p">(</span><span class="s1">'gibberish.txt'</span><span class="p">))</span>
</code></pre>

<h2 id="api">API</h2>

<ul>
<li><a href="#ctor"><code><b>new BufferList([ callback ])</b></code></a></li>
<li><a href="#length"><code>bl.<b>length</b></code></a></li>
<li><a href="#append"><code>bl.<b>append(buffer)</b></code></a></li>
<li><a href="#get"><code>bl.<b>get(index)</b></code></a></li>
<li><a href="#slice"><code>bl.<b>slice([ start[, end ] ])</b></code></a></li>
<li><a href="#copy"><code>bl.<b>copy(dest, [ destStart, [ srcStart [, srcEnd ] ] ])</b></code></a></li>
<li><a href="#duplicate"><code>bl.<b>duplicate()</b></code></a></li>
<li><a href="#consume"><code>bl.<b>consume(bytes)</b></code></a></li>
<li><a href="#toString"><code>bl.<b>toString([encoding, [ start, [ end ]]])</b></code></a></li>
<li><a href="#readXX"><code>bl.<b>readDoubleBE()</b></code>, <code>bl.<b>readDoubleLE()</b></code>, <code>bl.<b>readFloatBE()</b></code>, <code>bl.<b>readFloatLE()</b></code>, <code>bl.<b>readInt32BE()</b></code>, <code>bl.<b>readInt32LE()</b></code>, <code>bl.<b>readUInt32BE()</b></code>, <code>bl.<b>readUInt32LE()</b></code>, <code>bl.<b>readInt16BE()</b></code>, <code>bl.<b>readInt16LE()</b></code>, <code>bl.<b>readUInt16BE()</b></code>, <code>bl.<b>readUInt16LE()</b></code>, <code>bl.<b>readInt8()</b></code>, <code>bl.<b>readUInt8()</b></code></a></li>
<li><a href="#streams">Streams</a></li>
</ul>

<hr>

<p><a name="ctor"></a></p>

<h3 id="new-bufferlist-callback-buffer-buffer-array-bufferlist-bufferlist-array-string">new BufferList([ callback | Buffer | Buffer array | BufferList | BufferList array | String ])</h3>

<p>The constructor takes an optional callback, if supplied, the callback will be called with an error argument followed by a reference to the <strong>bl</strong> instance, when <code class="prettyprint">bl.end()</code> is called (i.e. from a piped stream). This is a convenient method of collecting the entire contents of a stream, particularly when the stream is <em>chunky</em>, such as a network stream.</p>

<p>Normally, no arguments are required for the constructor, but you can initialise the list by passing in a single <code class="prettyprint">Buffer</code> object or an array of <code class="prettyprint">Buffer</code> object.</p>

<p><code class="prettyprint">new</code> is not strictly required, if you don&rsquo;t instantiate a new object, it will be done automatically for you so you can create a new instance simply with:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">bl</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'bl'</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">myinstance</span> <span class="o">=</span> <span class="nx">bl</span><span class="p">()</span>

<span class="c1">// equivilant to:</span>

<span class="kd">var</span> <span class="nx">BufferList</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'bl'</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">myinstance</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BufferList</span><span class="p">()</span>
</code></pre>

<hr>

<p><a name="length"></a></p>

<h3 id="bl-length">bl.length</h3>

<p>Get the length of the list in bytes. This is the sum of the lengths of all of the buffers contained in the list, minus any initial offset for a semi-consumed buffer at the beginning. Should accurately represent the total number of bytes that can be read from the list.</p>

<hr>

<p><a name="append"></a></p>

<h3 id="bl-append-buffer-buffer-array-bufferlist-bufferlist-array-string">bl.append(Buffer | Buffer array | BufferList | BufferList array | String)</h3>

<p><code class="prettyprint">append(buffer)</code> adds an additional buffer or BufferList to the internal list. <code class="prettyprint">this</code> is returned so it can be chained.</p>

<hr>

<p><a name="get"></a></p>

<h3 id="bl-get-index">bl.get(index)</h3>

<p><code class="prettyprint">get()</code> will return the byte at the specified index.</p>

<hr>

<p><a name="slice"></a></p>

<h3 id="bl-slice-start-end">bl.slice([ start, [ end ] ])</h3>

<p><code class="prettyprint">slice()</code> returns a new <code class="prettyprint">Buffer</code> object containing the bytes within the range specified. Both <code class="prettyprint">start</code> and <code class="prettyprint">end</code> are optional and will default to the beginning and end of the list respectively.</p>

<p>If the requested range spans a single internal buffer then a slice of that buffer will be returned which shares the original memory range of that Buffer. If the range spans multiple buffers then copy operations will likely occur to give you a uniform Buffer.</p>

<hr>

<p><a name="copy"></a></p>

<h3 id="bl-copy-dest-deststart-srcstart-srcend">bl.copy(dest, [ destStart, [ srcStart [, srcEnd ] ] ])</h3>

<p><code class="prettyprint">copy()</code> copies the content of the list in the <code class="prettyprint">dest</code> buffer, starting from <code class="prettyprint">destStart</code> and containing the bytes within the range specified with <code class="prettyprint">srcStart</code> to <code class="prettyprint">srcEnd</code>. <code class="prettyprint">destStart</code>, <code class="prettyprint">start</code> and <code class="prettyprint">end</code> are optional and will default to the beginning of the <code class="prettyprint">dest</code> buffer, and the beginning and end of the list respectively.</p>

<hr>

<p><a name="duplicate"></a></p>

<h3 id="bl-duplicate">bl.duplicate()</h3>

<p><code class="prettyprint">duplicate()</code> performs a <strong>shallow-copy</strong> of the list. The internal Buffers remains the same, so if you change the underlying Buffers, the change will be reflected in both the original and the duplicate. This method is needed if you want to call <code class="prettyprint">consume()</code> or <code class="prettyprint">pipe()</code> and still keep the original list.Example:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">bl</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BufferList</span><span class="p">()</span>

<span class="nx">bl</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">)</span>
<span class="nx">bl</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">' world'</span><span class="p">)</span>
<span class="nx">bl</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'\n'</span><span class="p">)</span>

<span class="nx">bl</span><span class="p">.</span><span class="nx">duplicate</span><span class="p">().</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">stdout</span><span class="p">,</span> <span class="p">{</span> <span class="na">end</span><span class="p">:</span> <span class="kc">false</span> <span class="p">})</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bl</span><span class="p">.</span><span class="nx">toString</span><span class="p">())</span>
</code></pre>

<hr>

<p><a name="consume"></a></p>

<h3 id="bl-consume-bytes">bl.consume(bytes)</h3>

<p><code class="prettyprint">consume()</code> will shift bytes <em>off the start of the list</em>. The number of bytes consumed don&rsquo;t need to line up with the sizes of the internal Buffers&mdash;initial offsets will be calculated accordingly in order to give you a consistent view of the data.</p>

<hr>

<p><a name="toString"></a></p>

<h3 id="bl-tostring-encoding-start-end">bl.toString([encoding, [ start, [ end ]]])</h3>

<p><code class="prettyprint">toString()</code> will return a string representation of the buffer. The optional <code class="prettyprint">start</code> and <code class="prettyprint">end</code> arguments are passed on to <code class="prettyprint">slice()</code>, while the <code class="prettyprint">encoding</code> is passed on to <code class="prettyprint">toString()</code> of the resulting Buffer. See the <a href="http://nodejs.org/docs/latest/api/buffer.html#buffer_buf_tostring_encoding_start_end">Buffer#toString()</a> documentation for more information.</p>

<hr>

<p><a name="readXX"></a></p>

<h3 id="bl-readdoublebe-bl-readdoublele-bl-readfloatbe-bl-readfloatle-bl-readint32be-bl-readint32le-bl-readuint32be-bl-readuint32le-bl-readint16be-bl-readint16le-bl-readuint16be-bl-readuint16le-bl-readint8-bl-readuint8">bl.readDoubleBE(), bl.readDoubleLE(), bl.readFloatBE(), bl.readFloatLE(), bl.readInt32BE(), bl.readInt32LE(), bl.readUInt32BE(), bl.readUInt32LE(), bl.readInt16BE(), bl.readInt16LE(), bl.readUInt16BE(), bl.readUInt16LE(), bl.readInt8(), bl.readUInt8()</h3>

<p>All of the standard byte-reading methods of the <code class="prettyprint">Buffer</code> interface are implemented and will operate across internal Buffer boundaries transparently.</p>

<p>See the <b><code><a href="http://nodejs.org/docs/latest/api/buffer.html">Buffer</a></code></b> documentation for how these work.</p>

<hr>

<p><a name="streams"></a></p>

<h3 id="streams">Streams</h3>

<p><strong>bl</strong> is a Node <strong><a href="http://nodejs.org/docs/latest/api/stream.html#stream_class_stream_duplex">Duplex Stream</a></strong>, so it can be read from and written to like a standard Node stream. You can also <code class="prettyprint">pipe()</code> to and from a <strong>bl</strong> instance.</p>

<hr>

<h2 id="contributors">Contributors</h2>

<p><strong>bl</strong> is brought to you by the following hackers:</p>

<ul>
<li><a href="https://github.com/rvagg">Rod Vagg</a></li>
<li><a href="https://github.com/mcollina">Matteo Collina</a></li>
<li><a href="https://github.com/jcrugzz">Jarett Cruger</a></li>
</ul>

<p>=======</p>

<p><a name="license"></a></p>

<h2 id="license-amp-copyright">License &amp; copyright</h2>

<p>Copyright &copy; 2013-2014 bl contributors (listed above).</p>

<p>bl is licensed under the MIT license. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE.md file for more details.</p>
