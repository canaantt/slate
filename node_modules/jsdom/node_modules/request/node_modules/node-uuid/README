<h1 id="node-uuid">node-uuid</h1>

<p>Simple, fast generation of <a href="http://www.ietf.org/rfc/rfc4122.txt">RFC4122</a> UUIDS.</p>

<p>Features:</p>

<ul>
<li>Generate RFC4122 version 1 or version 4 UUIDs</li>
<li>Runs in node.js and all browsers.</li>
<li>Registered as a <a href="https://github.com/component/component">ComponentJS</a> <a href="https://github.com/component/component/wiki/Components">component</a> (&lsquo;broofa/node-uuid&rsquo;).</li>
<li>Cryptographically strong random # generation

<ul>
<li><code class="prettyprint">crypto.randomBytes(n)</code> in node.js</li>
<li><code class="prettyprint">window.crypto.getRandomValues(ta)</code> in <a href="https://developer.mozilla.org/en-US/docs/Web/API/RandomSource/getRandomValues#Browser_Compatibility">supported browsers</a></li>
</ul></li>
<li>1.1K minified and gzip&#39;ed  (Want something smaller?  Check this <a href="https://gist.github.com/982883">crazy shit</a> out! )</li>
<li><a href="http://broofa.github.com/node-uuid/docs/uuid.html">Annotated source code</a></li>
<li>Comes with a Command Line Interface for generating uuids on the command line</li>
</ul>

<h2 id="getting-started">Getting Started</h2>

<p>Install it in your browser:</p>
<pre class="highlight html"><code><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"uuid.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre>

<p>Or in node.js:</p>
<pre class="highlight plaintext"><code>npm install node-uuid
</code></pre>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">uuid</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'node-uuid'</span><span class="p">);</span>
</code></pre>

<p>Then create some ids &hellip;</p>
<pre class="highlight javascript"><code><span class="c1">// Generate a v1 (time-based) id</span>
<span class="nx">uuid</span><span class="p">.</span><span class="nx">v1</span><span class="p">();</span> <span class="c1">// -&gt; '6c84fb90-12c4-11e1-840d-7b25c5ee775a'</span>

<span class="c1">// Generate a v4 (random) id</span>
<span class="nx">uuid</span><span class="p">.</span><span class="nx">v4</span><span class="p">();</span> <span class="c1">// -&gt; '110ec58a-a0f2-4ac4-8393-c866d813b8d1'</span>
</code></pre>

<h2 id="api">API</h2>

<h3 id="uuid-v1-options-buffer-offset">uuid.v1([<code class="prettyprint">options</code> [, <code class="prettyprint">buffer</code> [, <code class="prettyprint">offset</code>]]])</h3>

<p>Generate and return a RFC4122 v1 (timestamp-based) UUID.</p>

<ul>
<li><p><code class="prettyprint">options</code> - (Object) Optional uuid state to apply. Properties may include:</p>

<ul>
<li><code class="prettyprint">node</code> - (Array) Node id as Array of 6 bytes (per 4.1.6). Default: Randomly generated ID.  See note 1.</li>
<li><code class="prettyprint">clockseq</code> - (Number between 0 - 0x3fff) RFC clock sequence.  Default: An internally maintained clockseq is used.</li>
<li><code class="prettyprint">msecs</code> - (Number | Date) Time in milliseconds since unix Epoch.  Default: The current time is used.</li>
<li><code class="prettyprint">nsecs</code> - (Number between 0-9999) additional time, in 100-nanosecond units. Ignored if <code class="prettyprint">msecs</code> is unspecified. Default: internal uuid counter is used, as per 4.2.1.2.</li>
</ul></li>
<li><p><code class="prettyprint">buffer</code> - (Array | Buffer) Array or buffer where UUID bytes are to be written.</p></li>
<li><p><code class="prettyprint">offset</code> - (Number) Starting index in <code class="prettyprint">buffer</code> at which to begin writing.</p></li>
</ul>

<p>Returns <code class="prettyprint">buffer</code>, if specified, otherwise the string form of the UUID</p>

<p>Notes:</p>

<ol>
<li>The randomly generated node id is only guaranteed to stay constant for the lifetime of the current JS runtime. (Future versions of this module may use persistent storage mechanisms to extend this guarantee.)</li>
</ol>

<p>Example: Generate string UUID with fully-specified options</p>
<pre class="highlight javascript"><code><span class="nx">uuid</span><span class="p">.</span><span class="nx">v1</span><span class="p">({</span>
  <span class="na">node</span><span class="p">:</span> <span class="p">[</span><span class="mh">0x01</span><span class="p">,</span> <span class="mh">0x23</span><span class="p">,</span> <span class="mh">0x45</span><span class="p">,</span> <span class="mh">0x67</span><span class="p">,</span> <span class="mh">0x89</span><span class="p">,</span> <span class="mh">0xab</span><span class="p">],</span>
  <span class="na">clockseq</span><span class="p">:</span> <span class="mh">0x1234</span><span class="p">,</span>
  <span class="na">msecs</span><span class="p">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="s1">'2011-11-01'</span><span class="p">).</span><span class="nx">getTime</span><span class="p">(),</span>
  <span class="na">nsecs</span><span class="p">:</span> <span class="mi">5678</span>
<span class="p">});</span>   <span class="c1">// -&gt; "710b962e-041c-11e1-9234-0123456789ab"</span>
</code></pre>

<p>Example: In-place generation of two binary IDs</p>
<pre class="highlight javascript"><code><span class="c1">// Generate two ids in an array</span>
<span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">32</span><span class="p">);</span> <span class="c1">// -&gt; []</span>
<span class="nx">uuid</span><span class="p">.</span><span class="nx">v1</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">arr</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>   <span class="c1">// -&gt; [02 a2 ce 90 14 32 11 e1 85 58 0b 48 8e 4f c1 15]</span>
<span class="nx">uuid</span><span class="p">.</span><span class="nx">v1</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">arr</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>  <span class="c1">// -&gt; [02 a2 ce 90 14 32 11 e1 85 58 0b 48 8e 4f c1 15 02 a3 1c b0 14 32 11 e1 85 58 0b 48 8e 4f c1 15]</span>

<span class="c1">// Optionally use uuid.unparse() to get stringify the ids</span>
<span class="nx">uuid</span><span class="p">.</span><span class="nx">unparse</span><span class="p">(</span><span class="nx">buffer</span><span class="p">);</span>    <span class="c1">// -&gt; '02a2ce90-1432-11e1-8558-0b488e4fc115'</span>
<span class="nx">uuid</span><span class="p">.</span><span class="nx">unparse</span><span class="p">(</span><span class="nx">buffer</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span> <span class="c1">// -&gt; '02a31cb0-1432-11e1-8558-0b488e4fc115'</span>
</code></pre>

<h3 id="uuid-v4-options-buffer-offset">uuid.v4([<code class="prettyprint">options</code> [, <code class="prettyprint">buffer</code> [, <code class="prettyprint">offset</code>]]])</h3>

<p>Generate and return a RFC4122 v4 UUID.</p>

<ul>
<li><p><code class="prettyprint">options</code> - (Object) Optional uuid state to apply. Properties may include:</p>

<ul>
<li><code class="prettyprint">random</code> - (Number[16]) Array of 16 numbers (0-255) to use in place of randomly generated values</li>
<li><code class="prettyprint">rng</code> - (Function) Random # generator to use.  Set to one of the built-in generators - <code class="prettyprint">uuid.mathRNG</code> (all platforms), <code class="prettyprint">uuid.nodeRNG</code> (node.js only), <code class="prettyprint">uuid.whatwgRNG</code> (WebKit only) - or a custom function that returns an array[16] of byte values.</li>
</ul></li>
<li><p><code class="prettyprint">buffer</code> - (Array | Buffer) Array or buffer where UUID bytes are to be written.</p></li>
<li><p><code class="prettyprint">offset</code> - (Number) Starting index in <code class="prettyprint">buffer</code> at which to begin writing.</p></li>
</ul>

<p>Returns <code class="prettyprint">buffer</code>, if specified, otherwise the string form of the UUID</p>

<p>Example: Generate string UUID with fully-specified options</p>
<pre class="highlight javascript"><code><span class="nx">uuid</span><span class="p">.</span><span class="nx">v4</span><span class="p">({</span>
  <span class="na">random</span><span class="p">:</span> <span class="p">[</span>
    <span class="mh">0x10</span><span class="p">,</span> <span class="mh">0x91</span><span class="p">,</span> <span class="mh">0x56</span><span class="p">,</span> <span class="mh">0xbe</span><span class="p">,</span> <span class="mh">0xc4</span><span class="p">,</span> <span class="mh">0xfb</span><span class="p">,</span> <span class="mh">0xc1</span><span class="p">,</span> <span class="mh">0xea</span><span class="p">,</span>
    <span class="mh">0x71</span><span class="p">,</span> <span class="mh">0xb4</span><span class="p">,</span> <span class="mh">0xef</span><span class="p">,</span> <span class="mh">0xe1</span><span class="p">,</span> <span class="mh">0x67</span><span class="p">,</span> <span class="mh">0x1c</span><span class="p">,</span> <span class="mh">0x58</span><span class="p">,</span> <span class="mh">0x36</span>
  <span class="p">]</span>
<span class="p">});</span>
<span class="c1">// -&gt; "109156be-c4fb-41ea-b1b4-efe1671c5836"</span>
</code></pre>

<p>Example: Generate two IDs in a single buffer</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">32</span><span class="p">);</span> <span class="c1">// (or 'new Buffer' in node.js)</span>
<span class="nx">uuid</span><span class="p">.</span><span class="nx">v4</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">buffer</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="nx">uuid</span><span class="p">.</span><span class="nx">v4</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">buffer</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>
</code></pre>

<h3 id="uuid-parse-id-buffer-offset">uuid.parse(id[, buffer[, offset]])</h3>

<h3 id="uuid-unparse-buffer-offset">uuid.unparse(buffer[, offset])</h3>

<p>Parse and unparse UUIDs</p>

<ul>
<li><code class="prettyprint">id</code> - (String) UUID(-like) string</li>
<li><code class="prettyprint">buffer</code> - (Array | Buffer) Array or buffer where UUID bytes are to be written. Default: A new Array or Buffer is used</li>
<li><code class="prettyprint">offset</code> - (Number) Starting index in <code class="prettyprint">buffer</code> at which to begin writing. Default: 0</li>
</ul>

<p>Example parsing and unparsing a UUID string</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">bytes</span> <span class="o">=</span> <span class="nx">uuid</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">'797ff043-11eb-11e1-80d6-510998755d10'</span><span class="p">);</span> <span class="c1">// -&gt; &lt;Buffer 79 7f f0 43 11 eb 11 e1 80 d6 51 09 98 75 5d 10&gt;</span>
<span class="kd">var</span> <span class="nx">string</span> <span class="o">=</span> <span class="nx">uuid</span><span class="p">.</span><span class="nx">unparse</span><span class="p">(</span><span class="nx">bytes</span><span class="p">);</span> <span class="c1">// -&gt; '797ff043-11eb-11e1-80d6-510998755d10'</span>
</code></pre>

<h3 id="uuid-noconflict">uuid.noConflict()</h3>

<p>(Browsers only) Set <code class="prettyprint">uuid</code> property back to it&rsquo;s previous value.</p>

<p>Returns the node-uuid object.</p>

<p>Example:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">myUuid</span> <span class="o">=</span> <span class="nx">uuid</span><span class="p">.</span><span class="nx">noConflict</span><span class="p">();</span>
<span class="nx">myUuid</span><span class="p">.</span><span class="nx">v1</span><span class="p">();</span> <span class="c1">// -&gt; '6c84fb90-12c4-11e1-840d-7b25c5ee775a'</span>
</code></pre>

<h2 id="deprecated-apis">Deprecated APIs</h2>

<p>Support for the following v1.2 APIs is available in v1.3, but is deprecated and will be removed in the next major version.</p>

<h3 id="uuid-format-buffer-offset">uuid([format [, buffer [, offset]]])</h3>

<p>uuid() has become uuid.v4(), and the <code class="prettyprint">format</code> argument is now implicit in the <code class="prettyprint">buffer</code> argument. (i.e. if you specify a buffer, the format is assumed to be binary).</p>

<h3 id="uuid-bufferclass">uuid.BufferClass</h3>

<p>The class of container created when generating binary uuid data if no buffer argument is specified.  This is expected to go away, with no replacement API.</p>

<h2 id="command-line-interface">Command Line Interface</h2>

<p>To use the executable, it&rsquo;s probably best to install this library globally.</p>

<p><code class="prettyprint">npm install -g node-uuid</code></p>

<p>Usage:</p>
<pre class="highlight plaintext"><code>USAGE: uuid [version] [options]


options:

--help                     Display this message and exit
</code></pre>

<p><code class="prettyprint">version</code> must be an RFC4122 version that is supported by this library, which is currently version 1 and version 4 (denoted by &ldquo;v1&rdquo; and &ldquo;v4&rdquo;, respectively). <code class="prettyprint">version</code> defaults to version 4 when not supplied.</p>

<h3 id="examples">Examples</h3>
<pre class="highlight plaintext"><code>&gt; uuid
3a91f950-dec8-4688-ba14-5b7bbfc7a563
</code></pre>
<pre class="highlight plaintext"><code>&gt; uuid v1
9d0b43e0-7696-11e3-964b-250efa37a98e
</code></pre>
<pre class="highlight plaintext"><code>&gt; uuid v4
6790ac7c-24ac-4f98-8464-42f6d98a53ae
</code></pre>

<h2 id="testing">Testing</h2>

<p>In node.js</p>
<pre class="highlight plaintext"><code>npm test
</code></pre>

<p>In Browser</p>
<pre class="highlight plaintext"><code>open test/test.html
</code></pre>

<h3 id="benchmarking">Benchmarking</h3>

<p>Requires node.js</p>
<pre class="highlight plaintext"><code>npm install uuid uuid-js
node benchmark/benchmark.js
</code></pre>

<p>For a more complete discussion of node-uuid performance, please see the <code class="prettyprint">benchmark/README.md</code> file, and the <a href="https://github.com/broofa/node-uuid/wiki/Benchmark">benchmark wiki</a></p>

<p>For browser performance <a href="http://jsperf.com/node-uuid-performance">checkout the JSPerf tests</a>.</p>

<h2 id="release-notes">Release notes</h2>

<h3 id="1-4-6">1.4.6</h3>

<ul>
<li>Properly detect node crypto and whatwg crypto</li>
<li>Workaround phantomjs/browserify bug</li>
<li>Explicit check for <code class="prettyprint">window</code> rather implicit this-global</li>
<li>Issue warning if Math.random() is being used</li>
<li>&ldquo;use strict&rdquo;;</li>
<li>A few jshint / stylistic updates (=== and such)</li>
</ul>

<h3 id="1-4-0">1.4.0</h3>

<ul>
<li>Improved module context detection</li>
<li>Removed public RNG functions</li>
</ul>

<h3 id="1-3-2">1.3.2</h3>

<ul>
<li>Improve tests and handling of v1() options (Issue #24)</li>
<li>Expose RNG option to allow for perf testing with different generators</li>
</ul>

<h3 id="1-3-0">1.3.0</h3>

<ul>
<li>Support for version 1 ids, thanks to <a href="https://github.com/ctavan">@ctavan</a>!</li>
<li>Support for node.js crypto API</li>
<li>De-emphasizing performance in favor of a) cryptographic quality PRNGs where available and b) more manageable code</li>
</ul>
