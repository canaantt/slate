<h1 id="combined-stream">combined-stream</h1>

<p>A stream that emits multiple other streams one after another.</p>

<p><strong>NB</strong> Currently <code class="prettyprint">combined-stream</code> works with streams vesrion 1 only. There is ongoing effort to switch this library to streams version 2. Any help is welcome. :) Meanwhile you can explore other libraries that provide streams2 support with more or less compatability with <code class="prettyprint">combined-stream</code>.</p>

<ul>
<li><p><a href="https://www.npmjs.com/package/combined-stream2">combined-stream2</a>: A drop-in streams2-compatible replacement for the combined-stream module.</p></li>
<li><p><a href="https://www.npmjs.com/package/multistream">multistream</a>: A stream that emits multiple other streams one after another.</p></li>
</ul>

<h2 id="installation">Installation</h2>
<pre class="highlight shell"><code>npm install combined-stream
</code></pre>

<h2 id="usage">Usage</h2>

<p>Here is a simple example that shows how you can use combined-stream to combine
two files into one:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">CombinedStream</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'combined-stream'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'fs'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">combinedStream</span> <span class="o">=</span> <span class="nx">CombinedStream</span><span class="p">.</span><span class="nx">create</span><span class="p">();</span>
<span class="nx">combinedStream</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">createReadStream</span><span class="p">(</span><span class="s1">'file1.txt'</span><span class="p">));</span>
<span class="nx">combinedStream</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">createReadStream</span><span class="p">(</span><span class="s1">'file2.txt'</span><span class="p">));</span>

<span class="nx">combinedStream</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">createWriteStream</span><span class="p">(</span><span class="s1">'combined.txt'</span><span class="p">));</span>
</code></pre>

<p>While the example above works great, it will pause all source streams until
they are needed. If you don&rsquo;t want that to happen, you can set <code class="prettyprint">pauseStreams</code>
to <code class="prettyprint">false</code>:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">CombinedStream</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'combined-stream'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'fs'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">combinedStream</span> <span class="o">=</span> <span class="nx">CombinedStream</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span><span class="na">pauseStreams</span><span class="p">:</span> <span class="kc">false</span><span class="p">});</span>
<span class="nx">combinedStream</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">createReadStream</span><span class="p">(</span><span class="s1">'file1.txt'</span><span class="p">));</span>
<span class="nx">combinedStream</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">createReadStream</span><span class="p">(</span><span class="s1">'file2.txt'</span><span class="p">));</span>

<span class="nx">combinedStream</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">createWriteStream</span><span class="p">(</span><span class="s1">'combined.txt'</span><span class="p">));</span>
</code></pre>

<p>However, what if you don&rsquo;t have all the source streams yet, or you don&rsquo;t want
to allocate the resources (file descriptors, memory, etc.) for them right away?
Well, in that case you can simply provide a callback that supplies the stream
by calling a <code class="prettyprint">next()</code> function:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">CombinedStream</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'combined-stream'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'fs'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">combinedStream</span> <span class="o">=</span> <span class="nx">CombinedStream</span><span class="p">.</span><span class="nx">create</span><span class="p">();</span>
<span class="nx">combinedStream</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">next</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">createReadStream</span><span class="p">(</span><span class="s1">'file1.txt'</span><span class="p">));</span>
<span class="p">});</span>
<span class="nx">combinedStream</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">next</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">createReadStream</span><span class="p">(</span><span class="s1">'file2.txt'</span><span class="p">));</span>
<span class="p">});</span>

<span class="nx">combinedStream</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">createWriteStream</span><span class="p">(</span><span class="s1">'combined.txt'</span><span class="p">));</span>
</code></pre>

<h2 id="api">API</h2>

<h3 id="combinedstream-create-options">CombinedStream.create([options])</h3>

<p>Returns a new combined stream object. Available options are:</p>

<ul>
<li><code class="prettyprint">maxDataSize</code></li>
<li><code class="prettyprint">pauseStreams</code></li>
</ul>

<p>The effect of those options is described below.</p>

<h3 id="combinedstream-pausestreams-true">combinedStream.pauseStreams = <code class="prettyprint">true</code></h3>

<p>Whether to apply back pressure to the underlaying streams. If set to <code class="prettyprint">false</code>,
the underlaying streams will never be paused. If set to <code class="prettyprint">true</code>, the
underlaying streams will be paused right after being appended, as well as when
<code class="prettyprint">delayedStream.pipe()</code> wants to throttle.</p>

<h3 id="combinedstream-maxdatasize-2-1024-1024">combinedStream.maxDataSize = <code class="prettyprint">2 * 1024 * 1024</code></h3>

<p>The maximum amount of bytes (or characters) to buffer for all source streams.
If this value is exceeded, <code class="prettyprint">combinedStream</code> emits an <code class="prettyprint">&#39;error&#39;</code> event.</p>

<h3 id="combinedstream-datasize-0">combinedStream.dataSize = <code class="prettyprint">0</code></h3>

<p>The amount of bytes (or characters) currently buffered by <code class="prettyprint">combinedStream</code>.</p>

<h3 id="combinedstream-append-stream">combinedStream.append(stream)</h3>

<p>Appends the given <code class="prettyprint">stream</code> to the combinedStream object. If <code class="prettyprint">pauseStreams</code> is
set to `true, this stream will also be paused right away.</p>

<p><code class="prettyprint">streams</code> can also be a function that takes one parameter called <code class="prettyprint">next</code>. <code class="prettyprint">next</code>
is a function that must be invoked in order to provide the <code class="prettyprint">next</code> stream, see
example above.</p>

<p>Regardless of how the <code class="prettyprint">stream</code> is appended, combined-stream always attaches an
<code class="prettyprint">&#39;error&#39;</code> listener to it, so you don&rsquo;t have to do that manually.</p>

<p>Special case: <code class="prettyprint">stream</code> can also be a String or Buffer.</p>

<h3 id="combinedstream-write-data">combinedStream.write(data)</h3>

<p>You should not call this, <code class="prettyprint">combinedStream</code> takes care of piping the appended
streams into itself for you.</p>

<h3 id="combinedstream-resume">combinedStream.resume()</h3>

<p>Causes <code class="prettyprint">combinedStream</code> to start drain the streams it manages. The function is
idempotent, and also emits a <code class="prettyprint">&#39;resume&#39;</code> event each time which usually goes to
the stream that is currently being drained.</p>

<h3 id="combinedstream-pause">combinedStream.pause();</h3>

<p>If <code class="prettyprint">combinedStream.pauseStreams</code> is set to <code class="prettyprint">false</code>, this does nothing.
Otherwise a <code class="prettyprint">&#39;pause&#39;</code> event is emitted, this goes to the stream that is
currently being drained, so you can use it to apply back pressure.</p>

<h3 id="combinedstream-end">combinedStream.end();</h3>

<p>Sets <code class="prettyprint">combinedStream.writable</code> to false, emits an <code class="prettyprint">&#39;end&#39;</code> event, and removes
all streams from the queue.</p>

<h3 id="combinedstream-destroy">combinedStream.destroy();</h3>

<p>Same as <code class="prettyprint">combinedStream.end()</code>, except it emits a <code class="prettyprint">&#39;close&#39;</code> event instead of
<code class="prettyprint">&#39;end&#39;</code>.</p>

<h2 id="license">License</h2>

<p>combined-stream is licensed under the MIT license.</p>
