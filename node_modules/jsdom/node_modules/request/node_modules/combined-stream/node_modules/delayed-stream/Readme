<h1 id="delayed-stream">delayed-stream</h1>

<p>Buffers events from a stream until you are ready to handle them.</p>

<h2 id="installation">Installation</h2>
<pre class="highlight shell"><code>npm install delayed-stream
</code></pre>

<h2 id="usage">Usage</h2>

<p>The following example shows how to write a http echo server that delays its
response by 1000 ms.</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">DelayedStream</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'delayed-stream'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'http'</span><span class="p">);</span>

<span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">delayed</span> <span class="o">=</span> <span class="nx">DelayedStream</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">req</span><span class="p">);</span>

  <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
    <span class="nx">delayed</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">res</span><span class="p">);</span>
  <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
<span class="p">});</span>
</code></pre>

<p>If you are not using <code class="prettyprint">Stream#pipe</code>, you can also manually release the buffered
events by calling <code class="prettyprint">delayedStream.resume()</code>:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">delayed</span> <span class="o">=</span> <span class="nx">DelayedStream</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">req</span><span class="p">);</span>

<span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// Emit all buffered events and resume underlaying source</span>
  <span class="nx">delayed</span><span class="p">.</span><span class="nx">resume</span><span class="p">();</span>
<span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</code></pre>

<h2 id="implementation">Implementation</h2>

<p>In order to use this meta stream properly, here are a few things you should
know about the implementation.</p>

<h3 id="event-buffering-proxying">Event Buffering / Proxying</h3>

<p>All events of the <code class="prettyprint">source</code> stream are hijacked by overwriting the <code class="prettyprint">source.emit</code>
method. Until node implements a catch-all event listener, this is the only way.</p>

<p>However, delayed-stream still continues to emit all events it captures on the
<code class="prettyprint">source</code>, regardless of whether you have released the delayed stream yet or
not.</p>

<p>Upon creation, delayed-stream captures all <code class="prettyprint">source</code> events and stores them in
an internal event buffer. Once <code class="prettyprint">delayedStream.release()</code> is called, all
buffered events are emitted on the <code class="prettyprint">delayedStream</code>, and the event buffer is
cleared. After that, delayed-stream merely acts as a proxy for the underlaying
source.</p>

<h3 id="error-handling">Error handling</h3>

<p>Error events on <code class="prettyprint">source</code> are buffered / proxied just like any other events.
However, <code class="prettyprint">delayedStream.create</code> attaches a no-op <code class="prettyprint">&#39;error&#39;</code> listener to the
<code class="prettyprint">source</code>. This way you only have to handle errors on the <code class="prettyprint">delayedStream</code>
object, rather than in two places.</p>

<h3 id="buffer-limits">Buffer limits</h3>

<p>delayed-stream provides a <code class="prettyprint">maxDataSize</code> property that can be used to limit
the amount of data being buffered. In order to protect you from bad <code class="prettyprint">source</code>
streams that don&rsquo;t react to <code class="prettyprint">source.pause()</code>, this feature is enabled by
default.</p>

<h2 id="api">API</h2>

<h3 id="delayedstream-create-source-options">DelayedStream.create(source, [options])</h3>

<p>Returns a new <code class="prettyprint">delayedStream</code>. Available options are:</p>

<ul>
<li><code class="prettyprint">pauseStream</code></li>
<li><code class="prettyprint">maxDataSize</code></li>
</ul>

<p>The description for those properties can be found below.</p>

<h3 id="delayedstream-source">delayedStream.source</h3>

<p>The <code class="prettyprint">source</code> stream managed by this object. This is useful if you are
passing your <code class="prettyprint">delayedStream</code> around, and you still want to access properties
on the <code class="prettyprint">source</code> object.</p>

<h3 id="delayedstream-pausestream-true">delayedStream.pauseStream = true</h3>

<p>Whether to pause the underlaying <code class="prettyprint">source</code> when calling
<code class="prettyprint">DelayedStream.create()</code>. Modifying this property afterwards has no effect.</p>

<h3 id="delayedstream-maxdatasize-1024-1024">delayedStream.maxDataSize = 1024 * 1024</h3>

<p>The amount of data to buffer before emitting an <code class="prettyprint">error</code>.</p>

<p>If the underlaying source is emitting <code class="prettyprint">Buffer</code> objects, the <code class="prettyprint">maxDataSize</code>
refers to bytes.</p>

<p>If the underlaying source is emitting JavaScript strings, the size refers to
characters.</p>

<p>If you know what you are doing, you can set this property to <code class="prettyprint">Infinity</code> to
disable this feature. You can also modify this property during runtime.</p>

<h3 id="delayedstream-datasize-0">delayedStream.dataSize = 0</h3>

<p>The amount of data buffered so far.</p>

<h3 id="delayedstream-readable">delayedStream.readable</h3>

<p>An ECMA5 getter that returns the value of <code class="prettyprint">source.readable</code>.</p>

<h3 id="delayedstream-resume">delayedStream.resume()</h3>

<p>If the <code class="prettyprint">delayedStream</code> has not been released so far, <code class="prettyprint">delayedStream.release()</code>
is called.</p>

<p>In either case, <code class="prettyprint">source.resume()</code> is called.</p>

<h3 id="delayedstream-pause">delayedStream.pause()</h3>

<p>Calls <code class="prettyprint">source.pause()</code>.</p>

<h3 id="delayedstream-pipe-dest">delayedStream.pipe(dest)</h3>

<p>Calls <code class="prettyprint">delayedStream.resume()</code> and then proxies the arguments to <code class="prettyprint">source.pipe</code>.</p>

<h3 id="delayedstream-release">delayedStream.release()</h3>

<p>Emits and clears all events that have been buffered up so far. This does not
resume the underlaying source, use <code class="prettyprint">delayedStream.resume()</code> instead.</p>

<h2 id="license">License</h2>

<p>delayed-stream is licensed under the MIT license.</p>
