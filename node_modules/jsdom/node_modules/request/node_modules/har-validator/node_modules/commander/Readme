<h1 id="commander-js">Commander.js</h1>

<p><a href="http://travis-ci.org/tj/commander.js"><img alt="Build Status" src="https://api.travis-ci.org/tj/commander.js.svg" /></a>
<a href="https://www.npmjs.org/package/commander"><img alt="NPM Version" src="http://img.shields.io/npm/v/commander.svg?style=flat" /></a>
<a href="https://www.npmjs.org/package/commander"><img alt="NPM Downloads" src="https://img.shields.io/npm/dm/commander.svg?style=flat" /></a>
<a href="https://gitter.im/tj/commander.js?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge"><img alt="Join the chat at https://gitter.im/tj/commander.js" src="https://badges.gitter.im/Join%20Chat.svg" /></a></p>

<p>The complete solution for <a href="http://nodejs.org">node.js</a> command-line interfaces, inspired by Ruby&rsquo;s <a href="https://github.com/tj/commander">commander</a>.<br>
  <a href="http://tj.github.com/commander.js/">API documentation</a></p>

<h2 id="installation">Installation</h2>

<p>$ npm install commander</p>

<h2 id="option-parsing">Option parsing</h2>

<p>Options with commander are defined with the <code class="prettyprint">.option()</code> method, also serving as documentation for the options. The example below parses args and options from <code class="prettyprint">process.argv</code>, leaving remaining args as the <code class="prettyprint">program.args</code> array which were not consumed by options.</p>
<pre class="highlight javascript"><code><span class="cp">#!/usr/bin/env node
</span>
<span class="cm">/**
 * Module dependencies.
 */</span>

<span class="kd">var</span> <span class="nx">program</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'commander'</span><span class="p">);</span>

<span class="nx">program</span>
  <span class="p">.</span><span class="nx">version</span><span class="p">(</span><span class="s1">'0.0.1'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">option</span><span class="p">(</span><span class="s1">'-p, --peppers'</span><span class="p">,</span> <span class="s1">'Add peppers'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">option</span><span class="p">(</span><span class="s1">'-P, --pineapple'</span><span class="p">,</span> <span class="s1">'Add pineapple'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">option</span><span class="p">(</span><span class="s1">'-b, --bbq-sauce'</span><span class="p">,</span> <span class="s1">'Add bbq sauce'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">option</span><span class="p">(</span><span class="s1">'-c, --cheese [type]'</span><span class="p">,</span> <span class="s1">'Add the specified type of cheese [marble]'</span><span class="p">,</span> <span class="s1">'marble'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'you ordered a pizza with:'</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">program</span><span class="p">.</span><span class="nx">peppers</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'  - peppers'</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">program</span><span class="p">.</span><span class="nx">pineapple</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'  - pineapple'</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">program</span><span class="p">.</span><span class="nx">bbqSauce</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'  - bbq'</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'  - %s cheese'</span><span class="p">,</span> <span class="nx">program</span><span class="p">.</span><span class="nx">cheese</span><span class="p">);</span>
</code></pre>

<p>Short flags may be passed as a single arg, for example <code class="prettyprint">-abc</code> is equivalent to <code class="prettyprint">-a -b -c</code>. Multi-word options such as &ldquo;&ndash;template-engine&rdquo; are camel-cased, becoming <code class="prettyprint">program.templateEngine</code> etc.</p>

<h2 id="coercion">Coercion</h2>
<pre class="highlight javascript"><code><span class="kd">function</span> <span class="nx">range</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">val</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">'..'</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nb">Number</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">list</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">val</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">','</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">collect</span><span class="p">(</span><span class="nx">val</span><span class="p">,</span> <span class="nx">memo</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">memo</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">memo</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">increaseVerbosity</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span> <span class="nx">total</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">total</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">program</span>
  <span class="p">.</span><span class="nx">version</span><span class="p">(</span><span class="s1">'0.0.1'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">usage</span><span class="p">(</span><span class="s1">'[options] &lt;file ...&gt;'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">option</span><span class="p">(</span><span class="s1">'-i, --integer &lt;n&gt;'</span><span class="p">,</span> <span class="s1">'An integer argument'</span><span class="p">,</span> <span class="nb">parseInt</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">option</span><span class="p">(</span><span class="s1">'-f, --float &lt;n&gt;'</span><span class="p">,</span> <span class="s1">'A float argument'</span><span class="p">,</span> <span class="nb">parseFloat</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">option</span><span class="p">(</span><span class="s1">'-r, --range &lt;a&gt;..&lt;b&gt;'</span><span class="p">,</span> <span class="s1">'A range'</span><span class="p">,</span> <span class="nx">range</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">option</span><span class="p">(</span><span class="s1">'-l, --list &lt;items&gt;'</span><span class="p">,</span> <span class="s1">'A list'</span><span class="p">,</span> <span class="nx">list</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">option</span><span class="p">(</span><span class="s1">'-o, --optional [value]'</span><span class="p">,</span> <span class="s1">'An optional value'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">option</span><span class="p">(</span><span class="s1">'-c, --collect [value]'</span><span class="p">,</span> <span class="s1">'A repeatable value'</span><span class="p">,</span> <span class="nx">collect</span><span class="p">,</span> <span class="p">[])</span>
  <span class="p">.</span><span class="nx">option</span><span class="p">(</span><span class="s1">'-v, --verbose'</span><span class="p">,</span> <span class="s1">'A value that can be increased'</span><span class="p">,</span> <span class="nx">increaseVerbosity</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">' int: %j'</span><span class="p">,</span> <span class="nx">program</span><span class="p">.</span><span class="nx">integer</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">' float: %j'</span><span class="p">,</span> <span class="nx">program</span><span class="p">.</span><span class="kr">float</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">' optional: %j'</span><span class="p">,</span> <span class="nx">program</span><span class="p">.</span><span class="nx">optional</span><span class="p">);</span>
<span class="nx">program</span><span class="p">.</span><span class="nx">range</span> <span class="o">=</span> <span class="nx">program</span><span class="p">.</span><span class="nx">range</span> <span class="o">||</span> <span class="p">[];</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">' range: %j..%j'</span><span class="p">,</span> <span class="nx">program</span><span class="p">.</span><span class="nx">range</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">program</span><span class="p">.</span><span class="nx">range</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">' list: %j'</span><span class="p">,</span> <span class="nx">program</span><span class="p">.</span><span class="nx">list</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">' collect: %j'</span><span class="p">,</span> <span class="nx">program</span><span class="p">.</span><span class="nx">collect</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">' verbosity: %j'</span><span class="p">,</span> <span class="nx">program</span><span class="p">.</span><span class="nx">verbose</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">' args: %j'</span><span class="p">,</span> <span class="nx">program</span><span class="p">.</span><span class="nx">args</span><span class="p">);</span>
</code></pre>

<h2 id="regular-expression">Regular Expression</h2>
<pre class="highlight javascript"><code><span class="nx">program</span>
  <span class="p">.</span><span class="nx">version</span><span class="p">(</span><span class="s1">'0.0.1'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">option</span><span class="p">(</span><span class="s1">'-s --size &lt;size&gt;'</span><span class="p">,</span> <span class="s1">'Pizza size'</span><span class="p">,</span> <span class="sr">/^</span><span class="se">(</span><span class="sr">large|medium|small</span><span class="se">)</span><span class="sr">$/i</span><span class="p">,</span> <span class="s1">'medium'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">option</span><span class="p">(</span><span class="s1">'-d --drink [drink]'</span><span class="p">,</span> <span class="s1">'Drink'</span><span class="p">,</span> <span class="sr">/^</span><span class="se">(</span><span class="sr">coke|pepsi|izze</span><span class="se">)</span><span class="sr">$/i</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">' size: %j'</span><span class="p">,</span> <span class="nx">program</span><span class="p">.</span><span class="nx">size</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">' drink: %j'</span><span class="p">,</span> <span class="nx">program</span><span class="p">.</span><span class="nx">drink</span><span class="p">);</span>
</code></pre>

<h2 id="variadic-arguments">Variadic arguments</h2>

<p>The last argument of a command can be variadic, and only the last argument.  To make an argument variadic you have to
 append <code class="prettyprint">...</code> to the argument name.  Here is an example:</p>
<pre class="highlight javascript"><code><span class="cp">#!/usr/bin/env node
</span>
<span class="cm">/**
 * Module dependencies.
 */</span>

<span class="kd">var</span> <span class="nx">program</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'commander'</span><span class="p">);</span>

<span class="nx">program</span>
  <span class="p">.</span><span class="nx">version</span><span class="p">(</span><span class="s1">'0.0.1'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">command</span><span class="p">(</span><span class="s1">'rmdir &lt;dir&gt; [otherDirs...]'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">action</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">dir</span><span class="p">,</span> <span class="nx">otherDirs</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'rmdir %s'</span><span class="p">,</span> <span class="nx">dir</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">otherDirs</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">otherDirs</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">oDir</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'rmdir %s'</span><span class="p">,</span> <span class="nx">oDir</span><span class="p">);</span>
      <span class="p">});</span>
    <span class="p">}</span>
  <span class="p">});</span>

<span class="nx">program</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">);</span>
</code></pre>

<p>An <code class="prettyprint">Array</code> is used for the value of a variadic argument.  This applies to <code class="prettyprint">program.args</code> as well as the argument passed
 to your action as demonstrated above.</p>

<h2 id="specify-the-argument-syntax">Specify the argument syntax</h2>
<pre class="highlight javascript"><code><span class="cp">#!/usr/bin/env node
</span>
<span class="kd">var</span> <span class="nx">program</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'../'</span><span class="p">);</span>

<span class="nx">program</span>
  <span class="p">.</span><span class="nx">version</span><span class="p">(</span><span class="s1">'0.0.1'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">arguments</span><span class="p">(</span><span class="s1">'&lt;cmd&gt; [env]'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">action</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">cmd</span><span class="p">,</span> <span class="nx">env</span><span class="p">)</span> <span class="p">{</span>
     <span class="nx">cmdValue</span> <span class="o">=</span> <span class="nx">cmd</span><span class="p">;</span>
     <span class="nx">envValue</span> <span class="o">=</span> <span class="nx">env</span><span class="p">;</span>
  <span class="p">});</span>

<span class="nx">program</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">);</span>

<span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">cmdValue</span> <span class="o">===</span> <span class="s1">'undefined'</span><span class="p">)</span> <span class="p">{</span>
   <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">'no command given!'</span><span class="p">);</span>
   <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'command:'</span><span class="p">,</span> <span class="nx">cmdValue</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'environment:'</span><span class="p">,</span> <span class="nx">envValue</span> <span class="o">||</span> <span class="s2">"no environment given"</span><span class="p">);</span>
</code></pre>

<h2 id="git-style-sub-commands">Git-style sub-commands</h2>
<pre class="highlight javascript"><code><span class="c1">// file: ./examples/pm</span>
<span class="kd">var</span> <span class="nx">program</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'..'</span><span class="p">);</span>

<span class="nx">program</span>
  <span class="p">.</span><span class="nx">version</span><span class="p">(</span><span class="s1">'0.0.1'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">command</span><span class="p">(</span><span class="s1">'install [name]'</span><span class="p">,</span> <span class="s1">'install one or more packages'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">command</span><span class="p">(</span><span class="s1">'search [query]'</span><span class="p">,</span> <span class="s1">'search with optional query'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">command</span><span class="p">(</span><span class="s1">'list'</span><span class="p">,</span> <span class="s1">'list packages installed'</span><span class="p">,</span> <span class="p">{</span><span class="na">isDefault</span><span class="p">:</span> <span class="kc">true</span><span class="p">})</span>
  <span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">);</span>
</code></pre>

<p>When <code class="prettyprint">.command()</code> is invoked with a description argument, no <code class="prettyprint">.action(callback)</code> should be called to handle sub-commands, otherwise there will be an error. This tells commander that you&rsquo;re going to use separate executables for sub-commands, much like <code class="prettyprint">git(1)</code> and other popular tools.<br>
The commander will try to search the executables in the directory of the entry script (like <code class="prettyprint">./examples/pm</code>) with the name <code class="prettyprint">program-command</code>, like <code class="prettyprint">pm-install</code>, <code class="prettyprint">pm-search</code>.</p>

<p>Options can be passed with the call to <code class="prettyprint">.command()</code>. Specifying <code class="prettyprint">true</code> for <code class="prettyprint">opts.noHelp</code> will remove the option from the generated help output. Specifying <code class="prettyprint">true</code> for <code class="prettyprint">opts.isDefault</code> will run the subcommand if no other subcommand is specified.</p>

<p>If the program is designed to be installed globally, make sure the executables have proper modes, like <code class="prettyprint">755</code>.</p>

<h3 id="harmony"><code class="prettyprint">--harmony</code></h3>

<p>You can enable <code class="prettyprint">--harmony</code> option in two ways:
* Use <code class="prettyprint">#! /usr/bin/env node --harmony</code> in the sub-commands scripts. Note some os version don’t support this pattern.
* Use the <code class="prettyprint">--harmony</code> option when call the command, like <code class="prettyprint">node --harmony examples/pm publish</code>. The <code class="prettyprint">--harmony</code> option will be preserved when spawning sub-command process.</p>

<h2 id="automated-help">Automated &ndash;help</h2>

<p>The help information is auto-generated based on the information commander already knows about your program, so the following <code class="prettyprint">--help</code> info is for free:</p>
<pre class="highlight plaintext"><code> $ ./examples/pizza --help

   Usage: pizza [options]

   An application for pizzas ordering

   Options:

     -h, --help           output usage information
     -V, --version        output the version number
     -p, --peppers        Add peppers
     -P, --pineapple      Add pineapple
     -b, --bbq            Add bbq sauce
     -c, --cheese &lt;type&gt;  Add the specified type of cheese [marble]
     -C, --no-cheese      You do not want any cheese

</code></pre>

<h2 id="custom-help">Custom help</h2>

<p>You can display arbitrary <code class="prettyprint">-h, --help</code> information
 by listening for &ldquo;&ndash;help&rdquo;. Commander will automatically
 exit once you are done so that the remainder of your program
 does not execute causing undesired behaviours, for example
 in the following executable &ldquo;stuff&rdquo; will not output when
 <code class="prettyprint">--help</code> is used.</p>
<pre class="highlight javascript"><code><span class="cp">#!/usr/bin/env node
</span>
<span class="cm">/**
 * Module dependencies.
 */</span>

<span class="kd">var</span> <span class="nx">program</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'commander'</span><span class="p">);</span>

<span class="nx">program</span>
  <span class="p">.</span><span class="nx">version</span><span class="p">(</span><span class="s1">'0.0.1'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">option</span><span class="p">(</span><span class="s1">'-f, --foo'</span><span class="p">,</span> <span class="s1">'enable some foo'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">option</span><span class="p">(</span><span class="s1">'-b, --bar'</span><span class="p">,</span> <span class="s1">'enable some bar'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">option</span><span class="p">(</span><span class="s1">'-B, --baz'</span><span class="p">,</span> <span class="s1">'enable some baz'</span><span class="p">);</span>

<span class="c1">// must be before .parse() since</span>
<span class="c1">// node's emit() is immediate</span>

<span class="nx">program</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">'--help'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'  Examples:'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">''</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'    $ custom-help --help'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'    $ custom-help -h'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">''</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">program</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'stuff'</span><span class="p">);</span>
</code></pre>

<p>Yields the following help output when <code class="prettyprint">node script-name.js -h</code> or <code class="prettyprint">node script-name.js --help</code> are run:</p>
<pre class="highlight plaintext"><code>
Usage: custom-help [options]

Options:

  -h, --help     output usage information
  -V, --version  output the version number
  -f, --foo      enable some foo
  -b, --bar      enable some bar
  -B, --baz      enable some baz

Examples:

  $ custom-help --help
  $ custom-help -h

</code></pre>

<h2 id="outputhelp-cb">.outputHelp(cb)</h2>

<p>Output help information without exiting.
Optional callback cb allows post-processing of help text before it is displayed.</p>

<p>If you want to display help by default (e.g. if no command was provided), you can use something like:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">program</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'commander'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">colors</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'colors'</span><span class="p">);</span>

<span class="nx">program</span>
  <span class="p">.</span><span class="nx">version</span><span class="p">(</span><span class="s1">'0.0.1'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">command</span><span class="p">(</span><span class="s1">'getstream [url]'</span><span class="p">,</span> <span class="s1">'get stream URL'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">2</span><span class="p">).</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">program</span><span class="p">.</span><span class="nx">outputHelp</span><span class="p">(</span><span class="nx">make_red</span><span class="p">);</span>
  <span class="p">}</span>

<span class="kd">function</span> <span class="nx">make_red</span><span class="p">(</span><span class="nx">txt</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">colors</span><span class="p">.</span><span class="nx">red</span><span class="p">(</span><span class="nx">txt</span><span class="p">);</span> <span class="c1">//display the help text in red on the console</span>
<span class="p">}</span>
</code></pre>

<h2 id="help-cb">.help(cb)</h2>

<p>Output help information and exit immediately.
  Optional callback cb allows post-processing of help text before it is displayed.</p>

<h2 id="examples">Examples</h2>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">program</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'commander'</span><span class="p">);</span>

<span class="nx">program</span>
  <span class="p">.</span><span class="nx">version</span><span class="p">(</span><span class="s1">'0.0.1'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">option</span><span class="p">(</span><span class="s1">'-C, --chdir &lt;path&gt;'</span><span class="p">,</span> <span class="s1">'change the working directory'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">option</span><span class="p">(</span><span class="s1">'-c, --config &lt;path&gt;'</span><span class="p">,</span> <span class="s1">'set config path. defaults to ./deploy.conf'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">option</span><span class="p">(</span><span class="s1">'-T, --no-tests'</span><span class="p">,</span> <span class="s1">'ignore test hook'</span><span class="p">)</span>

<span class="nx">program</span>
  <span class="p">.</span><span class="nx">command</span><span class="p">(</span><span class="s1">'setup [env]'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">description</span><span class="p">(</span><span class="s1">'run setup commands for all envs'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">option</span><span class="p">(</span><span class="s2">"-s, --setup_mode [mode]"</span><span class="p">,</span> <span class="s2">"Which setup mode to use"</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">action</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">env</span><span class="p">,</span> <span class="nx">options</span><span class="p">){</span>
    <span class="kd">var</span> <span class="nx">mode</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">setup_mode</span> <span class="o">||</span> <span class="s2">"normal"</span><span class="p">;</span>
    <span class="nx">env</span> <span class="o">=</span> <span class="nx">env</span> <span class="o">||</span> <span class="s1">'all'</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'setup for %s env(s) with %s mode'</span><span class="p">,</span> <span class="nx">env</span><span class="p">,</span> <span class="nx">mode</span><span class="p">);</span>
  <span class="p">});</span>

<span class="nx">program</span>
  <span class="p">.</span><span class="nx">command</span><span class="p">(</span><span class="s1">'exec &lt;cmd&gt;'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">alias</span><span class="p">(</span><span class="s1">'ex'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">description</span><span class="p">(</span><span class="s1">'execute the given remote cmd'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">option</span><span class="p">(</span><span class="s2">"-e, --exec_mode &lt;mode&gt;"</span><span class="p">,</span> <span class="s2">"Which exec mode to use"</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">action</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">cmd</span><span class="p">,</span> <span class="nx">options</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'exec "%s" using %s mode'</span><span class="p">,</span> <span class="nx">cmd</span><span class="p">,</span> <span class="nx">options</span><span class="p">.</span><span class="nx">exec_mode</span><span class="p">);</span>
  <span class="p">}).</span><span class="nx">on</span><span class="p">(</span><span class="s1">'--help'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'  Examples:'</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">();</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'    $ deploy exec sequential'</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'    $ deploy exec async'</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">();</span>
  <span class="p">});</span>

<span class="nx">program</span>
  <span class="p">.</span><span class="nx">command</span><span class="p">(</span><span class="s1">'*'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">action</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">env</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'deploying "%s"'</span><span class="p">,</span> <span class="nx">env</span><span class="p">);</span>
  <span class="p">});</span>

<span class="nx">program</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">);</span>
</code></pre>

<p>More Demos can be found in the <a href="https://github.com/tj/commander.js/tree/master/examples">examples</a> directory.</p>

<h2 id="license">License</h2>

<p>MIT</p>
