<h1 align="center">
    <br>
    <img width="256" src="media/logo.png" alt="pinkie">
    <br>
    <br>
</h1>

<blockquote>
<p>Itty bitty little widdle twinkie pinkie <a href="https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects">ES2015 Promise</a> implementation</p>
</blockquote>

<p><a href="https://travis-ci.org/floatdrop/pinkie"><img alt="Build Status" src="https://travis-ci.org/floatdrop/pinkie.svg?branch=master" /></a>  <a href="https://coveralls.io/github/floatdrop/pinkie?branch=master"><img alt="Coverage Status" src="https://coveralls.io/repos/floatdrop/pinkie/badge.svg?branch=master&amp;service=github" /></a></p>

<p>There are <a href="https://github.com/promises-aplus/promises-spec/blob/master/implementations.md#standalone">tons of Promise implementations</a> out there, but all of them focus on browser compatibility and are often bloated with functionality.</p>

<p>This module is an exact Promise specification polyfill (like <a href="https://github.com/getify/native-promise-only">native-promise-only</a>), but in Node.js land (it should be browserify-able though).</p>

<h2 id="install">Install</h2>
<pre class="highlight plaintext"><code>$ npm install --save pinkie
</code></pre>

<h2 id="usage">Usage</h2>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'fs'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">Promise</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'pinkie'</span><span class="p">);</span>

<span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="s1">'foo.json'</span><span class="p">,</span> <span class="s1">'utf8'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nx">resolve</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">});</span>
<span class="c1">//=&gt; Promise</span>
</code></pre>

<h3 id="api">API</h3>

<p><code class="prettyprint">pinkie</code> exports bare <a href="https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects">ES2015 Promise</a> implementation and polyfills <a href="https://nodejs.org/api/process.html#process_event_unhandledrejection">Node.js rejection events</a>. In case you forgot:</p>

<h4 id="new-promise-executor">new Promise(executor)</h4>

<p>Returns new instance of <code class="prettyprint">Promise</code>.</p>

<h5 id="executor">executor</h5>

<p><em>Required</em><br>
Type: <code class="prettyprint">function</code></p>

<p>Function with two arguments <code class="prettyprint">resolve</code> and <code class="prettyprint">reject</code>. The first argument fulfills the promise, the second argument rejects it.</p>

<h4 id="pinkie-all-promises">pinkie.all(promises)</h4>

<p>Returns a promise that resolves when all of the promises in the <code class="prettyprint">promises</code> Array argument have resolved.</p>

<h4 id="pinkie-race-promises">pinkie.race(promises)</h4>

<p>Returns a promise that resolves or rejects as soon as one of the promises in the <code class="prettyprint">promises</code> Array resolves or rejects, with the value or reason from that promise.</p>

<h4 id="pinkie-reject-reason">pinkie.reject(reason)</h4>

<p>Returns a Promise object that is rejected with the given <code class="prettyprint">reason</code>.</p>

<h4 id="pinkie-resolve-value">pinkie.resolve(value)</h4>

<p>Returns a Promise object that is resolved with the given <code class="prettyprint">value</code>. If the <code class="prettyprint">value</code> is a thenable (i.e. has a then method), the returned promise will &ldquo;follow&rdquo; that thenable, adopting its eventual state; otherwise the returned promise will be fulfilled with the <code class="prettyprint">value</code>.</p>

<h2 id="related">Related</h2>

<ul>
<li><a href="https://github.com/floatdrop/pinkie-promise">pinkie-promise</a> - Returns the native Promise or this module</li>
</ul>

<h2 id="license">License</h2>

<p>MIT Â© <a href="http://github.com/floatdrop">Vsevolod Strukchinsky</a></p>
