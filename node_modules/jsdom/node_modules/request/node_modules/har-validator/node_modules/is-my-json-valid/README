<h1 id="is-my-json-valid">is-my-json-valid</h1>

<p>A <a href="http://json-schema.org/">JSONSchema</a> validator that uses code generation
to be extremely fast</p>
<pre class="highlight plaintext"><code>npm install is-my-json-valid
</code></pre>

<p>It passes the entire JSONSchema v4 test suite except for <code class="prettyprint">remoteRefs</code> and <code class="prettyprint">maxLength</code>/<code class="prettyprint">minLength</code> when using unicode surrogate pairs.</p>

<p><a href="http://travis-ci.org/mafintosh/is-my-json-valid"><img alt="build status" src="http://img.shields.io/travis/mafintosh/is-my-json-valid.svg?style=flat" /></a></p>

<h2 id="usage">Usage</h2>

<p>Simply pass a schema to compile it</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">validator</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'is-my-json-valid'</span><span class="p">)</span>

<span class="kd">var</span> <span class="nx">validate</span> <span class="o">=</span> <span class="nx">validator</span><span class="p">({</span>
  <span class="na">required</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="na">type</span><span class="p">:</span> <span class="s1">'object'</span><span class="p">,</span>
  <span class="na">properties</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">hello</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">required</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">type</span><span class="p">:</span> <span class="s1">'string'</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">})</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'should be valid'</span><span class="p">,</span> <span class="nx">validate</span><span class="p">({</span><span class="na">hello</span><span class="p">:</span> <span class="s1">'world'</span><span class="p">}))</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'should not be valid'</span><span class="p">,</span> <span class="nx">validate</span><span class="p">({}))</span>

<span class="c1">// get the last list of errors by checking validate.errors</span>
<span class="c1">// the following will print [{field: 'data.hello', message: 'is required'}]</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">validate</span><span class="p">.</span><span class="nx">errors</span><span class="p">)</span>
</code></pre>

<p>You can also pass the schema as a string</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">validate</span> <span class="o">=</span> <span class="nx">validator</span><span class="p">(</span><span class="s1">'{"type": ... }'</span><span class="p">)</span>
</code></pre>

<p>Optionally you can use the require submodule to load a schema from <code class="prettyprint">__dirname</code></p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">validator</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'is-my-json-valid/require'</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">validate</span> <span class="o">=</span> <span class="nx">validator</span><span class="p">(</span><span class="s1">'my-schema.json'</span><span class="p">)</span>
</code></pre>

<h2 id="custom-formats">Custom formats</h2>

<p>is-my-json-valid supports the formats specified in JSON schema v4 (such as date-time).
If you want to add your own custom formats pass them as the formats options to the validator</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">validate</span> <span class="o">=</span> <span class="nx">validator</span><span class="p">({</span>
  <span class="na">type</span><span class="p">:</span> <span class="s1">'string'</span><span class="p">,</span>
  <span class="na">required</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="na">format</span><span class="p">:</span> <span class="s1">'only-a'</span>
<span class="p">},</span> <span class="p">{</span>
  <span class="na">formats</span><span class="p">:</span> <span class="p">{</span>
    <span class="s1">'only-a'</span><span class="p">:</span> <span class="o">/^</span><span class="nx">a</span><span class="o">+</span><span class="nx">$</span><span class="o">/</span>
  <span class="p">}</span>
<span class="p">})</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">validate</span><span class="p">(</span><span class="s1">'aa'</span><span class="p">))</span> <span class="c1">// true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">validate</span><span class="p">(</span><span class="s1">'ab'</span><span class="p">))</span> <span class="c1">// false</span>
</code></pre>

<h2 id="external-schemas">External schemas</h2>

<p>You can pass in external schemas that you reference using the <code class="prettyprint">$ref</code> attribute as the <code class="prettyprint">schemas</code> option</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">ext</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">required</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="na">type</span><span class="p">:</span> <span class="s1">'string'</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">schema</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">$ref</span><span class="p">:</span> <span class="s1">'#ext'</span> <span class="c1">// references another schema called ext</span>
<span class="p">}</span>

<span class="c1">// pass the external schemas as an option</span>
<span class="kd">var</span> <span class="nx">validate</span> <span class="o">=</span> <span class="nx">validator</span><span class="p">(</span><span class="nx">schema</span><span class="p">,</span> <span class="p">{</span><span class="na">schemas</span><span class="p">:</span> <span class="p">{</span><span class="na">ext</span><span class="p">:</span> <span class="nx">ext</span><span class="p">}})</span>

<span class="nx">validate</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">)</span> <span class="c1">// returns true</span>
<span class="nx">validate</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span> <span class="c1">// return false</span>
</code></pre>

<h2 id="filtering-away-additional-properties">Filtering away additional properties</h2>

<p>is-my-json-valid supports filtering away properties not in the schema</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">filter</span> <span class="o">=</span> <span class="nx">validator</span><span class="p">.</span><span class="nx">filter</span><span class="p">({</span>
  <span class="na">required</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="na">type</span><span class="p">:</span> <span class="s1">'object'</span><span class="p">,</span>
  <span class="na">properties</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">hello</span><span class="p">:</span> <span class="p">{</span><span class="na">type</span><span class="p">:</span> <span class="s1">'string'</span><span class="p">,</span> <span class="na">required</span><span class="p">:</span> <span class="kc">true</span><span class="p">}</span>
  <span class="p">},</span>
  <span class="na">additionalProperties</span><span class="p">:</span> <span class="kc">false</span>
<span class="p">})</span>

<span class="kd">var</span> <span class="nx">doc</span> <span class="o">=</span> <span class="p">{</span><span class="na">hello</span><span class="p">:</span> <span class="s1">'world'</span><span class="p">,</span> <span class="na">notInSchema</span><span class="p">:</span> <span class="kc">true</span><span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">filter</span><span class="p">(</span><span class="nx">doc</span><span class="p">))</span> <span class="c1">// {hello: 'world'}</span>
</code></pre>

<h2 id="verbose-mode-outputs-the-value-on-errors">Verbose mode outputs the value on errors</h2>

<p>is-my-json-valid outputs the value causing an error when verbose is set to true</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">validate</span> <span class="o">=</span> <span class="nx">validator</span><span class="p">({</span>
  <span class="na">required</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="na">type</span><span class="p">:</span> <span class="s1">'object'</span><span class="p">,</span>
  <span class="na">properties</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">hello</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">required</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">type</span><span class="p">:</span> <span class="s1">'string'</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">},</span> <span class="p">{</span>
  <span class="na">verbose</span><span class="p">:</span> <span class="kc">true</span>
<span class="p">})</span>

<span class="nx">validate</span><span class="p">({</span><span class="na">hello</span><span class="p">:</span> <span class="mi">100</span><span class="p">});</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">validate</span><span class="p">.</span><span class="nx">errors</span><span class="p">)</span> <span class="c1">// {field: 'data.hello', message: 'is the wrong type', value: 100, type: 'string'}</span>
</code></pre>

<h2 id="greedy-mode-tries-to-validate-as-much-as-possible">Greedy mode tries to validate as much as possible</h2>

<p>By default is-my-json-valid bails on first validation error but when greedy is
set to true it tries to validate as much as possible:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">validate</span> <span class="o">=</span> <span class="nx">validator</span><span class="p">({</span>
  <span class="na">type</span><span class="p">:</span> <span class="s1">'object'</span><span class="p">,</span>
  <span class="na">properties</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">x</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">type</span><span class="p">:</span> <span class="s1">'number'</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="na">required</span><span class="p">:</span> <span class="p">[</span><span class="s1">'x'</span><span class="p">,</span> <span class="s1">'y'</span><span class="p">]</span>
<span class="p">},</span> <span class="p">{</span>
  <span class="na">greedy</span><span class="p">:</span> <span class="kc">true</span>
<span class="p">});</span>

<span class="nx">validate</span><span class="p">({</span><span class="na">x</span><span class="p">:</span> <span class="s1">'string'</span><span class="p">});</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">validate</span><span class="p">.</span><span class="nx">errors</span><span class="p">)</span> <span class="c1">// [{field: 'data.y', message: 'is required'},</span>
                             <span class="c1">//  {field: 'data.x', message: 'is the wrong type'}]</span>
</code></pre>

<h2 id="performance">Performance</h2>

<p>is-my-json-valid uses code generation to turn your JSON schema into basic javascript code that is easily optimizeable by v8.</p>

<p>At the time of writing, is-my-json-valid is the <strong>fastest validator</strong> when running</p>

<ul>
<li><a href="https://github.com/Muscula/json-schema-benchmark">json-schema-benchmark</a></li>
<li><a href="http://cosmicrealms.com/blog/2014/08/29/benchmark-of-node-dot-js-json-validation-modules-part-3/">cosmicreals.com benchmark</a></li>
<li><a href="https://github.com/pandastrike/jsck/issues/72#issuecomment-70992684">jsck benchmark</a></li>
<li><a href="https://cdn.rawgit.com/playlyfe/themis/master/benchmark/results.html">themis benchmark</a></li>
<li><a href="https://rawgit.com/zaggino/z-schema/master/benchmark/results.html">z-schema benchmark</a></li>
</ul>

<p>If you know any other relevant benchmarks open a PR and I&rsquo;ll add them.</p>

<h2 id="license">License</h2>

<p>MIT</p>
