<h1 align="center">
    <br>
    <br>
    <img width="360" src="https://cdn.rawgit.com/chalk/chalk/19935d6484811c5e468817f846b7b3d417d7bf4a/logo.svg" alt="chalk">
    <br>
    <br>
    <br>
</h1>

<blockquote>
<p>Terminal string styling done right</p>
</blockquote>

<p><a href="https://travis-ci.org/chalk/chalk"><img alt="Build Status" src="https://travis-ci.org/chalk/chalk.svg?branch=master" /></a>
<a href="https://coveralls.io/r/chalk/chalk?branch=master"><img alt="Coverage Status" src="https://coveralls.io/repos/chalk/chalk/badge.svg?branch=master" /></a>
<a href="https://www.youtube.com/watch?v=9auOCbH5Ns4"><img src="http://img.shields.io/badge/unicorn-approved-ff69b4.svg" /></a></p>

<p><a href="https://github.com/Marak/colors.js">colors.js</a> used to be the most popular string styling module, but it has serious deficiencies like extending <code class="prettyprint">String.prototype</code> which causes all kinds of <a href="https://github.com/yeoman/yo/issues/68">problems</a>. Although there are other ones, they either do too much or not enough.</p>

<p><strong>Chalk is a clean and focused alternative.</strong></p>

<p><img src="https://github.com/chalk/ansi-styles/raw/master/screenshot.png" /></p>

<h2 id="why">Why</h2>

<ul>
<li>Highly performant</li>
<li>Doesn&rsquo;t extend <code class="prettyprint">String.prototype</code></li>
<li>Expressive API</li>
<li>Ability to nest styles</li>
<li>Clean and focused</li>
<li>Auto-detects color support</li>
<li>Actively maintained</li>
<li><a href="https://www.npmjs.com/browse/depended/chalk">Used by ~4500 modules</a> as of July 15, 2015</li>
</ul>

<h2 id="install">Install</h2>
<pre class="highlight plaintext"><code>$ npm install --save chalk
</code></pre>

<h2 id="usage">Usage</h2>

<p>Chalk comes with an easy to use composable API where you just chain and nest the styles you want.</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">chalk</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'chalk'</span><span class="p">);</span>

<span class="c1">// style a string</span>
<span class="nx">chalk</span><span class="p">.</span><span class="nx">blue</span><span class="p">(</span><span class="s1">'Hello world!'</span><span class="p">);</span>

<span class="c1">// combine styled and normal strings</span>
<span class="nx">chalk</span><span class="p">.</span><span class="nx">blue</span><span class="p">(</span><span class="s1">'Hello'</span><span class="p">)</span> <span class="o">+</span> <span class="s1">'World'</span> <span class="o">+</span> <span class="nx">chalk</span><span class="p">.</span><span class="nx">red</span><span class="p">(</span><span class="s1">'!'</span><span class="p">);</span>

<span class="c1">// compose multiple styles using the chainable API</span>
<span class="nx">chalk</span><span class="p">.</span><span class="nx">blue</span><span class="p">.</span><span class="nx">bgRed</span><span class="p">.</span><span class="nx">bold</span><span class="p">(</span><span class="s1">'Hello world!'</span><span class="p">);</span>

<span class="c1">// pass in multiple arguments</span>
<span class="nx">chalk</span><span class="p">.</span><span class="nx">blue</span><span class="p">(</span><span class="s1">'Hello'</span><span class="p">,</span> <span class="s1">'World!'</span><span class="p">,</span> <span class="s1">'Foo'</span><span class="p">,</span> <span class="s1">'bar'</span><span class="p">,</span> <span class="s1">'biz'</span><span class="p">,</span> <span class="s1">'baz'</span><span class="p">);</span>

<span class="c1">// nest styles</span>
<span class="nx">chalk</span><span class="p">.</span><span class="nx">red</span><span class="p">(</span><span class="s1">'Hello'</span><span class="p">,</span> <span class="nx">chalk</span><span class="p">.</span><span class="nx">underline</span><span class="p">.</span><span class="nx">bgBlue</span><span class="p">(</span><span class="s1">'world'</span><span class="p">)</span> <span class="o">+</span> <span class="s1">'!'</span><span class="p">);</span>

<span class="c1">// nest styles of the same type even (color, underline, background)</span>
<span class="nx">chalk</span><span class="p">.</span><span class="nx">green</span><span class="p">(</span>
    <span class="s1">'I am a green line '</span> <span class="o">+</span>
    <span class="nx">chalk</span><span class="p">.</span><span class="nx">blue</span><span class="p">.</span><span class="nx">underline</span><span class="p">.</span><span class="nx">bold</span><span class="p">(</span><span class="s1">'with a blue substring'</span><span class="p">)</span> <span class="o">+</span>
    <span class="s1">' that becomes green again!'</span>
<span class="p">);</span>
</code></pre>

<p>Easily define your own themes.</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">chalk</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'chalk'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">error</span> <span class="o">=</span> <span class="nx">chalk</span><span class="p">.</span><span class="nx">bold</span><span class="p">.</span><span class="nx">red</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">(</span><span class="s1">'Error!'</span><span class="p">));</span>
</code></pre>

<p>Take advantage of console.log <a href="http://nodejs.org/docs/latest/api/console.html#console_console_log_data">string substitution</a>.</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">'Sindre'</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">chalk</span><span class="p">.</span><span class="nx">green</span><span class="p">(</span><span class="s1">'Hello %s'</span><span class="p">),</span> <span class="nx">name</span><span class="p">);</span>
<span class="c1">//=&gt; Hello Sindre</span>
</code></pre>

<h2 id="api">API</h2>

<h3 id="chalk-lt-style-gt-lt-style-gt-string-string">chalk.<code class="prettyprint">&lt;style&gt;[.&lt;style&gt;...](string, [string...])</code></h3>

<p>Example: <code class="prettyprint">chalk.red.bold.underline(&#39;Hello&#39;, &#39;world&#39;);</code></p>

<p>Chain <a href="#styles">styles</a> and call the last one as a method with a string argument. Order doesn&rsquo;t matter, and later styles take precedent in case of a conflict. This simply means that <code class="prettyprint">Chalk.red.yellow.green</code> is equivalent to <code class="prettyprint">Chalk.green</code>.</p>

<p>Multiple arguments will be separated by space.</p>

<h3 id="chalk-enabled">chalk.enabled</h3>

<p>Color support is automatically detected, but you can override it by setting the <code class="prettyprint">enabled</code> property. You should however only do this in your own code as it applies globally to all chalk consumers.</p>

<p>If you need to change this in a reusable module create a new instance:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">chalk</span><span class="p">.</span><span class="nx">constructor</span><span class="p">({</span><span class="na">enabled</span><span class="p">:</span> <span class="kc">false</span><span class="p">});</span>
</code></pre>

<h3 id="chalk-supportscolor">chalk.supportsColor</h3>

<p>Detect whether the terminal <a href="https://github.com/chalk/supports-color">supports color</a>. Used internally and handled for you, but exposed for convenience.</p>

<p>Can be overridden by the user with the flags <code class="prettyprint">--color</code> and <code class="prettyprint">--no-color</code>. For situations where using <code class="prettyprint">--color</code> is not possible, add an environment variable <code class="prettyprint">FORCE_COLOR</code> with any value to force color. Trumps <code class="prettyprint">--no-color</code>.</p>

<h3 id="chalk-styles">chalk.styles</h3>

<p>Exposes the styles as <a href="https://github.com/chalk/ansi-styles">ANSI escape codes</a>.</p>

<p>Generally not useful, but you might need just the <code class="prettyprint">.open</code> or <code class="prettyprint">.close</code> escape code if you&rsquo;re mixing externally styled strings with your own.</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">chalk</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'chalk'</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">chalk</span><span class="p">.</span><span class="nx">styles</span><span class="p">.</span><span class="nx">red</span><span class="p">);</span>
<span class="c1">//=&gt; {open: '\u001b[31m', close: '\u001b[39m'}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">chalk</span><span class="p">.</span><span class="nx">styles</span><span class="p">.</span><span class="nx">red</span><span class="p">.</span><span class="nx">open</span> <span class="o">+</span> <span class="s1">'Hello'</span> <span class="o">+</span> <span class="nx">chalk</span><span class="p">.</span><span class="nx">styles</span><span class="p">.</span><span class="nx">red</span><span class="p">.</span><span class="nx">close</span><span class="p">);</span>
</code></pre>

<h3 id="chalk-hascolor-string">chalk.hasColor(string)</h3>

<p>Check whether a string <a href="https://github.com/chalk/has-ansi">has color</a>.</p>

<h3 id="chalk-stripcolor-string">chalk.stripColor(string)</h3>

<p><a href="https://github.com/chalk/strip-ansi">Strip color</a> from a string.</p>

<p>Can be useful in combination with <code class="prettyprint">.supportsColor</code> to strip color on externally styled text when it&rsquo;s not supported.</p>

<p>Example:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">chalk</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'chalk'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">styledString</span> <span class="o">=</span> <span class="nx">getText</span><span class="p">();</span>

<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">chalk</span><span class="p">.</span><span class="nx">supportsColor</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">styledString</span> <span class="o">=</span> <span class="nx">chalk</span><span class="p">.</span><span class="nx">stripColor</span><span class="p">(</span><span class="nx">styledString</span><span class="p">);</span>
<span class="p">}</span>
</code></pre>

<h2 id="styles">Styles</h2>

<h3 id="modifiers">Modifiers</h3>

<ul>
<li><code class="prettyprint">reset</code></li>
<li><code class="prettyprint">bold</code></li>
<li><code class="prettyprint">dim</code></li>
<li><code class="prettyprint">italic</code> <em>(not widely supported)</em></li>
<li><code class="prettyprint">underline</code></li>
<li><code class="prettyprint">inverse</code></li>
<li><code class="prettyprint">hidden</code></li>
<li><code class="prettyprint">strikethrough</code> <em>(not widely supported)</em></li>
</ul>

<h3 id="colors">Colors</h3>

<ul>
<li><code class="prettyprint">black</code></li>
<li><code class="prettyprint">red</code></li>
<li><code class="prettyprint">green</code></li>
<li><code class="prettyprint">yellow</code></li>
<li><code class="prettyprint">blue</code> <em>(on Windows the bright version is used as normal blue is illegible)</em></li>
<li><code class="prettyprint">magenta</code></li>
<li><code class="prettyprint">cyan</code></li>
<li><code class="prettyprint">white</code></li>
<li><code class="prettyprint">gray</code></li>
</ul>

<h3 id="background-colors">Background colors</h3>

<ul>
<li><code class="prettyprint">bgBlack</code></li>
<li><code class="prettyprint">bgRed</code></li>
<li><code class="prettyprint">bgGreen</code></li>
<li><code class="prettyprint">bgYellow</code></li>
<li><code class="prettyprint">bgBlue</code></li>
<li><code class="prettyprint">bgMagenta</code></li>
<li><code class="prettyprint">bgCyan</code></li>
<li><code class="prettyprint">bgWhite</code></li>
</ul>

<h2 id="256-colors">256-colors</h2>

<p>Chalk does not support anything other than the base eight colors, which guarantees it will work on all terminals and systems. Some terminals, specifically <code class="prettyprint">xterm</code> compliant ones, will support the full range of 8-bit colors. For this the lower level <a href="https://github.com/jbnicolai/ansi-256-colors">ansi-256-colors</a> package can be used.</p>

<h2 id="windows">Windows</h2>

<p>If you&rsquo;re on Windows, do yourself a favor and use <a href="http://bliker.github.io/cmder/"><code class="prettyprint">cmder</code></a> instead of <code class="prettyprint">cmd.exe</code>.</p>

<h2 id="related">Related</h2>

<ul>
<li><a href="https://github.com/chalk/chalk-cli">chalk-cli</a> - CLI for this module</li>
<li><a href="https://github.com/chalk/ansi-styles/">ansi-styles</a> - ANSI escape codes for styling strings in the terminal</li>
<li><a href="https://github.com/chalk/supports-color/">supports-color</a> - Detect whether a terminal supports color</li>
<li><a href="https://github.com/chalk/strip-ansi">strip-ansi</a> - Strip ANSI escape codes</li>
<li><a href="https://github.com/chalk/has-ansi">has-ansi</a> - Check if a string has ANSI escape codes</li>
<li><a href="https://github.com/chalk/ansi-regex">ansi-regex</a> - Regular expression for matching ANSI escape codes</li>
<li><a href="https://github.com/chalk/wrap-ansi">wrap-ansi</a> - Wordwrap a string with ANSI escape codes</li>
</ul>

<h2 id="license">License</h2>

<p>MIT © <a href="http://sindresorhus.com">Sindre Sorhus</a></p>
