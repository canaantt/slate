<h1 id="mime-types">mime-types</h1>

<p><a href="https://npmjs.org/package/mime-types"><img alt="NPM Version" src="https://img.shields.io/npm/v/mime-types.svg" /></a>
<a href="https://npmjs.org/package/mime-types"><img alt="NPM Downloads" src="https://img.shields.io/npm/dm/mime-types.svg" /></a>
<a href="https://nodejs.org/en/download/"><img alt="Node.js Version" src="https://img.shields.io/node/v/mime-types.svg" /></a>
<a href="https://travis-ci.org/jshttp/mime-types"><img alt="Build Status" src="https://img.shields.io/travis/jshttp/mime-types/master.svg" /></a>
<a href="https://coveralls.io/r/jshttp/mime-types"><img alt="Test Coverage" src="https://img.shields.io/coveralls/jshttp/mime-types/master.svg" /></a></p>

<p>The ultimate javascript content-type utility.</p>

<p>Similar to <a href="https://github.com/broofa/node-mime">node-mime</a>, except:</p>

<ul>
<li><strong>No fallbacks.</strong> Instead of naively returning the first available type, <code class="prettyprint">mime-types</code> simply returns <code class="prettyprint">false</code>,
so do <code class="prettyprint">var type = mime.lookup(&#39;unrecognized&#39;) || &#39;application/octet-stream&#39;</code>.</li>
<li>No <code class="prettyprint">new Mime()</code> business, so you could do <code class="prettyprint">var lookup = require(&#39;mime-types&#39;).lookup</code>.</li>
<li>Additional mime types are added such as jade and stylus via <a href="https://github.com/jshttp/mime-db">mime-db</a></li>
<li>No <code class="prettyprint">.define()</code> functionality</li>
</ul>

<p>Otherwise, the API is compatible.</p>

<h2 id="install">Install</h2>
<pre class="highlight shell"><code><span class="gp">$ </span>npm install mime-types
</code></pre>

<h2 id="adding-types">Adding Types</h2>

<p>All mime types are based on <a href="https://github.com/jshttp/mime-db">mime-db</a>,
so open a PR there if you&rsquo;d like to add mime types.</p>

<h2 id="api">API</h2>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">mime</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'mime-types'</span><span class="p">)</span>
</code></pre>

<p>All functions return <code class="prettyprint">false</code> if input is invalid or not found.</p>

<h3 id="mime-lookup-path">mime.lookup(path)</h3>

<p>Lookup the content-type associated with a file.</p>
<pre class="highlight javascript"><code><span class="nx">mime</span><span class="p">.</span><span class="nx">lookup</span><span class="p">(</span><span class="s1">'json'</span><span class="p">)</span>             <span class="c1">// 'application/json'</span>
<span class="nx">mime</span><span class="p">.</span><span class="nx">lookup</span><span class="p">(</span><span class="s1">'.md'</span><span class="p">)</span>              <span class="c1">// 'text/x-markdown'</span>
<span class="nx">mime</span><span class="p">.</span><span class="nx">lookup</span><span class="p">(</span><span class="s1">'file.html'</span><span class="p">)</span>        <span class="c1">// 'text/html'</span>
<span class="nx">mime</span><span class="p">.</span><span class="nx">lookup</span><span class="p">(</span><span class="s1">'folder/file.js'</span><span class="p">)</span>   <span class="c1">// 'application/javascript'</span>
<span class="nx">mime</span><span class="p">.</span><span class="nx">lookup</span><span class="p">(</span><span class="s1">'folder/.htaccess'</span><span class="p">)</span> <span class="c1">// false</span>

<span class="nx">mime</span><span class="p">.</span><span class="nx">lookup</span><span class="p">(</span><span class="s1">'cats'</span><span class="p">)</span> <span class="c1">// false</span>
</code></pre>

<h3 id="mime-contenttype-type">mime.contentType(type)</h3>

<p>Create a full content-type header given a content-type or extension.</p>
<pre class="highlight javascript"><code><span class="nx">mime</span><span class="p">.</span><span class="nx">contentType</span><span class="p">(</span><span class="s1">'markdown'</span><span class="p">)</span>  <span class="c1">// 'text/x-markdown; charset=utf-8'</span>
<span class="nx">mime</span><span class="p">.</span><span class="nx">contentType</span><span class="p">(</span><span class="s1">'file.json'</span><span class="p">)</span> <span class="c1">// 'application/json; charset=utf-8'</span>

<span class="c1">// from a full path</span>
<span class="nx">mime</span><span class="p">.</span><span class="nx">contentType</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">extname</span><span class="p">(</span><span class="s1">'/path/to/file.json'</span><span class="p">))</span> <span class="c1">// 'application/json; charset=utf-8'</span>
</code></pre>

<h3 id="mime-extension-type">mime.extension(type)</h3>

<p>Get the default extension for a content-type.</p>
<pre class="highlight javascript"><code><span class="nx">mime</span><span class="p">.</span><span class="nx">extension</span><span class="p">(</span><span class="s1">'application/octet-stream'</span><span class="p">)</span> <span class="c1">// 'bin'</span>
</code></pre>

<h3 id="mime-charset-type">mime.charset(type)</h3>

<p>Lookup the implied default charset of a content-type.</p>
<pre class="highlight javascript"><code><span class="nx">mime</span><span class="p">.</span><span class="nx">charset</span><span class="p">(</span><span class="s1">'text/x-markdown'</span><span class="p">)</span> <span class="c1">// 'UTF-8'</span>
</code></pre>

<h3 id="var-type-mime-types-extension">var type = mime.types[extension]</h3>

<p>A map of content-types by extension.</p>

<h3 id="extensions-mime-extensions-type">[extensions&hellip;] = mime.extensions[type]</h3>

<p>A map of extensions by content-type.</p>

<h2 id="license">License</h2>

<p><a href="LICENSE">MIT</a></p>
