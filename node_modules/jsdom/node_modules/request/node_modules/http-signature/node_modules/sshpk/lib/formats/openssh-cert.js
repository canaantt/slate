// Copyright 2016 Joyent, Inc.
function verify(e,r){return!1}function read(e,r){Buffer.isBuffer(e)&&(e=e.toString("ascii"));var t=e.trim().split(/[ \t\n]+/g);if(t.length<2||t.length>3)throw new Error("Not a valid SSH certificate line");var s=t[0],n=t[1];return n=new Buffer(n,"base64"),fromBuffer(n,s)}function fromBuffer(e,r,t){var s=new SSHBuffer({buffer:e}),n=s.readString();if(void 0!==r&&n!==r)throw new Error("SSH certificate algorithm mismatch");void 0===r&&(r=n);var i={};i.signatures={},i.signatures.openssh={},i.signatures.openssh.nonce=s.readBuffer();var a={},u=a.parts=[];a.type=getAlg(r);for(var f=algs.info[a.type].parts.length;u.length<f;)u.push(s.readPart());assert.ok(u.length>=1,"key must have at least one part");var o=algs.info[a.type];if("ecdsa"===a.type){var c=ECDSA_ALGO.exec(r);assert.ok(null!==c),assert.strictEqual(c[1],u[0].data.toString())}for(var d=0;d<o.parts.length;++d)if(u[d].name=o.parts[d],"curve"!==u[d].name&&o.normalize!==!1){var p=u[d];p.data=utils.mpNormalize(p.data)}i.subjectKey=new Key(a),i.serial=s.readInt64();var h=TYPES[s.readInt()];assert.string(h,"valid cert type"),i.signatures.openssh.keyId=s.readString();for(var v=[],g=s.readBuffer(),y=new SSHBuffer({buffer:g});!y.atEnd();)v.push(y.readString());0===v.length&&(v=["*"]),i.subjects=v.map(function(e){if("user"===h)return Identity.forUser(e);if("host"===h)return Identity.forHost(e);throw new Error("Unknown identity type "+h)}),i.validFrom=int64ToDate(s.readInt64()),i.validUntil=int64ToDate(s.readInt64()),i.signatures.openssh.critical=s.readBuffer(),i.signatures.openssh.exts=s.readBuffer(),s.readBuffer();var l=s.readBuffer();i.issuerKey=rfc4253.read(l),i.issuer=Identity.forHost("**");var w=s.readBuffer();return i.signatures.openssh.signature=Signature.parse(w,i.issuerKey.type,"ssh"),void 0!==t&&(t.remainder=s.remainder(),t.consumed=s._offset),new Certificate(i)}function int64ToDate(e){var r=4294967296*e.readUInt32BE(0);r+=e.readUInt32BE(4);var t=new Date;return t.setTime(1e3*r),t.sourceInt64=e,t}function dateToInt64(e){if(void 0!==e.sourceInt64)return e.sourceInt64;var r=Math.round(e.getTime()/1e3),t=Math.floor(r/4294967296),s=Math.floor(r%4294967296),n=new Buffer(8);return n.writeUInt32BE(t,0),n.writeUInt32BE(s,4),n}function sign(e,r){void 0===e.signatures.openssh&&(e.signatures.openssh={});try{var t=toBuffer(e,!0)}catch(s){return delete e.signatures.openssh,!1}var n=e.signatures.openssh,i=void 0;("rsa"===r.type||"dsa"===r.type)&&(i="sha1");var a=r.createSign(i);return a.write(t),n.signature=a.sign(),!0}function write(e,r){void 0===r&&(r={});var t=toBuffer(e),s=getCertType(e.subjectKey)+" "+t.toString("base64");return r.comment&&(s=s+" "+r.comment),s}function toBuffer(e,r){assert.object(e.signatures.openssh,"signature for openssh format");var t=e.signatures.openssh;void 0===t.nonce&&(t.nonce=crypto.randomBytes(16));var s=new SSHBuffer({});s.writeString(getCertType(e.subjectKey)),s.writeBuffer(t.nonce);var n=e.subjectKey,i=algs.info[n.type];i.parts.forEach(function(e){s.writePart(n.part[e])}),s.writeInt64(e.serial);var a=e.subjects[0].type;assert.notStrictEqual(a,"unknown"),e.subjects.forEach(function(e){assert.strictEqual(e.type,a)}),a=TYPES[a],s.writeInt(a),void 0===t.keyId&&(t.keyId=e.subjects[0].type+"_"+(e.subjects[0].uid||e.subjects[0].hostname)),s.writeString(t.keyId);var u=new SSHBuffer({});return e.subjects.forEach(function(e){a===TYPES.host?u.writeString(e.hostname):a===TYPES.user&&u.writeString(e.uid)}),s.writeBuffer(u.toBuffer()),s.writeInt64(dateToInt64(e.validFrom)),s.writeInt64(dateToInt64(e.validUntil)),void 0===t.critical&&(t.critical=new Buffer(0)),s.writeBuffer(t.critical),void 0===t.exts&&(t.exts=new Buffer(0)),s.writeBuffer(t.exts),s.writeBuffer(new Buffer(0)),u=rfc4253.write(e.issuerKey),s.writeBuffer(u),r||s.writeBuffer(t.signature.toBuffer("ssh")),s.toBuffer()}function getAlg(e){if("ssh-rsa-cert-v01@openssh.com"===e)return"rsa";if("ssh-dss-cert-v01@openssh.com"===e)return"dsa";if(e.match(ECDSA_ALGO))return"ecdsa";if("ssh-ed25519-cert-v01@openssh.com"===e)return"ed25519";throw new Error("Unsupported cert type "+e)}function getCertType(e){if("rsa"===e.type)return"ssh-rsa-cert-v01@openssh.com";if("dsa"===e.type)return"ssh-dss-cert-v01@openssh.com";if("ecdsa"===e.type)return"ecdsa-sha2-"+e.curve+"-cert-v01@openssh.com";if("ed25519"===e.type)return"ssh-ed25519-cert-v01@openssh.com";throw new Error("Unsupported key type "+e.type)}module.exports={read:read,verify:verify,sign:sign,write:write,fromBuffer:fromBuffer,toBuffer:toBuffer};var assert=require("assert-plus"),SSHBuffer=require("../ssh-buffer"),crypto=require("crypto"),algs=require("../algs"),Key=require("../key"),PrivateKey=require("../private-key"),Identity=require("../identity"),rfc4253=require("./rfc4253"),Signature=require("../signature"),utils=require("../utils"),Certificate=require("../certificate"),TYPES={user:1,host:2};Object.keys(TYPES).forEach(function(e){TYPES[TYPES[e]]=e});var ECDSA_ALGO=/^ecdsa-sha2-([^@-]+)-cert-v01@openssh.com$/;