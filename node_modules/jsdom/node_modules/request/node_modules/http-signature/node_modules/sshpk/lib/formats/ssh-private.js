// Copyright 2015 Joyent, Inc.
function read(e,r){return pem.read(e,r)}function readSSHPrivate(e,r,t){r=new SSHBuffer({buffer:r});var n=r.readCString();assert.strictEqual(n,MAGIC,"bad magic string");var i=r.readString(),a=r.readString(),f=r.readBuffer(),s=r.readInt();if(1!==s)throw new Error("OpenSSH-format key file contains multiple keys: this is unsupported.");var o=r.readBuffer();if("public"===e)return assert.ok(r.atEnd(),"excess bytes left after key"),rfc4253.read(o);var u=r.readBuffer();assert.ok(r.atEnd(),"excess bytes left after key");var p=new SSHBuffer({buffer:f});switch(a){case"none":if("none"!==i)throw new Error('OpenSSH-format key uses KDF "none" but specifies a cipher other than "none"');break;case"bcrypt":var c=p.readBuffer(),d=p.readInt(),y=utils.opensshCipherInfo(i);if(void 0===bcrypt&&(bcrypt=require("bcrypt-pbkdf")),"string"==typeof t.passphrase&&(t.passphrase=new Buffer(t.passphrase,"utf-8")),!Buffer.isBuffer(t.passphrase))throw new errors.KeyEncryptedError(t.filename,"OpenSSH");var w=new Uint8Array(t.passphrase),l=new Uint8Array(c),S=new Uint8Array(y.keySize+y.blockSize),h=bcrypt.pbkdf(w,w.length,l,l.length,S,S.length,d);if(0!==h)throw new Error("bcrypt_pbkdf function returned failure, parameters invalid");S=new Buffer(S);var v=S.slice(0,y.keySize),b=S.slice(y.keySize,y.keySize+y.blockSize),k=crypto.createDecipheriv(y.opensslName,v,b);k.setAutoPadding(!1);var B,g=[];for(k.once("error",function(e){if(-1!==e.toString().indexOf("bad decrypt"))throw new Error("Incorrect passphrase supplied, could not decrypt key");throw e}),k.write(u),k.end();null!==(B=k.read());)g.push(B);u=Buffer.concat(g);break;default:throw new Error('OpenSSH-format key uses unknown KDF "'+a+'"')}r=new SSHBuffer({buffer:u});var m=r.readInt(),E=r.readInt();if(m!==E)throw new Error("Incorrect passphrase supplied, could not decrypt key");var I={},P=rfc4253.readInternal(I,"private",r.remainder());r.skip(I.consumed);var H=r.readString();return P.comment=H,P}function write(e,r){var t;t=PrivateKey.isPrivateKey(e)?e.toPublic():e;var n,i="none",a="none",f=new Buffer(0),s={blockSize:8};void 0!==r&&(n=r.passphrase,"string"==typeof n&&(n=new Buffer(n,"utf-8")),void 0!==n&&(assert.buffer(n,"options.passphrase"),assert.optionalString(r.cipher,"options.cipher"),i=r.cipher,void 0===i&&(i="aes128-ctr"),s=utils.opensshCipherInfo(i),a="bcrypt"));var o;if(PrivateKey.isPrivateKey(e)){o=new SSHBuffer({});var u=crypto.randomBytes(4).readUInt32BE(0);o.writeInt(u),o.writeInt(u),o.write(e.toBuffer("rfc4253")),o.writeString(e.comment||"");for(var p=1;o._offset%s.blockSize!==0;)o.writeChar(p++);o=o.toBuffer()}switch(a){case"none":break;case"bcrypt":var c=crypto.randomBytes(16),d=16,y=new SSHBuffer({});y.writeBuffer(c),y.writeInt(d),f=y.toBuffer(),void 0===bcrypt&&(bcrypt=require("bcrypt-pbkdf"));var w=new Uint8Array(n),l=new Uint8Array(c),S=new Uint8Array(s.keySize+s.blockSize),h=bcrypt.pbkdf(w,w.length,l,l.length,S,S.length,d);if(0!==h)throw new Error("bcrypt_pbkdf function returned failure, parameters invalid");S=new Buffer(S);var v=S.slice(0,s.keySize),b=S.slice(s.keySize,s.keySize+s.blockSize),k=crypto.createCipheriv(s.opensslName,v,b);k.setAutoPadding(!1);var B,g=[];for(k.once("error",function(e){throw e}),k.write(o),k.end();null!==(B=k.read());)g.push(B);o=Buffer.concat(g);break;default:throw new Error("Unsupported kdf "+a)}var m=new SSHBuffer({});m.writeCString(MAGIC),m.writeString(i),m.writeString(a),m.writeBuffer(f),m.writeInt(1),m.writeBuffer(t.toBuffer("rfc4253")),o&&m.writeBuffer(o),m=m.toBuffer();var E;E=PrivateKey.isPrivateKey(e)?"OPENSSH PRIVATE KEY":"OPENSSH PUBLIC KEY";var I=m.toString("base64"),P=I.length+I.length/70+18+16+2*E.length+10;m=new Buffer(P);var H=0;H+=m.write("-----BEGIN "+E+"-----\n",H);for(var q=0;q<I.length;){var z=q+70;z>I.length&&(z=I.length),H+=m.write(I.slice(q,z),H),m[H++]=10,q=z}return H+=m.write("-----END "+E+"-----\n",H),m.slice(0,H)}module.exports={read:read,readSSHPrivate:readSSHPrivate,write:write};var assert=require("assert-plus"),asn1=require("asn1"),algs=require("../algs"),utils=require("../utils"),crypto=require("crypto"),Key=require("../key"),PrivateKey=require("../private-key"),pem=require("./pem"),rfc4253=require("./rfc4253"),SSHBuffer=require("../ssh-buffer"),errors=require("../errors"),bcrypt,MAGIC="openssh-key-v1";