// Copyright 2015 Joyent, Inc.
function isCompatible(e,r,t){if(null===e||"object"!=typeof e)return!1;if(void 0===t&&(t=r.prototype._sshpkApiVersion),e instanceof r&&r.prototype._sshpkApiVersion[0]==t[0])return!0;for(var s=Object.getPrototypeOf(e),a=0;s.constructor.name!==r.name;)if(s=Object.getPrototypeOf(s),!s||++a>MAX_CLASS_DEPTH)return!1;if(s.constructor.name!==r.name)return!1;var o=s._sshpkApiVersion;return void 0===o&&(o=r._oldVersionDetect(e)),o[0]!=t[0]||o[1]<t[1]?!1:!0}function assertCompatible(e,r,t,s){if(void 0===s&&(s="object"),assert.ok(e,s+" must not be null"),assert.object(e,s+" must be an object"),void 0===t&&(t=r.prototype._sshpkApiVersion),!(e instanceof r&&r.prototype._sshpkApiVersion[0]==t[0])){for(var a=Object.getPrototypeOf(e),o=0;a.constructor.name!==r.name;)a=Object.getPrototypeOf(a),assert.ok(a&&++o<=MAX_CLASS_DEPTH,s+" must be a "+r.name+" instance");assert.strictEqual(a.constructor.name,r.name,s+" must be a "+r.name+" instance");var i=a._sshpkApiVersion;void 0===i&&(i=r._oldVersionDetect(e)),assert.ok(i[0]==t[0]&&i[1]>=t[1],s+" must be compatible with "+r.name+" klass version "+t[0]+"."+t[1])}}function opensslKeyDeriv(e,r,t,s){assert.buffer(r,"salt"),assert.buffer(t,"passphrase"),assert.number(s,"iteration count");var a=CIPHER_LEN[e];assert.object(a,"supported cipher"),r=r.slice(0,PKCS5_SALT_LEN);for(var o,i,n,c=new Buffer(0);c.length<a.key+a.iv;){n=[],i&&n.push(i),n.push(t),n.push(r),o=Buffer.concat(n);for(var p=0;s>p;++p)o=crypto.createHash("md5").update(o).digest();c=Buffer.concat([c,o]),i=o}return{key:c.slice(0,a.key),iv:c.slice(a.key,a.key+a.iv)}}function countZeros(e){for(var r=0,t=8;r<e.length;){var s=1<<t;if((e[r]&s)===s)break;t--,0>t&&(r++,t=8)}return 8*r+(8-t)-1}function bufferSplit(e,r){assert.buffer(e),assert.string(r);for(var t=[],s=0,a=0,o=0;o<e.length;++o)if(e[o]===r.charCodeAt(a)?++a:a=e[o]===r.charCodeAt(0)?1:0,a>=r.length){var i=o+1;t.push(e.slice(s,i-a)),s=i,a=0}return s<=e.length&&t.push(e.slice(s,e.length)),t}function ecNormalize(e,r){if(assert.buffer(e),0===e[0]&&4===e[1])return r?e:e.slice(1);if(4===e[0]){if(!r)return e}else{for(;0===e[0];)e=e.slice(1);if(2===e[0]||3===e[0])throw new Error("Compressed elliptic curve points are not supported");if(4!==e[0])throw new Error("Not a valid elliptic curve point");if(!r)return e}var t=new Buffer(e.length+1);return t[0]=0,e.copy(t,1),t}function mpNormalize(e){for(assert.buffer(e);e.length>1&&0===e[0]&&0===(128&e[1]);)e=e.slice(1);if(128===(128&e[0])){var r=new Buffer(e.length+1);r[0]=0,e.copy(r,1),e=r}return e}function bigintToMpBuf(e){var r=new Buffer(e.toByteArray());return r=mpNormalize(r)}function calculateDSAPublic(e,r,t){assert.buffer(e),assert.buffer(r),assert.buffer(t);try{var s=require("jsbn").BigInteger}catch(a){throw new Error("To load a PKCS#8 format DSA private key, the node jsbn library is required.")}e=new s(e),r=new s(r),t=new s(t);var o=e.modPow(t,r),i=bigintToMpBuf(o);return i}function addRSAMissing(e){assert.object(e),assertCompatible(e,PrivateKey,[1,1]);try{var r=require("jsbn").BigInteger}catch(t){throw new Error("To write a PEM private key from this source, the node jsbn lib is required.")}var s,a=new r(e.part.d.data);if(!e.part.dmodp){var o=new r(e.part.p.data),i=a.mod(o.subtract(1));s=bigintToMpBuf(i),e.part.dmodp={name:"dmodp",data:s},e.parts.push(e.part.dmodp)}if(!e.part.dmodq){var n=new r(e.part.q.data),c=a.mod(n.subtract(1));s=bigintToMpBuf(c),e.part.dmodq={name:"dmodq",data:s},e.parts.push(e.part.dmodq)}}function opensshCipherInfo(e){var r={};switch(e){case"3des-cbc":r.keySize=24,r.blockSize=8,r.opensslName="des-ede3-cbc";break;case"blowfish-cbc":r.keySize=16,r.blockSize=8,r.opensslName="bf-cbc";break;case"aes128-cbc":case"aes128-ctr":case"aes128-gcm@openssh.com":r.keySize=16,r.blockSize=16,r.opensslName="aes-128-"+e.slice(7,10);break;case"aes192-cbc":case"aes192-ctr":case"aes192-gcm@openssh.com":r.keySize=24,r.blockSize=16,r.opensslName="aes-192-"+e.slice(7,10);break;case"aes256-cbc":case"aes256-ctr":case"aes256-gcm@openssh.com":r.keySize=32,r.blockSize=16,r.opensslName="aes-256-"+e.slice(7,10);break;default:throw new Error('Unsupported openssl cipher "'+e+'"')}return r}module.exports={bufferSplit:bufferSplit,addRSAMissing:addRSAMissing,calculateDSAPublic:calculateDSAPublic,mpNormalize:mpNormalize,ecNormalize:ecNormalize,countZeros:countZeros,assertCompatible:assertCompatible,isCompatible:isCompatible,opensslKeyDeriv:opensslKeyDeriv,opensshCipherInfo:opensshCipherInfo};var assert=require("assert-plus"),PrivateKey=require("./private-key"),crypto=require("crypto"),MAX_CLASS_DEPTH=3,CIPHER_LEN={"des-ede3-cbc":{key:7,iv:8},"aes-128-cbc":{key:16,iv:16}},PKCS5_SALT_LEN=8;