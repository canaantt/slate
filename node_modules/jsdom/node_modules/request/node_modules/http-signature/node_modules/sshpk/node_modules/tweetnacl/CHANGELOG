<h1 id="tweetnacl-js-changelog">TweetNaCl.js Changelog</h1>

<h2 id="v0-13-2">v0.13.2</h2>

<ul>
<li><p>Fixed undefined variable bug in fast version of Poly1305. No worries, this
bug was <em>never</em> triggered.</p></li>
<li><p>Specified CC0 public domain dedication.</p></li>
<li><p>Updated development dependencies.</p></li>
</ul>

<h2 id="v0-13-1">v0.13.1</h2>

<ul>
<li>Exclude <code class="prettyprint">crypto</code> and <code class="prettyprint">buffer</code> modules from browserify builds.</li>
</ul>

<h2 id="v0-13-0">v0.13.0</h2>

<ul>
<li><p>Made <code class="prettyprint">nacl-fast</code> the default version in NPM package. Now
<code class="prettyprint">require(&quot;tweetnacl&quot;)</code> will use fast version; to get the original version,
use <code class="prettyprint">require(&quot;tweetnacl/nacl.js&quot;)</code>.</p></li>
<li><p>Cleanup temporary array after generating random bytes.</p></li>
</ul>

<h2 id="v0-12-2">v0.12.2</h2>

<ul>
<li>Improved performance of curve operations, making <code class="prettyprint">nacl.scalarMult</code>, <code class="prettyprint">nacl.box</code>,
<code class="prettyprint">nacl.sign</code> and related functions up to 3x faster in <code class="prettyprint">nacl-fast</code> version.</li>
</ul>

<h2 id="v0-12-1">v0.12.1</h2>

<ul>
<li>Significantly improved performance of Salsa20 (~1.5x faster) and
Poly1305 (~3.5x faster) in <code class="prettyprint">nacl-fast</code> version.</li>
</ul>

<h2 id="v0-12-0">v0.12.0</h2>

<ul>
<li>Instead of using the given secret key directly, TweetNaCl.js now copies it to
a new array in <code class="prettyprint">nacl.box.keyPair.fromSecretKey</code> and
<code class="prettyprint">nacl.sign.keyPair.fromSecretKey</code>.</li>
</ul>

<h2 id="v0-11-2">v0.11.2</h2>

<ul>
<li>Added new constant: <code class="prettyprint">nacl.sign.seedLength</code>.</li>
</ul>

<h2 id="v0-11-1">v0.11.1</h2>

<ul>
<li>Even faster hash for both short and long inputs (in <code class="prettyprint">nacl-fast</code>).</li>
</ul>

<h2 id="v0-11-0">v0.11.0</h2>

<ul>
<li><p>Implement <code class="prettyprint">nacl.sign.keyPair.fromSeed</code> to enable creation of sign key pairs
deterministically from a 32-byte seed. (It behaves like
<a href="http://doc.libsodium.org/public-key_cryptography/public-key_signatures.html">libsodium&rsquo;s</a>
<code class="prettyprint">crypto_sign_seed_keypair</code>: the seed becomes a secret part of the secret key.)</p></li>
<li><p>Fast version now has an improved hash implementation that is 2x-5x faster.</p></li>
<li><p>Fixed benchmarks, which may have produced incorrect measurements.</p></li>
</ul>

<h2 id="v0-10-1">v0.10.1</h2>

<ul>
<li>Exported undocumented <code class="prettyprint">nacl.lowlevel.crypto_core_hsalsa20</code>.</li>
</ul>

<h2 id="v0-10-0">v0.10.0</h2>

<ul>
<li><strong>Signature API breaking change!</strong> <code class="prettyprint">nacl.sign</code> and <code class="prettyprint">nacl.sign.open</code> now deal
with signed messages, and new <code class="prettyprint">nacl.sign.detached</code> and
<code class="prettyprint">nacl.sign.detached.verify</code> are available.</li>
</ul>

<p>Previously, <code class="prettyprint">nacl.sign</code> returned a signature, and <code class="prettyprint">nacl.sign.open</code> accepted a
 message and &ldquo;detached&rdquo; signature. This was unlike NaCl&rsquo;s API, which dealt with
 signed messages (concatenation of signature and message).</p>

<p>The new API is:</p>

<p>nacl.sign(message, secretKey) -&gt; signedMessage
      nacl.sign.open(signedMessage, publicKey) -&gt; message | null</p>

<p>Since detached signatures are common, two new API functions were introduced:</p>

<p>nacl.sign.detached(message, secretKey) -&gt; signature
      nacl.sign.detached.verify(message, signature, publicKey) -&gt; true | false</p>

<p>(Note that it&rsquo;s <code class="prettyprint">verify</code>, not <code class="prettyprint">open</code>, and it returns a boolean value, unlike
 <code class="prettyprint">open</code>, which returns an &ldquo;unsigned&rdquo; message.)</p>

<ul>
<li>NPM package now comes without <code class="prettyprint">test</code> directory to keep it small.</li>
</ul>

<h2 id="v0-9-2">v0.9.2</h2>

<ul>
<li>Improved documentation.</li>
<li>Fast version: increased theoretical message size limit from 2^32-1 to 2^52
bytes in Poly1305 (and thus, secretbox and box). However this has no impact
in practice since JavaScript arrays or ArrayBuffers are limited to 32-bit
indexes, and most implementations won&rsquo;t allocate more than a gigabyte or so.
(Obviously, there are no tests for the correctness of implementation.) Also,
it&rsquo;s not recommended to use messages that large without splitting them into
smaller packets anyway.</li>
</ul>

<h2 id="v0-9-1">v0.9.1</h2>

<ul>
<li>Initial release</li>
</ul>
