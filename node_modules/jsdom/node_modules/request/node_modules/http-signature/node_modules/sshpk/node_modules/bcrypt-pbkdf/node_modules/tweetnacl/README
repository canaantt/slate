<h1 id="tweetnacl-js">TweetNaCl.js</h1>

<p>Port of <a href="http://tweetnacl.cr.yp.to">TweetNaCl</a> / <a href="http://nacl.cr.yp.to/">NaCl</a>
to JavaScript for modern browsers and Node.js. Public domain.</p>

<p><a href="https://travis-ci.org/dchest/tweetnacl-js"><img alt="Build Status" src="https://travis-ci.org/dchest/tweetnacl-js.svg?branch=master" />
</a></p>

<p>Demo: <a href="https://tweetnacl.js.org">https://tweetnacl.js.org</a></p>

<p><strong>:warning: Beta version. The library is stable and API is frozen, however
it has not been independently reviewed. If you can help reviewing it, please
<a href="mailto:dmitry@codingrobots.com">contact me</a>.</strong></p>

<h1 id="documentation">Documentation</h1>

<ul>
<li><a href="#overview">Overview</a></li>
<li><a href="#installation">Installation</a></li>
<li><a href="#usage">Usage</a>

<ul>
<li><a href="#public-key-authenticated-encryption-box">Public-key authenticated encryption (box)</a></li>
<li><a href="#secret-key-authenticated-encryption-secretbox">Secret-key authenticated encryption (secretbox)</a></li>
<li><a href="#scalar-multiplication">Scalar multiplication</a></li>
<li><a href="#signatures">Signatures</a></li>
<li><a href="#hashing">Hashing</a></li>
<li><a href="#random-bytes-generation">Random bytes generation</a></li>
<li><a href="#constant-time-comparison">Constant-time comparison</a></li>
</ul></li>
<li><a href="#system-requirements">System requirements</a></li>
<li><a href="#development-and-testing">Development and testing</a></li>
<li><a href="#contributors">Contributors</a></li>
<li><a href="#who-uses-it">Who uses it</a></li>
</ul>

<h2 id="overview">Overview</h2>

<p>The primary goal of this project is to produce a translation of TweetNaCl to
JavaScript which is as close as possible to the original C implementation, plus
a thin layer of idiomatic high-level API on top of it.</p>

<p>There are two versions, you can use either of them:</p>

<ul>
<li><p><code class="prettyprint">nacl.js</code> is the port of TweetNaCl with minimum differences from the
original + high-level API.</p></li>
<li><p><code class="prettyprint">nacl-fast.js</code> is like <code class="prettyprint">nacl.js</code>, but with some functions replaced with
faster versions.</p></li>
</ul>

<h2 id="installation">Installation</h2>

<p>You can install TweetNaCl.js via a package manager:</p>

<p><a href="http://bower.io">Bower</a>:</p>

<p>$ bower install tweetnacl</p>

<p><a href="https://www.npmjs.org/">NPM</a>:</p>

<p>$ npm install tweetnacl</p>

<p>or <a href="https://github.com/dchest/tweetnacl-js/releases">download source code</a>.</p>

<h2 id="usage">Usage</h2>

<p>All API functions accept and return bytes as <code class="prettyprint">Uint8Array</code>s.  If you need to
encode or decode strings, use functions from
<a href="https://github.com/dchest/tweetnacl-util-js">https://github.com/dchest/tweetnacl-util-js</a> or one of the more robust codec
packages.</p>

<p>In Node.js v4 and later <code class="prettyprint">Buffer</code> objects are backed by <code class="prettyprint">Uint8Array</code>s, so you
can freely pass them to TweetNaCl.js functions as arguments. The returned
objects are still <code class="prettyprint">Uint8Array</code>s, so if you need <code class="prettyprint">Buffer</code>s, you&rsquo;ll have to
convert them manually; make sure to convert using copying: <code class="prettyprint">new Buffer(array)</code>,
instead of sharing: <code class="prettyprint">new Buffer(array.buffer)</code>, because some functions return
subarrays of their buffers.</p>

<h3 id="public-key-authenticated-encryption-box">Public-key authenticated encryption (box)</h3>

<p>Implements <em>curve25519-xsalsa20-poly1305</em>.</p>

<h4 id="nacl-box-keypair">nacl.box.keyPair()</h4>

<p>Generates a new random key pair for box and returns it as an object with
<code class="prettyprint">publicKey</code> and <code class="prettyprint">secretKey</code> members:</p>

<p>{
       publicKey: &hellip;,  // Uint8Array with 32-byte public key
       secretKey: &hellip;   // Uint8Array with 32-byte secret key
    }</p>

<h4 id="nacl-box-keypair-fromsecretkey-secretkey">nacl.box.keyPair.fromSecretKey(secretKey)</h4>

<p>Returns a key pair for box with public key corresponding to the given secret
key.</p>

<h4 id="nacl-box-message-nonce-theirpublickey-mysecretkey">nacl.box(message, nonce, theirPublicKey, mySecretKey)</h4>

<p>Encrypt and authenticates message using peer&rsquo;s public key, our secret key, and
the given nonce, which must be unique for each distinct message for a key pair.</p>

<p>Returns an encrypted and authenticated message, which is
<code class="prettyprint">nacl.box.overheadLength</code> longer than the original message.</p>

<h4 id="nacl-box-open-box-nonce-theirpublickey-mysecretkey">nacl.box.open(box, nonce, theirPublicKey, mySecretKey)</h4>

<p>Authenticates and decrypts the given box with peer&rsquo;s public key, our secret
key, and the given nonce.</p>

<p>Returns the original message, or <code class="prettyprint">false</code> if authentication fails.</p>

<h4 id="nacl-box-before-theirpublickey-mysecretkey">nacl.box.before(theirPublicKey, mySecretKey)</h4>

<p>Returns a precomputed shared key which can be used in <code class="prettyprint">nacl.box.after</code> and
<code class="prettyprint">nacl.box.open.after</code>.</p>

<h4 id="nacl-box-after-message-nonce-sharedkey">nacl.box.after(message, nonce, sharedKey)</h4>

<p>Same as <code class="prettyprint">nacl.box</code>, but uses a shared key precomputed with <code class="prettyprint">nacl.box.before</code>.</p>

<h4 id="nacl-box-open-after-box-nonce-sharedkey">nacl.box.open.after(box, nonce, sharedKey)</h4>

<p>Same as <code class="prettyprint">nacl.box.open</code>, but uses a shared key precomputed with <code class="prettyprint">nacl.box.before</code>.</p>

<h4 id="nacl-box-publickeylength-32">nacl.box.publicKeyLength = 32</h4>

<p>Length of public key in bytes.</p>

<h4 id="nacl-box-secretkeylength-32">nacl.box.secretKeyLength = 32</h4>

<p>Length of secret key in bytes.</p>

<h4 id="nacl-box-sharedkeylength-32">nacl.box.sharedKeyLength = 32</h4>

<p>Length of precomputed shared key in bytes.</p>

<h4 id="nacl-box-noncelength-24">nacl.box.nonceLength = 24</h4>

<p>Length of nonce in bytes.</p>

<h4 id="nacl-box-overheadlength-16">nacl.box.overheadLength = 16</h4>

<p>Length of overhead added to box compared to original message.</p>

<h3 id="secret-key-authenticated-encryption-secretbox">Secret-key authenticated encryption (secretbox)</h3>

<p>Implements <em>xsalsa20-poly1305</em>.</p>

<h4 id="nacl-secretbox-message-nonce-key">nacl.secretbox(message, nonce, key)</h4>

<p>Encrypt and authenticates message using the key and the nonce. The nonce must
be unique for each distinct message for this key.</p>

<p>Returns an encrypted and authenticated message, which is
<code class="prettyprint">nacl.secretbox.overheadLength</code> longer than the original message.</p>

<h4 id="nacl-secretbox-open-box-nonce-key">nacl.secretbox.open(box, nonce, key)</h4>

<p>Authenticates and decrypts the given secret box using the key and the nonce.</p>

<p>Returns the original message, or <code class="prettyprint">false</code> if authentication fails.</p>

<h4 id="nacl-secretbox-keylength-32">nacl.secretbox.keyLength = 32</h4>

<p>Length of key in bytes.</p>

<h4 id="nacl-secretbox-noncelength-24">nacl.secretbox.nonceLength = 24</h4>

<p>Length of nonce in bytes.</p>

<h4 id="nacl-secretbox-overheadlength-16">nacl.secretbox.overheadLength = 16</h4>

<p>Length of overhead added to secret box compared to original message.</p>

<h3 id="scalar-multiplication">Scalar multiplication</h3>

<p>Implements <em>curve25519</em>.</p>

<h4 id="nacl-scalarmult-n-p">nacl.scalarMult(n, p)</h4>

<p>Multiplies an integer <code class="prettyprint">n</code> by a group element <code class="prettyprint">p</code> and returns the resulting
group element.</p>

<h4 id="nacl-scalarmult-base-n">nacl.scalarMult.base(n)</h4>

<p>Multiplies an integer <code class="prettyprint">n</code> by a standard group element and returns the resulting
group element.</p>

<h4 id="nacl-scalarmult-scalarlength-32">nacl.scalarMult.scalarLength = 32</h4>

<p>Length of scalar in bytes.</p>

<h4 id="nacl-scalarmult-groupelementlength-32">nacl.scalarMult.groupElementLength = 32</h4>

<p>Length of group element in bytes.</p>

<h3 id="signatures">Signatures</h3>

<p>Implements <a href="http://ed25519.cr.yp.to">ed25519</a>.</p>

<h4 id="nacl-sign-keypair">nacl.sign.keyPair()</h4>

<p>Generates new random key pair for signing and returns it as an object with
<code class="prettyprint">publicKey</code> and <code class="prettyprint">secretKey</code> members:</p>

<p>{
       publicKey: &hellip;,  // Uint8Array with 32-byte public key
       secretKey: &hellip;   // Uint8Array with 64-byte secret key
    }</p>

<h4 id="nacl-sign-keypair-fromsecretkey-secretkey">nacl.sign.keyPair.fromSecretKey(secretKey)</h4>

<p>Returns a signing key pair with public key corresponding to the given
64-byte secret key. The secret key must have been generated by
<code class="prettyprint">nacl.sign.keyPair</code> or <code class="prettyprint">nacl.sign.keyPair.fromSeed</code>.</p>

<h4 id="nacl-sign-keypair-fromseed-seed">nacl.sign.keyPair.fromSeed(seed)</h4>

<p>Returns a new signing key pair generated deterministically from a 32-byte seed.
The seed must contain enough entropy to be secure. This method is not
recommended for general use: instead, use <code class="prettyprint">nacl.sign.keyPair</code> to generate a new
key pair from a random seed.</p>

<h4 id="nacl-sign-message-secretkey">nacl.sign(message, secretKey)</h4>

<p>Signs the message using the secret key and returns a signed message.</p>

<h4 id="nacl-sign-open-signedmessage-publickey">nacl.sign.open(signedMessage, publicKey)</h4>

<p>Verifies the signed message and returns the message without signature.</p>

<p>Returns <code class="prettyprint">null</code> if verification failed.</p>

<h4 id="nacl-sign-detached-message-secretkey">nacl.sign.detached(message, secretKey)</h4>

<p>Signs the message using the secret key and returns a signature.</p>

<h4 id="nacl-sign-detached-verify-message-signature-publickey">nacl.sign.detached.verify(message, signature, publicKey)</h4>

<p>Verifies the signature for the message and returns <code class="prettyprint">true</code> if verification
succeeded or <code class="prettyprint">false</code> if it failed.</p>

<h4 id="nacl-sign-publickeylength-32">nacl.sign.publicKeyLength = 32</h4>

<p>Length of signing public key in bytes.</p>

<h4 id="nacl-sign-secretkeylength-64">nacl.sign.secretKeyLength = 64</h4>

<p>Length of signing secret key in bytes.</p>

<h4 id="nacl-sign-seedlength-32">nacl.sign.seedLength = 32</h4>

<p>Length of seed for <code class="prettyprint">nacl.sign.keyPair.fromSeed</code> in bytes.</p>

<h4 id="nacl-sign-signaturelength-64">nacl.sign.signatureLength = 64</h4>

<p>Length of signature in bytes.</p>

<h3 id="hashing">Hashing</h3>

<p>Implements <em>SHA-512</em>.</p>

<h4 id="nacl-hash-message">nacl.hash(message)</h4>

<p>Returns SHA-512 hash of the message.</p>

<h4 id="nacl-hash-hashlength-64">nacl.hash.hashLength = 64</h4>

<p>Length of hash in bytes.</p>

<h3 id="random-bytes-generation">Random bytes generation</h3>

<h4 id="nacl-randombytes-length">nacl.randomBytes(length)</h4>

<p>Returns a <code class="prettyprint">Uint8Array</code> of the given length containing random bytes of
cryptographic quality.</p>

<p><strong>Implementation note</strong></p>

<p>TweetNaCl.js uses the following methods to generate random bytes,
depending on the platform it runs on:</p>

<ul>
<li><code class="prettyprint">window.crypto.getRandomValues</code> (WebCrypto standard)</li>
<li><code class="prettyprint">window.msCrypto.getRandomValues</code> (Internet Explorer 11)</li>
<li><code class="prettyprint">crypto.randomBytes</code> (Node.js)</li>
</ul>

<p>If the platform doesn&rsquo;t provide a suitable PRNG, the following functions,
which require random numbers, will throw exception:</p>

<ul>
<li><code class="prettyprint">nacl.randomBytes</code></li>
<li><code class="prettyprint">nacl.box.keyPair</code></li>
<li><code class="prettyprint">nacl.sign.keyPair</code></li>
</ul>

<p>Other functions are deterministic and will continue working.</p>

<p>If a platform you are targeting doesn&rsquo;t implement secure random number
generator, but you somehow have a cryptographically-strong source of entropy
(not <code class="prettyprint">Math.random</code>!), and you know what you are doing, you can plug it into
TweetNaCl.js like this:</p>

<p>nacl.setPRNG(function(x, n) {
      // &hellip; copy n random bytes into x &hellip;
    });</p>

<p>Note that <code class="prettyprint">nacl.setPRNG</code> <em>completely replaces</em> internal random byte generator
with the one provided.</p>

<h3 id="constant-time-comparison">Constant-time comparison</h3>

<h4 id="nacl-verify-x-y">nacl.verify(x, y)</h4>

<p>Compares <code class="prettyprint">x</code> and <code class="prettyprint">y</code> in constant time and returns <code class="prettyprint">true</code> if their lengths are
non-zero and equal, and their contents are equal.</p>

<p>Returns <code class="prettyprint">false</code> if either of the arguments has zero length, or arguments have
different lengths, or their contents differ.</p>

<h2 id="system-requirements">System requirements</h2>

<p>TweetNaCl.js supports modern browsers that have a cryptographically secure
pseudorandom number generator and typed arrays, including the latest versions
of:</p>

<ul>
<li>Chrome</li>
<li>Firefox</li>
<li>Safari (Mac, iOS)</li>
<li>Internet Explorer 11</li>
</ul>

<p>Other systems:</p>

<ul>
<li>Node.js</li>
</ul>

<h2 id="development-and-testing">Development and testing</h2>

<p>Install NPM modules needed for development:</p>

<p>$ npm install</p>

<p>To build minified versions:</p>

<p>$ npm run build</p>

<p>Tests use minified version, so make sure to rebuild it every time you change
<code class="prettyprint">nacl.js</code> or <code class="prettyprint">nacl-fast.js</code>.</p>

<h3 id="testing">Testing</h3>

<p>To run tests in Node.js:</p>

<p>$ npm run test-node</p>

<p>By default all tests described here work on <code class="prettyprint">nacl.min.js</code>. To test other
versions, set environment variable <code class="prettyprint">NACL_SRC</code> to the file name you want to test.
For example, the following command will test fast minified version:</p>

<p>$ NACL_SRC=nacl-fast.min.js npm run test-node</p>

<p>To run full suite of tests in Node.js, including comparing outputs of
JavaScript port to outputs of the original C version:</p>

<p>$ npm run test-node-all</p>

<p>To prepare tests for browsers:</p>

<p>$ npm run build-test-browser</p>

<p>and then open <code class="prettyprint">test/browser/test.html</code> (or <code class="prettyprint">test/browser/test-fast.html</code>) to
run them.</p>

<p>To run headless browser tests with <code class="prettyprint">tape-run</code> (powered by Electron):</p>

<p>$ npm run test-browser</p>

<p>(If you get <code class="prettyprint">Error: spawn ENOENT</code>, install <em>xvfb</em>: <code class="prettyprint">sudo apt-get install xvfb</code>.)</p>

<p>To run tests in both Node and Electron:</p>

<p>$ npm test</p>

<h3 id="benchmarking">Benchmarking</h3>

<p>To run benchmarks in Node.js:</p>

<p>$ npm run bench
    $ NACL_SRC=nacl-fast.min.js npm run bench</p>

<p>To run benchmarks in a browser, open <code class="prettyprint">test/benchmark/bench.html</code> (or
<code class="prettyprint">test/benchmark/bench-fast.html</code>).</p>

<h2 id="contributors">Contributors</h2>

<p>JavaScript port:</p>

<ul>
<li><a href="http://github.com/dchest">Dmitry Chestnykh</a> (ported xsalsa20, poly1305, curve25519)</li>
<li><a href="https://github.com/devi">Devi Mandiri</a> (ported curve25519, ed25519, sha512)</li>
</ul>

<p>Original authors of <a href="http://nacl.cr.yp.to">NaCl</a>, <a href="http://tweetnacl.cr.yp.to">TweetNaCl</a>
and <a href="https://github.com/floodyberry/poly1305-donna">Poly1305-donna</a>
(who are <em>not</em> responsible for any errors in this implementation):</p>

<ul>
<li><a href="http://cr.yp.to/djb.html">Daniel J. Bernstein</a></li>
<li>Wesley Janssen</li>
<li><a href="http://hyperelliptic.org/tanja">Tanja Lange</a></li>
<li><a href="http://www.cryptojedi.org/users/peter/">Peter Schwabe</a></li>
<li><a href="https://github.com/mdempsky">Matthew Dempsky</a></li>
<li><a href="https://github.com/floodyberry">Andrew Moon</a></li>
</ul>

<p>Contributors have dedicated their work to the public domain.</p>

<p>This software is distributed without any warranty.</p>

<h2 id="third-party-libraries-based-on-tweetnacl-js">Third-party libraries based on TweetNaCl.js</h2>

<ul>
<li><a href="https://github.com/alax/forward-secrecy">forward-secrecy</a> — Axolotl ratchet implementation</li>
<li><a href="https://github.com/dchest/nacl-stream-js">nacl-stream</a> - streaming encryption</li>
<li><a href="https://github.com/dchest/tweetnacl-auth-js">tweetnacl-auth-js</a> — implementation of <a href="http://nacl.cr.yp.to/auth.html"><code class="prettyprint">crypto_auth</code></a></li>
</ul>

<h2 id="who-uses-it">Who uses it</h2>

<p>Some notable users of TweetNaCl.js:</p>

<ul>
<li><a href="http://minilock.io/">miniLock</a></li>
<li><a href="https://www.stellar.org/">Stellar</a></li>
</ul>
