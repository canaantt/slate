// Copyright 2015 Joyent, Inc.
function read(e,r,s){var t=e;"string"!=typeof e&&(assert.buffer(e,"buf"),e=e.toString("ascii"));var a=e.trim().split("\n"),i=a[0].match(/[-]+[ ]*BEGIN ([A-Z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);assert.ok(i,"invalid PEM header");var c=a[a.length-1].match(/[-]+[ ]*END ([A-Z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);assert.ok(c,"invalid PEM footer"),assert.equal(i[2],c[2]);var n,o=i[2].toLowerCase();i[1]&&(assert.equal(i[1],c[1],"PEM header and footer mismatch"),n=i[1].trim());for(var p={};;){if(a=a.slice(1),i=a[0].match(/^([A-Za-z0-9-]+): (.+)$/),!i)break;p[i[1].toLowerCase()]=i[2]}var u,f,l;if(p["proc-type"]){var h=p["proc-type"].split(",");if("4"===h[0]&&"ENCRYPTED"===h[1]){if("string"==typeof r.passphrase&&(r.passphrase=new Buffer(r.passphrase,"utf-8")),!Buffer.isBuffer(r.passphrase))throw new errors.KeyEncryptedError(r.filename,"PEM");h=p["dek-info"].split(","),assert.ok(2===h.length),u=h[0].toLowerCase(),l=new Buffer(h[1],"hex"),f=utils.opensslKeyDeriv(u,l,r.passphrase,1).key}}if(a=a.slice(0,-1).join(""),e=new Buffer(a,"base64"),u&&f&&l){var k,w=crypto.createDecipheriv(u,f,l),E=[];for(w.once("error",function(e){if(-1!==e.toString().indexOf("bad decrypt"))throw new Error("Incorrect passphrase supplied, could not decrypt key");throw e}),w.write(e),w.end();null!==(k=w.read());)E.push(k);e=Buffer.concat(E)}if(n&&"openssh"===n.toLowerCase())return sshpriv.readSSHPrivate(o,e,r);if(n&&"ssh2"===n.toLowerCase())return rfc4253.readType(o,e,r);var d=new asn1.BerReader(e);return d.originalInput=t,d.readSequence(),n?(s&&assert.strictEqual(s,"pkcs1"),pkcs1.readPkcs1(n,o,d)):(s&&assert.strictEqual(s,"pkcs8"),pkcs8.readPkcs8(n,o,d))}function write(e,r,s){assert.object(e);var t,a={ecdsa:"EC",rsa:"RSA",dsa:"DSA"}[e.type],i=new asn1.BerWriter;if(PrivateKey.isPrivateKey(e))s&&"pkcs8"===s?(t="PRIVATE KEY",pkcs8.writePkcs8(i,e)):(s&&assert.strictEqual(s,"pkcs1"),t=a+" PRIVATE KEY",pkcs1.writePkcs1(i,e));else{if(!Key.isKey(e))throw new Error("key is not a Key or PrivateKey");s&&"pkcs1"===s?(t=a+" PUBLIC KEY",pkcs1.writePkcs1(i,e)):(s&&assert.strictEqual(s,"pkcs8"),t="PUBLIC KEY",pkcs8.writePkcs8(i,e))}var c=i.buffer.toString("base64"),n=c.length+c.length/64+18+16+2*t.length+10,o=new Buffer(n),p=0;p+=o.write("-----BEGIN "+t+"-----\n",p);for(var u=0;u<c.length;){var f=u+64;f>c.length&&(f=c.length),p+=o.write(c.slice(u,f),p),o[p++]=10,u=f}return p+=o.write("-----END "+t+"-----\n",p),o.slice(0,p)}module.exports={read:read,write:write};var assert=require("assert-plus"),asn1=require("asn1"),crypto=require("crypto"),algs=require("../algs"),utils=require("../utils"),Key=require("../key"),PrivateKey=require("../private-key"),pkcs1=require("./pkcs1"),pkcs8=require("./pkcs8"),sshpriv=require("./ssh-private"),rfc4253=require("./rfc4253"),errors=require("../errors");