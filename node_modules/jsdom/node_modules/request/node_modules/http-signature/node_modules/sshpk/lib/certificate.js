// Copyright 2016 Joyent, Inc.
function Certificate(e){assert.object(e,"options"),assert.arrayOfObject(e.subjects,"options.subjects"),utils.assertCompatible(e.subjects[0],Identity,[1,0],"options.subjects"),utils.assertCompatible(e.subjectKey,Key,[1,0],"options.subjectKey"),utils.assertCompatible(e.issuer,Identity,[1,0],"options.issuer"),void 0!==e.issuerKey&&utils.assertCompatible(e.issuerKey,Key,[1,0],"options.issuerKey"),assert.object(e.signatures,"options.signatures"),assert.buffer(e.serial,"options.serial"),assert.date(e.validFrom,"options.validFrom"),assert.date(e.validUntil,"optons.validUntil"),this._hashCache={},this.subjects=e.subjects,this.issuer=e.issuer,this.subjectKey=e.subjectKey,this.issuerKey=e.issuerKey,this.signatures=e.signatures,this.serial=e.serial,this.validFrom=e.validFrom,this.validUntil=e.validUntil}module.exports=Certificate;var assert=require("assert-plus"),algs=require("./algs"),crypto=require("crypto"),Fingerprint=require("./fingerprint"),Signature=require("./signature"),errs=require("./errors"),util=require("util"),utils=require("./utils"),Key=require("./key"),PrivateKey=require("./private-key"),Identity=require("./identity"),formats={};formats.openssh=require("./formats/openssh-cert"),formats.x509=require("./formats/x509"),formats.pem=require("./formats/x509-pem");var CertificateParseError=errs.CertificateParseError,InvalidAlgorithmError=errs.InvalidAlgorithmError;Certificate.formats=formats,Certificate.prototype.toBuffer=function(e,t){return void 0===e&&(e="x509"),assert.string(e,"format"),assert.object(formats[e],"formats[format]"),assert.optionalObject(t,"options"),formats[e].write(this,t)},Certificate.prototype.toString=function(e,t){return void 0===e&&(e="pem"),this.toBuffer(e,t).toString()},Certificate.prototype.fingerprint=function(e){void 0===e&&(e="sha256"),assert.string(e,"algorithm");var t={type:"certificate",hash:this.hash(e),algorithm:e};return new Fingerprint(t)},Certificate.prototype.hash=function(e){if(assert.string(e,"algorithm"),e=e.toLowerCase(),void 0===algs.hashAlgs[e])throw new InvalidAlgorithmError(e);if(this._hashCache[e])return this._hashCache[e];var t=crypto.createHash(e).update(this.toBuffer("x509")).digest();return this._hashCache[e]=t,t},Certificate.prototype.isExpired=function(e){return void 0===e&&(e=new Date),!(e.getTime()>=this.validFrom.getTime()&&e.getTime()<this.validUntil.getTime())},Certificate.prototype.isSignedBy=function(e){return utils.assertCompatible(e,Certificate,[1,0],"issuer"),this.issuer.equals(e.subjects[0])?this.isSignedByKey(e.subjectKey):!1},Certificate.prototype.isSignedByKey=function(e){if(utils.assertCompatible(e,Key,[1,2],"issuerKey"),void 0!==this.issuerKey)return this.issuerKey.fingerprint("sha512").matches(e);var t=Object.keys(this.signatures)[0],i=formats[t].verify(this,e);return i&&(this.issuerKey=e),i},Certificate.prototype.signWith=function(e){utils.assertCompatible(e,PrivateKey,[1,2],"key");for(var t=Object.keys(formats),i=!1,r=0;r<t.length;++r)if("pem"!==t[r]){var s=formats[t[r]].sign(this,e);s===!0&&(i=!0)}if(!i)throw new Error("Failed to sign the certificate for any available certificate formats")},Certificate.createSelfSigned=function(e,t,i){var r;r=Array.isArray(e)?e:[e],assert.arrayOfObject(r),r.forEach(function(e){utils.assertCompatible(e,Identity,[1,0],"subject")}),utils.assertCompatible(t,PrivateKey,[1,2],"private key"),assert.optionalObject(i,"options"),void 0===i&&(i={}),assert.optionalObject(i.validFrom,"options.validFrom"),assert.optionalObject(i.validUntil,"options.validUntil");var s=i.validFrom,a=i.validUntil;if(void 0===s&&(s=new Date),void 0===a){assert.optionalNumber(i.lifetime,"options.lifetime");var o=i.lifetime;void 0===o&&(o=31536e4),a=new Date,a.setTime(a.getTime()+1e3*o)}assert.optionalBuffer(i.serial,"options.serial");var n=i.serial;void 0===n&&(n=new Buffer("0000000000000001","hex"));var l=new Certificate({subjects:r,issuer:r[0],subjectKey:t.toPublic(),issuerKey:t.toPublic(),signatures:{},serial:n,validFrom:s,validUntil:a});return l.signWith(t),l},Certificate.create=function(e,t,i,r,s){var a;a=Array.isArray(e)?e:[e],assert.arrayOfObject(a),a.forEach(function(e){utils.assertCompatible(e,Identity,[1,0],"subject")}),utils.assertCompatible(t,Key,[1,0],"key"),PrivateKey.isPrivateKey(t)&&(t=t.toPublic()),utils.assertCompatible(i,Identity,[1,0],"issuer"),utils.assertCompatible(r,PrivateKey,[1,2],"issuer key"),assert.optionalObject(s,"options"),void 0===s&&(s={}),assert.optionalObject(s.validFrom,"options.validFrom"),assert.optionalObject(s.validUntil,"options.validUntil");var o=s.validFrom,n=s.validUntil;if(void 0===o&&(o=new Date),void 0===n){assert.optionalNumber(s.lifetime,"options.lifetime");var l=s.lifetime;void 0===l&&(l=31536e4),n=new Date,n.setTime(n.getTime()+1e3*l)}assert.optionalBuffer(s.serial,"options.serial");var u=s.serial;void 0===u&&(u=new Buffer("0000000000000001","hex"));var f=new Certificate({subjects:a,issuer:i,subjectKey:t,issuerKey:r.toPublic(),signatures:{},serial:u,validFrom:o,validUntil:n});return f.signWith(r),f},Certificate.parse=function(e,t,i){"string"!=typeof e&&assert.buffer(e,"data"),void 0===t&&(t="auto"),assert.string(t,"format"),"string"==typeof i&&(i={filename:i}),assert.optionalObject(i,"options"),void 0===i&&(i={}),assert.optionalString(i.filename,"options.filename"),void 0===i.filename&&(i.filename="(unnamed)"),assert.object(formats[t],"formats[format]");try{var r=formats[t].read(e,i);return r}catch(s){throw new CertificateParseError(i.filename,t,s)}},Certificate.isCertificate=function(e,t){return utils.isCompatible(e,Certificate,t)},Certificate.prototype._sshpkApiVersion=[1,0],Certificate._oldVersionDetect=function(e){return[1,0]};