<h1 id="request-simplified-http-client">Request - Simplified HTTP client</h1>

<p><a href="https://nodei.co/npm/request/"><img alt="npm package" src="https://nodei.co/npm/request.png?downloads=true&amp;downloadRank=true&amp;stars=true" /></a></p>

<p><a href="https://travis-ci.org/request/request"><img alt="Build status" src="https://img.shields.io/travis/request/request/master.svg?style=flat-square" /></a>
<a href="https://codecov.io/github/request/request?branch=master"><img alt="Coverage" src="https://img.shields.io/codecov/c/github/request/request.svg?style=flat-square" /></a>
<a href="https://coveralls.io/r/request/request"><img alt="Coverage" src="https://img.shields.io/coveralls/request/request.svg?style=flat-square" /></a>
<a href="https://david-dm.org/request/request"><img alt="Dependency Status" src="https://img.shields.io/david/request/request.svg?style=flat-square" /></a>
<a href="https://snyk.io/test/npm/request"><img alt="Known Vulnerabilities" src="https://snyk.io/test/npm/request/badge.svg?style=flat-square" /></a>
<a href="https://gitter.im/request/request?utm_source=badge"><img alt="Gitter" src="https://img.shields.io/badge/gitter-join_chat-blue.svg?style=flat-square" /></a></p>

<h2 id="super-simple-to-use">Super simple to use</h2>

<p>Request is designed to be the simplest way possible to make http calls. It supports HTTPS and follows redirects by default.</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'request'</span><span class="p">);</span>
<span class="nx">request</span><span class="p">(</span><span class="s1">'http://www.google.com'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">error</span> <span class="o">&amp;&amp;</span> <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">==</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">body</span><span class="p">)</span> <span class="c1">// Show the HTML for the Google homepage.</span>
  <span class="p">}</span>
<span class="p">})</span>
</code></pre>

<h2 id="table-of-contents">Table of contents</h2>

<ul>
<li><a href="#streaming">Streaming</a></li>
<li><a href="#forms">Forms</a></li>
<li><a href="#http-authentication">HTTP Authentication</a></li>
<li><a href="#custom-http-headers">Custom HTTP Headers</a></li>
<li><a href="#oauth-signing">OAuth Signing</a></li>
<li><a href="#proxies">Proxies</a></li>
<li><a href="#unix-domain-sockets">Unix Domain Sockets</a></li>
<li><a href="#tlsssl-protocol">TLS/SSL Protocol</a></li>
<li><a href="#support-for-har-12">Support for HAR 1.2</a></li>
<li><a href="#requestoptions-callback"><strong>All Available Options</strong></a></li>
</ul>

<p>Request also offers <a href="#convenience-methods">convenience methods</a> like
<code class="prettyprint">request.defaults</code> and <code class="prettyprint">request.post</code>, and there are
lots of <a href="#examples">usage examples</a> and several
<a href="#debugging">debugging techniques</a>.</p>

<hr>

<h2 id="streaming">Streaming</h2>

<p>You can stream any response to a file stream.</p>
<pre class="highlight javascript"><code><span class="nx">request</span><span class="p">(</span><span class="s1">'http://google.com/doodle.png'</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">createWriteStream</span><span class="p">(</span><span class="s1">'doodle.png'</span><span class="p">))</span>
</code></pre>

<p>You can also stream a file to a PUT or POST request. This method will also check the file extension against a mapping of file extensions to content-types (in this case <code class="prettyprint">application/json</code>) and use the proper <code class="prettyprint">content-type</code> in the PUT request (if the headers don’t already provide one).</p>
<pre class="highlight javascript"><code><span class="nx">fs</span><span class="p">.</span><span class="nx">createReadStream</span><span class="p">(</span><span class="s1">'file.json'</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="s1">'http://mysite.com/obj.json'</span><span class="p">))</span>
</code></pre>

<p>Request can also <code class="prettyprint">pipe</code> to itself. When doing so, <code class="prettyprint">content-type</code> and <code class="prettyprint">content-length</code> are preserved in the PUT headers.</p>
<pre class="highlight javascript"><code><span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'http://google.com/img.png'</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="s1">'http://mysite.com/img.png'</span><span class="p">))</span>
</code></pre>

<p>Request emits a &ldquo;response&rdquo; event when a response is received. The <code class="prettyprint">response</code> argument will be an instance of <a href="https://nodejs.org/api/http.html#http_class_http_incomingmessage">http.IncomingMessage</a>.</p>
<pre class="highlight javascript"><code><span class="nx">request</span>
  <span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'http://google.com/img.png'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">'response'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span><span class="p">)</span> <span class="c1">// 200</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">headers</span><span class="p">[</span><span class="s1">'content-type'</span><span class="p">])</span> <span class="c1">// 'image/png'</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="s1">'http://mysite.com/img.png'</span><span class="p">))</span>
</code></pre>

<p>To easily handle errors when streaming requests, listen to the <code class="prettyprint">error</code> event before piping:</p>
<pre class="highlight javascript"><code><span class="nx">request</span>
  <span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'http://mysite.com/doodle.png'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">'error'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">createWriteStream</span><span class="p">(</span><span class="s1">'doodle.png'</span><span class="p">))</span>
</code></pre>

<p>Now let’s get fancy.</p>
<pre class="highlight javascript"><code><span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">resp</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">url</span> <span class="o">===</span> <span class="s1">'/doodle.png'</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">method</span> <span class="o">===</span> <span class="s1">'PUT'</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">req</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="s1">'http://mysite.com/doodle.png'</span><span class="p">))</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">method</span> <span class="o">===</span> <span class="s1">'GET'</span> <span class="o">||</span> <span class="nx">req</span><span class="p">.</span><span class="nx">method</span> <span class="o">===</span> <span class="s1">'HEAD'</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'http://mysite.com/doodle.png'</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">resp</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">})</span>
</code></pre>

<p>You can also <code class="prettyprint">pipe()</code> from <code class="prettyprint">http.ServerRequest</code> instances, as well as to <code class="prettyprint">http.ServerResponse</code> instances. The HTTP method, headers, and entity-body data will be sent. Which means that, if you don&rsquo;t really care about security, you can do:</p>
<pre class="highlight javascript"><code><span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">resp</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">url</span> <span class="o">===</span> <span class="s1">'/doodle.png'</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">request</span><span class="p">(</span><span class="s1">'http://mysite.com/doodle.png'</span><span class="p">)</span>
    <span class="nx">req</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
    <span class="nx">x</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">resp</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">})</span>
</code></pre>

<p>And since <code class="prettyprint">pipe()</code> returns the destination stream in ≥ Node 0.5.x you can do one line proxying. :)</p>
<pre class="highlight javascript"><code><span class="nx">req</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">request</span><span class="p">(</span><span class="s1">'http://mysite.com/doodle.png'</span><span class="p">)).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">resp</span><span class="p">)</span>
</code></pre>

<p>Also, none of this new functionality conflicts with requests previous features, it just expands them.</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">r</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">defaults</span><span class="p">({</span><span class="s1">'proxy'</span><span class="p">:</span><span class="s1">'http://localproxy.com'</span><span class="p">})</span>

<span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">resp</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">url</span> <span class="o">===</span> <span class="s1">'/doodle.png'</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">r</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'http://google.com/doodle.png'</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">resp</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">})</span>
</code></pre>

<p>You can still use intermediate proxies, the requests will still follow HTTP forwards, etc.</p>

<p><a href="#table-of-contents">back to top</a></p>

<hr>

<h2 id="forms">Forms</h2>

<p><code class="prettyprint">request</code> supports <code class="prettyprint">application/x-www-form-urlencoded</code> and <code class="prettyprint">multipart/form-data</code> form uploads. For <code class="prettyprint">multipart/related</code> refer to the <code class="prettyprint">multipart</code> API.</p>

<h4 id="application-x-www-form-urlencoded-url-encoded-forms">application/x-www-form-urlencoded (URL-Encoded Forms)</h4>

<p>URL-encoded forms are simple.</p>
<pre class="highlight javascript"><code><span class="nx">request</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">'http://service.com/upload'</span><span class="p">,</span> <span class="p">{</span><span class="na">form</span><span class="p">:{</span><span class="na">key</span><span class="p">:</span><span class="s1">'value'</span><span class="p">}})</span>
<span class="c1">// or</span>
<span class="nx">request</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">'http://service.com/upload'</span><span class="p">).</span><span class="nx">form</span><span class="p">({</span><span class="na">key</span><span class="p">:</span><span class="s1">'value'</span><span class="p">})</span>
<span class="c1">// or</span>
<span class="nx">request</span><span class="p">.</span><span class="nx">post</span><span class="p">({</span><span class="na">url</span><span class="p">:</span><span class="s1">'http://service.com/upload'</span><span class="p">,</span> <span class="na">form</span><span class="p">:</span> <span class="p">{</span><span class="na">key</span><span class="p">:</span><span class="s1">'value'</span><span class="p">}},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span><span class="nx">httpResponse</span><span class="p">,</span><span class="nx">body</span><span class="p">){</span> <span class="cm">/* ... */</span> <span class="p">})</span>
</code></pre>

<h4 id="multipart-form-data-multipart-form-uploads">multipart/form-data (Multipart Form Uploads)</h4>

<p>For <code class="prettyprint">multipart/form-data</code> we use the <a href="https://github.com/form-data/form-data">form-data</a> library by <a href="https://github.com/felixge">@felixge</a>. For the most cases, you can pass your upload form data via the <code class="prettyprint">formData</code> option.</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">formData</span> <span class="o">=</span> <span class="p">{</span>
  <span class="c1">// Pass a simple key-value pair</span>
  <span class="na">my_field</span><span class="p">:</span> <span class="s1">'my_value'</span><span class="p">,</span>
  <span class="c1">// Pass data via Buffers</span>
  <span class="na">my_buffer</span><span class="p">:</span> <span class="k">new</span> <span class="nx">Buffer</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]),</span>
  <span class="c1">// Pass data via Streams</span>
  <span class="na">my_file</span><span class="p">:</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">createReadStream</span><span class="p">(</span><span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">'/unicycle.jpg'</span><span class="p">),</span>
  <span class="c1">// Pass multiple values /w an Array</span>
  <span class="na">attachments</span><span class="p">:</span> <span class="p">[</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">createReadStream</span><span class="p">(</span><span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">'/attachment1.jpg'</span><span class="p">),</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">createReadStream</span><span class="p">(</span><span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">'/attachment2.jpg'</span><span class="p">)</span>
  <span class="p">],</span>
  <span class="c1">// Pass optional meta-data with an 'options' object with style: {value: DATA, options: OPTIONS}</span>
  <span class="c1">// Use case: for some types of streams, you'll need to provide "file"-related information manually.</span>
  <span class="c1">// See the `form-data` README for more information about options: https://github.com/form-data/form-data</span>
  <span class="na">custom_file</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">value</span><span class="p">:</span>  <span class="nx">fs</span><span class="p">.</span><span class="nx">createReadStream</span><span class="p">(</span><span class="s1">'/dev/urandom'</span><span class="p">),</span>
    <span class="na">options</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">filename</span><span class="p">:</span> <span class="s1">'topsecret.jpg'</span><span class="p">,</span>
      <span class="na">contentType</span><span class="p">:</span> <span class="s1">'image/jpg'</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">};</span>
<span class="nx">request</span><span class="p">.</span><span class="nx">post</span><span class="p">({</span><span class="na">url</span><span class="p">:</span><span class="s1">'http://service.com/upload'</span><span class="p">,</span> <span class="na">formData</span><span class="p">:</span> <span class="nx">formData</span><span class="p">},</span> <span class="kd">function</span> <span class="nx">optionalCallback</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">httpResponse</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">'upload failed:'</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Upload successful!  Server responded with:'</span><span class="p">,</span> <span class="nx">body</span><span class="p">);</span>
<span class="p">});</span>
</code></pre>

<p>For advanced cases, you can access the form-data object itself via <code class="prettyprint">r.form()</code>. This can be modified until the request is fired on the next cycle of the event-loop. (Note that this calling <code class="prettyprint">form()</code> will clear the currently set form data for that request.)</p>
<pre class="highlight javascript"><code><span class="c1">// NOTE: Advanced use-case, for normal use see 'formData' usage above</span>
<span class="kd">var</span> <span class="nx">r</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">'http://service.com/upload'</span><span class="p">,</span> <span class="kd">function</span> <span class="nx">optionalCallback</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">httpResponse</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{...})</span>
<span class="kd">var</span> <span class="nx">form</span> <span class="o">=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">form</span><span class="p">();</span>
<span class="nx">form</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'my_field'</span><span class="p">,</span> <span class="s1">'my_value'</span><span class="p">);</span>
<span class="nx">form</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'my_buffer'</span><span class="p">,</span> <span class="k">new</span> <span class="nx">Buffer</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]));</span>
<span class="nx">form</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'custom_file'</span><span class="p">,</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">createReadStream</span><span class="p">(</span><span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">'/unicycle.jpg'</span><span class="p">),</span> <span class="p">{</span><span class="na">filename</span><span class="p">:</span> <span class="s1">'unicycle.jpg'</span><span class="p">});</span>
</code></pre>

<p>See the <a href="https://github.com/form-data/form-data">form-data README</a> for more information &amp; examples.</p>

<h4 id="multipart-related">multipart/related</h4>

<p>Some variations in different HTTP implementations require a newline/CRLF before, after, or both before and after the boundary of a <code class="prettyprint">multipart/related</code> request (using the multipart option). This has been observed in the .NET WebAPI version 4.0. You can turn on a boundary preambleCRLF or postamble by passing them as <code class="prettyprint">true</code> to your request options.</p>
<pre class="highlight javascript"><code>  <span class="nx">request</span><span class="p">({</span>
    <span class="na">method</span><span class="p">:</span> <span class="s1">'PUT'</span><span class="p">,</span>
    <span class="na">preambleCRLF</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">postambleCRLF</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">uri</span><span class="p">:</span> <span class="s1">'http://service.com/upload'</span><span class="p">,</span>
    <span class="na">multipart</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">{</span>
        <span class="s1">'content-type'</span><span class="p">:</span> <span class="s1">'application/json'</span><span class="p">,</span>
        <span class="na">body</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span><span class="na">foo</span><span class="p">:</span> <span class="s1">'bar'</span><span class="p">,</span> <span class="na">_attachments</span><span class="p">:</span> <span class="p">{</span><span class="s1">'message.txt'</span><span class="p">:</span> <span class="p">{</span><span class="nl">follows</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">length</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span> <span class="s1">'content_type'</span><span class="p">:</span> <span class="s1">'text/plain'</span> <span class="p">}}})</span>
      <span class="p">},</span>
      <span class="p">{</span> <span class="na">body</span><span class="p">:</span> <span class="s1">'I am an attachment'</span> <span class="p">},</span>
      <span class="p">{</span> <span class="na">body</span><span class="p">:</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">createReadStream</span><span class="p">(</span><span class="s1">'image.png'</span><span class="p">)</span> <span class="p">}</span>
    <span class="p">],</span>
    <span class="c1">// alternatively pass an object containing additional options</span>
    <span class="na">multipart</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">chunked</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
      <span class="na">data</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
          <span class="s1">'content-type'</span><span class="p">:</span> <span class="s1">'application/json'</span><span class="p">,</span>
          <span class="na">body</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span><span class="na">foo</span><span class="p">:</span> <span class="s1">'bar'</span><span class="p">,</span> <span class="na">_attachments</span><span class="p">:</span> <span class="p">{</span><span class="s1">'message.txt'</span><span class="p">:</span> <span class="p">{</span><span class="nl">follows</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">length</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span> <span class="s1">'content_type'</span><span class="p">:</span> <span class="s1">'text/plain'</span> <span class="p">}}})</span>
        <span class="p">},</span>
        <span class="p">{</span> <span class="na">body</span><span class="p">:</span> <span class="s1">'I am an attachment'</span> <span class="p">}</span>
      <span class="p">]</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="kd">function</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">'upload failed:'</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Upload successful!  Server responded with:'</span><span class="p">,</span> <span class="nx">body</span><span class="p">);</span>
  <span class="p">})</span>
</code></pre>

<p><a href="#table-of-contents">back to top</a></p>

<hr>

<h2 id="http-authentication">HTTP Authentication</h2>
<pre class="highlight javascript"><code><span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'http://some.server.com/'</span><span class="p">).</span><span class="nx">auth</span><span class="p">(</span><span class="s1">'username'</span><span class="p">,</span> <span class="s1">'password'</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
<span class="c1">// or</span>
<span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'http://some.server.com/'</span><span class="p">,</span> <span class="p">{</span>
  <span class="s1">'auth'</span><span class="p">:</span> <span class="p">{</span>
    <span class="s1">'user'</span><span class="p">:</span> <span class="s1">'username'</span><span class="p">,</span>
    <span class="s1">'pass'</span><span class="p">:</span> <span class="s1">'password'</span><span class="p">,</span>
    <span class="s1">'sendImmediately'</span><span class="p">:</span> <span class="kc">false</span>
  <span class="p">}</span>
<span class="p">});</span>
<span class="c1">// or</span>
<span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'http://some.server.com/'</span><span class="p">).</span><span class="nx">auth</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="s1">'bearerToken'</span><span class="p">);</span>
<span class="c1">// or</span>
<span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'http://some.server.com/'</span><span class="p">,</span> <span class="p">{</span>
  <span class="s1">'auth'</span><span class="p">:</span> <span class="p">{</span>
    <span class="s1">'bearer'</span><span class="p">:</span> <span class="s1">'bearerToken'</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre>

<p>If passed as an option, <code class="prettyprint">auth</code> should be a hash containing values:</p>

<ul>
<li><code class="prettyprint">user</code> || <code class="prettyprint">username</code></li>
<li><code class="prettyprint">pass</code> || <code class="prettyprint">password</code></li>
<li><code class="prettyprint">sendImmediately</code> (optional)</li>
<li><code class="prettyprint">bearer</code> (optional)</li>
</ul>

<p>The method form takes parameters
<code class="prettyprint">auth(username, password, sendImmediately, bearer)</code>.</p>

<p><code class="prettyprint">sendImmediately</code> defaults to <code class="prettyprint">true</code>, which causes a basic or bearer
authentication header to be sent.  If <code class="prettyprint">sendImmediately</code> is <code class="prettyprint">false</code>, then
<code class="prettyprint">request</code> will retry with a proper authentication header after receiving a
<code class="prettyprint">401</code> response from the server (which must contain a <code class="prettyprint">WWW-Authenticate</code> header
indicating the required authentication method).</p>

<p>Note that you can also specify basic authentication using the URL itself, as
detailed in <a href="http://www.ietf.org/rfc/rfc1738.txt">RFC 1738</a>.  Simply pass the
<code class="prettyprint">user:password</code> before the host with an <code class="prettyprint">@</code> sign:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">username</span> <span class="o">=</span> <span class="s1">'username'</span><span class="p">,</span>
    <span class="nx">password</span> <span class="o">=</span> <span class="s1">'password'</span><span class="p">,</span>
    <span class="nx">url</span> <span class="o">=</span> <span class="s1">'http://'</span> <span class="o">+</span> <span class="nx">username</span> <span class="o">+</span> <span class="s1">':'</span> <span class="o">+</span> <span class="nx">password</span> <span class="o">+</span> <span class="s1">'@some.server.com'</span><span class="p">;</span>

<span class="nx">request</span><span class="p">({</span><span class="na">url</span><span class="p">:</span> <span class="nx">url</span><span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
   <span class="c1">// Do more stuff with 'body' here</span>
<span class="p">});</span>
</code></pre>

<p>Digest authentication is supported, but it only works with <code class="prettyprint">sendImmediately</code>
set to <code class="prettyprint">false</code>; otherwise <code class="prettyprint">request</code> will send basic authentication on the
initial request, which will probably cause the request to fail.</p>

<p>Bearer authentication is supported, and is activated when the <code class="prettyprint">bearer</code> value is
available. The value may be either a <code class="prettyprint">String</code> or a <code class="prettyprint">Function</code> returning a
<code class="prettyprint">String</code>. Using a function to supply the bearer token is particularly useful if
used in conjunction with <code class="prettyprint">defaults</code> to allow a single function to supply the
last known token at the time of sending a request, or to compute one on the fly.</p>

<p><a href="#table-of-contents">back to top</a></p>

<hr>

<h2 id="custom-http-headers">Custom HTTP Headers</h2>

<p>HTTP Headers, such as <code class="prettyprint">User-Agent</code>, can be set in the <code class="prettyprint">options</code> object.
In the example below, we call the github API to find out the number
of stars and forks for the request repository. This requires a
custom <code class="prettyprint">User-Agent</code> header as well as https.</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'request'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">url</span><span class="p">:</span> <span class="s1">'https://api.github.com/repos/request/request'</span><span class="p">,</span>
  <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>
    <span class="s1">'User-Agent'</span><span class="p">:</span> <span class="s1">'request'</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="kd">function</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">error</span> <span class="o">&amp;&amp;</span> <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">==</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">info</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">body</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">info</span><span class="p">.</span><span class="nx">stargazers_count</span> <span class="o">+</span> <span class="s2">" Stars"</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">info</span><span class="p">.</span><span class="nx">forks_count</span> <span class="o">+</span> <span class="s2">" Forks"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">request</span><span class="p">(</span><span class="nx">options</span><span class="p">,</span> <span class="nx">callback</span><span class="p">);</span>
</code></pre>

<p><a href="#table-of-contents">back to top</a></p>

<hr>

<h2 id="oauth-signing">OAuth Signing</h2>

<p><a href="https://tools.ietf.org/html/rfc5849">OAuth version 1.0</a> is supported.  The
default signing algorithm is
<a href="https://tools.ietf.org/html/rfc5849#section-3.4.2">HMAC-SHA1</a>:</p>
<pre class="highlight javascript"><code><span class="c1">// OAuth1.0 - 3-legged server side flow (Twitter example)</span>
<span class="c1">// step 1</span>
<span class="kd">var</span> <span class="nx">qs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'querystring'</span><span class="p">)</span>
  <span class="p">,</span> <span class="nx">oauth</span> <span class="o">=</span>
    <span class="p">{</span> <span class="na">callback</span><span class="p">:</span> <span class="s1">'http://mysite.com/callback/'</span>
    <span class="p">,</span> <span class="na">consumer_key</span><span class="p">:</span> <span class="nx">CONSUMER_KEY</span>
    <span class="p">,</span> <span class="na">consumer_secret</span><span class="p">:</span> <span class="nx">CONSUMER_SECRET</span>
    <span class="p">}</span>
  <span class="p">,</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">'https://api.twitter.com/oauth/request_token'</span>
  <span class="p">;</span>
<span class="nx">request</span><span class="p">.</span><span class="nx">post</span><span class="p">({</span><span class="na">url</span><span class="p">:</span><span class="nx">url</span><span class="p">,</span> <span class="na">oauth</span><span class="p">:</span><span class="nx">oauth</span><span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="nx">r</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Ideally, you would take the body in the response</span>
  <span class="c1">// and construct a URL that a user clicks on (like a sign in button).</span>
  <span class="c1">// The verifier is only available in the response after a user has</span>
  <span class="c1">// verified with twitter that they are authorizing your app.</span>

  <span class="c1">// step 2</span>
  <span class="kd">var</span> <span class="nx">req_data</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">body</span><span class="p">)</span>
  <span class="kd">var</span> <span class="nx">uri</span> <span class="o">=</span> <span class="s1">'https://api.twitter.com/oauth/authenticate'</span>
    <span class="o">+</span> <span class="s1">'?'</span> <span class="o">+</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span><span class="na">oauth_token</span><span class="p">:</span> <span class="nx">req_data</span><span class="p">.</span><span class="nx">oauth_token</span><span class="p">})</span>
  <span class="c1">// redirect the user to the authorize uri</span>

  <span class="c1">// step 3</span>
  <span class="c1">// after the user is redirected back to your server</span>
  <span class="kd">var</span> <span class="nx">auth_data</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">body</span><span class="p">)</span>
    <span class="p">,</span> <span class="nx">oauth</span> <span class="o">=</span>
      <span class="p">{</span> <span class="na">consumer_key</span><span class="p">:</span> <span class="nx">CONSUMER_KEY</span>
      <span class="p">,</span> <span class="na">consumer_secret</span><span class="p">:</span> <span class="nx">CONSUMER_SECRET</span>
      <span class="p">,</span> <span class="na">token</span><span class="p">:</span> <span class="nx">auth_data</span><span class="p">.</span><span class="nx">oauth_token</span>
      <span class="p">,</span> <span class="na">token_secret</span><span class="p">:</span> <span class="nx">req_data</span><span class="p">.</span><span class="nx">oauth_token_secret</span>
      <span class="p">,</span> <span class="na">verifier</span><span class="p">:</span> <span class="nx">auth_data</span><span class="p">.</span><span class="nx">oauth_verifier</span>
      <span class="p">}</span>
    <span class="p">,</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">'https://api.twitter.com/oauth/access_token'</span>
    <span class="p">;</span>
  <span class="nx">request</span><span class="p">.</span><span class="nx">post</span><span class="p">({</span><span class="na">url</span><span class="p">:</span><span class="nx">url</span><span class="p">,</span> <span class="na">oauth</span><span class="p">:</span><span class="nx">oauth</span><span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="nx">r</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ready to make signed requests on behalf of the user</span>
    <span class="kd">var</span> <span class="nx">perm_data</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">body</span><span class="p">)</span>
      <span class="p">,</span> <span class="nx">oauth</span> <span class="o">=</span>
        <span class="p">{</span> <span class="na">consumer_key</span><span class="p">:</span> <span class="nx">CONSUMER_KEY</span>
        <span class="p">,</span> <span class="na">consumer_secret</span><span class="p">:</span> <span class="nx">CONSUMER_SECRET</span>
        <span class="p">,</span> <span class="na">token</span><span class="p">:</span> <span class="nx">perm_data</span><span class="p">.</span><span class="nx">oauth_token</span>
        <span class="p">,</span> <span class="na">token_secret</span><span class="p">:</span> <span class="nx">perm_data</span><span class="p">.</span><span class="nx">oauth_token_secret</span>
        <span class="p">}</span>
      <span class="p">,</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">'https://api.twitter.com/1.1/users/show.json'</span>
      <span class="p">,</span> <span class="nx">qs</span> <span class="o">=</span>
        <span class="p">{</span> <span class="na">screen_name</span><span class="p">:</span> <span class="nx">perm_data</span><span class="p">.</span><span class="nx">screen_name</span>
        <span class="p">,</span> <span class="na">user_id</span><span class="p">:</span> <span class="nx">perm_data</span><span class="p">.</span><span class="nx">user_id</span>
        <span class="p">}</span>
      <span class="p">;</span>
    <span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">({</span><span class="na">url</span><span class="p">:</span><span class="nx">url</span><span class="p">,</span> <span class="na">oauth</span><span class="p">:</span><span class="nx">oauth</span><span class="p">,</span> <span class="na">qs</span><span class="p">:</span><span class="nx">qs</span><span class="p">,</span> <span class="na">json</span><span class="p">:</span><span class="kc">true</span><span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="nx">r</span><span class="p">,</span> <span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span>
    <span class="p">})</span>
  <span class="p">})</span>
<span class="p">})</span>
</code></pre>

<p>For <a href="https://tools.ietf.org/html/rfc5849#section-3.4.3">RSA-SHA1 signing</a>, make
the following changes to the OAuth options object:
* Pass <code class="prettyprint">signature_method : &#39;RSA-SHA1&#39;</code>
* Instead of <code class="prettyprint">consumer_secret</code>, specify a <code class="prettyprint">private_key</code> string in
  <a href="http://how2ssl.com/articles/working_with_pem_files/">PEM format</a></p>

<p>For <a href="http://oauth.net/core/1.0/#anchor22">PLAINTEXT signing</a>, make
the following changes to the OAuth options object:
* Pass <code class="prettyprint">signature_method : &#39;PLAINTEXT&#39;</code></p>

<p>To send OAuth parameters via query params or in a post body as described in The
<a href="http://oauth.net/core/1.0/#consumer_req_param">Consumer Request Parameters</a>
section of the oauth1 spec:
* Pass <code class="prettyprint">transport_method : &#39;query&#39;</code> or <code class="prettyprint">transport_method : &#39;body&#39;</code> in the OAuth
  options object.
* <code class="prettyprint">transport_method</code> defaults to <code class="prettyprint">&#39;header&#39;</code></p>

<p>To use <a href="https://oauth.googlecode.com/svn/spec/ext/body_hash/1.0/oauth-bodyhash.html">Request Body Hash</a> you can either
* Manually generate the body hash and pass it as a string <code class="prettyprint">body_hash: &#39;...&#39;</code>
* Automatically generate the body hash by passing <code class="prettyprint">body_hash: true</code></p>

<p><a href="#table-of-contents">back to top</a></p>

<hr>

<h2 id="proxies">Proxies</h2>

<p>If you specify a <code class="prettyprint">proxy</code> option, then the request (and any subsequent
redirects) will be sent via a connection to the proxy server.</p>

<p>If your endpoint is an <code class="prettyprint">https</code> url, and you are using a proxy, then
request will send a <code class="prettyprint">CONNECT</code> request to the proxy server <em>first</em>, and
then use the supplied connection to connect to the endpoint.</p>

<p>That is, first it will make a request like:</p>
<pre class="highlight plaintext"><code>HTTP/1.1 CONNECT endpoint-server.com:80
Host: proxy-server.com
User-Agent: whatever user agent you specify
</code></pre>

<p>and then the proxy server make a TCP connection to <code class="prettyprint">endpoint-server</code>
on port <code class="prettyprint">80</code>, and return a response that looks like:</p>
<pre class="highlight plaintext"><code>HTTP/1.1 200 OK
</code></pre>

<p>At this point, the connection is left open, and the client is
communicating directly with the <code class="prettyprint">endpoint-server.com</code> machine.</p>

<p>See <a href="https://en.wikipedia.org/wiki/HTTP_tunnel">the wikipedia page on HTTP Tunneling</a>
for more information.</p>

<p>By default, when proxying <code class="prettyprint">http</code> traffic, request will simply make a
standard proxied <code class="prettyprint">http</code> request.  This is done by making the <code class="prettyprint">url</code>
section of the initial line of the request a fully qualified url to
the endpoint.</p>

<p>For example, it will make a single request that looks like:</p>
<pre class="highlight plaintext"><code>HTTP/1.1 GET http://endpoint-server.com/some-url
Host: proxy-server.com
Other-Headers: all go here

request body or whatever
</code></pre>

<p>Because a pure &ldquo;http over http&rdquo; tunnel offers no additional security
or other features, it is generally simpler to go with a
straightforward HTTP proxy in this case.  However, if you would like
to force a tunneling proxy, you may set the <code class="prettyprint">tunnel</code> option to <code class="prettyprint">true</code>.</p>

<p>You can also make a standard proxied <code class="prettyprint">http</code> request by explicitly setting
<code class="prettyprint">tunnel : false</code>, but <strong>note that this will allow the proxy to see the traffic
to/from the destination server</strong>.</p>

<p>If you are using a tunneling proxy, you may set the
<code class="prettyprint">proxyHeaderWhiteList</code> to share certain headers with the proxy.</p>

<p>You can also set the <code class="prettyprint">proxyHeaderExclusiveList</code> to share certain
headers only with the proxy and not with destination host.</p>

<p>By default, this set is:</p>
<pre class="highlight plaintext"><code>accept
accept-charset
accept-encoding
accept-language
accept-ranges
cache-control
content-encoding
content-language
content-length
content-location
content-md5
content-range
content-type
connection
date
expect
max-forwards
pragma
proxy-authorization
referer
te
transfer-encoding
user-agent
via
</code></pre>

<p>Note that, when using a tunneling proxy, the <code class="prettyprint">proxy-authorization</code>
header and any headers from custom <code class="prettyprint">proxyHeaderExclusiveList</code> are
<em>never</em> sent to the endpoint server, but only to the proxy server.</p>

<h3 id="controlling-proxy-behaviour-using-environment-variables">Controlling proxy behaviour using environment variables</h3>

<p>The following environment variables are respected by <code class="prettyprint">request</code>:</p>

<ul>
<li><code class="prettyprint">HTTP_PROXY</code> / <code class="prettyprint">http_proxy</code></li>
<li><code class="prettyprint">HTTPS_PROXY</code> / <code class="prettyprint">https_proxy</code></li>
<li><code class="prettyprint">NO_PROXY</code> / <code class="prettyprint">no_proxy</code></li>
</ul>

<p>When <code class="prettyprint">HTTP_PROXY</code> / <code class="prettyprint">http_proxy</code> are set, they will be used to proxy non-SSL requests that do not have an explicit <code class="prettyprint">proxy</code> configuration option present. Similarly, <code class="prettyprint">HTTPS_PROXY</code> / <code class="prettyprint">https_proxy</code> will be respected for SSL requests that do not have an explicit <code class="prettyprint">proxy</code> configuration option. It is valid to define a proxy in one of the environment variables, but then override it for a specific request, using the <code class="prettyprint">proxy</code> configuration option. Furthermore, the <code class="prettyprint">proxy</code> configuration option can be explicitly set to false / null to opt out of proxying altogether for that request.</p>

<p><code class="prettyprint">request</code> is also aware of the <code class="prettyprint">NO_PROXY</code>/<code class="prettyprint">no_proxy</code> environment variables. These variables provide a granular way to opt out of proxying, on a per-host basis. It should contain a comma separated list of hosts to opt out of proxying. It is also possible to opt of proxying when a particular destination port is used. Finally, the variable may be set to <code class="prettyprint">*</code> to opt out of the implicit proxy configuration of the other environment variables.</p>

<p>Here&rsquo;s some examples of valid <code class="prettyprint">no_proxy</code> values:</p>

<ul>
<li><code class="prettyprint">google.com</code> - don&rsquo;t proxy HTTP/HTTPS requests to Google.</li>
<li><code class="prettyprint">google.com:443</code> - don&rsquo;t proxy HTTPS requests to Google, but <em>do</em> proxy HTTP requests to Google.</li>
<li><code class="prettyprint">google.com:443, yahoo.com:80</code> - don&rsquo;t proxy HTTPS requests to Google, and don&rsquo;t proxy HTTP requests to Yahoo!</li>
<li><code class="prettyprint">*</code> - ignore <code class="prettyprint">https_proxy</code>/<code class="prettyprint">http_proxy</code> environment variables altogether.</li>
</ul>

<p><a href="#table-of-contents">back to top</a></p>

<hr>

<h2 id="unix-domain-sockets">UNIX Domain Sockets</h2>

<p><code class="prettyprint">request</code> supports making requests to <a href="https://en.wikipedia.org/wiki/Unix_domain_socket">UNIX Domain Sockets</a>. To make one, use the following URL scheme:</p>
<pre class="highlight javascript"><code><span class="cm">/* Pattern */</span> <span class="s1">'http://unix:SOCKET:PATH'</span>
<span class="cm">/* Example */</span> <span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'http://unix:/absolute/path/to/unix.socket:/request/path'</span><span class="p">)</span>
</code></pre>

<p>Note: The <code class="prettyprint">SOCKET</code> path is assumed to be absolute to the root of the host file system.</p>

<p><a href="#table-of-contents">back to top</a></p>

<hr>

<h2 id="tls-ssl-protocol">TLS/SSL Protocol</h2>

<p>TLS/SSL Protocol options, such as <code class="prettyprint">cert</code>, <code class="prettyprint">key</code> and <code class="prettyprint">passphrase</code>, can be
set directly in <code class="prettyprint">options</code> object, in the <code class="prettyprint">agentOptions</code> property of the <code class="prettyprint">options</code> object, or even in <code class="prettyprint">https.globalAgent.options</code>. Keep in mind that, although <code class="prettyprint">agentOptions</code> allows for a slightly wider range of configurations, the recommended way is via <code class="prettyprint">options</code> object directly, as using <code class="prettyprint">agentOptions</code> or <code class="prettyprint">https.globalAgent.options</code> would not be applied in the same way in proxied environments (as data travels through a TLS connection instead of an http/https agent).</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'fs'</span><span class="p">)</span>
    <span class="p">,</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'path'</span><span class="p">)</span>
    <span class="p">,</span> <span class="nx">certFile</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'ssl/client.crt'</span><span class="p">)</span>
    <span class="p">,</span> <span class="nx">keyFile</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'ssl/client.key'</span><span class="p">)</span>
    <span class="p">,</span> <span class="nx">caFile</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'ssl/ca.cert.pem'</span><span class="p">)</span>
    <span class="p">,</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'request'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">url</span><span class="p">:</span> <span class="s1">'https://api.some-server.com/'</span><span class="p">,</span>
    <span class="na">cert</span><span class="p">:</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="nx">certFile</span><span class="p">),</span>
    <span class="na">key</span><span class="p">:</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="nx">keyFile</span><span class="p">),</span>
    <span class="na">passphrase</span><span class="p">:</span> <span class="s1">'password'</span><span class="p">,</span>
    <span class="na">ca</span><span class="p">:</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="nx">caFile</span><span class="p">)</span>
<span class="p">};</span>

<span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">options</span><span class="p">);</span>
</code></pre>

<h3 id="using-options-agentoptions">Using <code class="prettyprint">options.agentOptions</code></h3>

<p>In the example below, we call an API requires client side SSL certificate
(in PEM format) with passphrase protected private key (in PEM format) and disable the SSLv3 protocol:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'fs'</span><span class="p">)</span>
    <span class="p">,</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'path'</span><span class="p">)</span>
    <span class="p">,</span> <span class="nx">certFile</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'ssl/client.crt'</span><span class="p">)</span>
    <span class="p">,</span> <span class="nx">keyFile</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">'ssl/client.key'</span><span class="p">)</span>
    <span class="p">,</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'request'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">url</span><span class="p">:</span> <span class="s1">'https://api.some-server.com/'</span><span class="p">,</span>
    <span class="na">agentOptions</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">cert</span><span class="p">:</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="nx">certFile</span><span class="p">),</span>
        <span class="na">key</span><span class="p">:</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="nx">keyFile</span><span class="p">),</span>
        <span class="c1">// Or use `pfx` property replacing `cert` and `key` when using private key, certificate and CA certs in PFX or PKCS12 format:</span>
        <span class="c1">// pfx: fs.readFileSync(pfxFilePath),</span>
        <span class="na">passphrase</span><span class="p">:</span> <span class="s1">'password'</span><span class="p">,</span>
        <span class="na">securityOptions</span><span class="p">:</span> <span class="s1">'SSL_OP_NO_SSLv3'</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">options</span><span class="p">);</span>
</code></pre>

<p>It is able to force using SSLv3 only by specifying <code class="prettyprint">secureProtocol</code>:</p>
<pre class="highlight javascript"><code><span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">({</span>
    <span class="na">url</span><span class="p">:</span> <span class="s1">'https://api.some-server.com/'</span><span class="p">,</span>
    <span class="na">agentOptions</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">secureProtocol</span><span class="p">:</span> <span class="s1">'SSLv3_method'</span>
    <span class="p">}</span>
<span class="p">});</span>
</code></pre>

<p>It is possible to accept other certificates than those signed by generally allowed Certificate Authorities (CAs).
This can be useful, for example,  when using self-signed certificates.
To require a different root certificate, you can specify the signing CA by adding the contents of the CA&rsquo;s certificate file to the <code class="prettyprint">agentOptions</code>.
The certificate the domain presents must be signed by the root certificate specified:</p>
<pre class="highlight javascript"><code><span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">({</span>
    <span class="na">url</span><span class="p">:</span> <span class="s1">'https://api.some-server.com/'</span><span class="p">,</span>
    <span class="na">agentOptions</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">ca</span><span class="p">:</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="s1">'ca.cert.pem'</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">});</span>
</code></pre>

<p><a href="#table-of-contents">back to top</a></p>

<hr>

<h2 id="support-for-har-1-2">Support for HAR 1.2</h2>

<p>The <code class="prettyprint">options.har</code> property will override the values: <code class="prettyprint">url</code>, <code class="prettyprint">method</code>, <code class="prettyprint">qs</code>, <code class="prettyprint">headers</code>, <code class="prettyprint">form</code>, <code class="prettyprint">formData</code>, <code class="prettyprint">body</code>, <code class="prettyprint">json</code>, as well as construct multipart data and read files from disk when <code class="prettyprint">request.postData.params[].fileName</code> is present without a matching <code class="prettyprint">value</code>.</p>

<p>a validation step will check if the HAR Request format matches the latest spec (v1.2) and will skip parsing if not matching.</p>
<pre class="highlight javascript"><code>  <span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'request'</span><span class="p">)</span>
  <span class="nx">request</span><span class="p">({</span>
    <span class="c1">// will be ignored</span>
    <span class="na">method</span><span class="p">:</span> <span class="s1">'GET'</span><span class="p">,</span>
    <span class="na">uri</span><span class="p">:</span> <span class="s1">'http://www.google.com'</span><span class="p">,</span>

    <span class="c1">// HTTP Archive Request Object</span>
    <span class="na">har</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">url</span><span class="p">:</span> <span class="s1">'http://www.mockbin.com/har'</span><span class="p">,</span>
      <span class="na">method</span><span class="p">:</span> <span class="s1">'POST'</span><span class="p">,</span>
      <span class="na">headers</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
          <span class="na">name</span><span class="p">:</span> <span class="s1">'content-type'</span><span class="p">,</span>
          <span class="na">value</span><span class="p">:</span> <span class="s1">'application/x-www-form-urlencoded'</span>
        <span class="p">}</span>
      <span class="p">],</span>
      <span class="na">postData</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">mimeType</span><span class="p">:</span> <span class="s1">'application/x-www-form-urlencoded'</span><span class="p">,</span>
        <span class="na">params</span><span class="p">:</span> <span class="p">[</span>
          <span class="p">{</span>
            <span class="na">name</span><span class="p">:</span> <span class="s1">'foo'</span><span class="p">,</span>
            <span class="na">value</span><span class="p">:</span> <span class="s1">'bar'</span>
          <span class="p">},</span>
          <span class="p">{</span>
            <span class="na">name</span><span class="p">:</span> <span class="s1">'hello'</span><span class="p">,</span>
            <span class="na">value</span><span class="p">:</span> <span class="s1">'world'</span>
          <span class="p">}</span>
        <span class="p">]</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">})</span>

  <span class="c1">// a POST request will be sent to http://www.mockbin.com</span>
  <span class="c1">// with body an application/x-www-form-urlencoded body:</span>
  <span class="c1">// foo=bar&amp;hello=world</span>
</code></pre>

<p><a href="#table-of-contents">back to top</a></p>

<hr>

<h2 id="request-options-callback">request(options, callback)</h2>

<p>The first argument can be either a <code class="prettyprint">url</code> or an <code class="prettyprint">options</code> object. The only required option is <code class="prettyprint">uri</code>; all others are optional.</p>

<ul>
<li><code class="prettyprint">uri</code> || <code class="prettyprint">url</code> - fully qualified uri or a parsed url object from <code class="prettyprint">url.parse()</code></li>
<li><code class="prettyprint">baseUrl</code> - fully qualified uri string used as the base url. Most useful with <code class="prettyprint">request.defaults</code>, for example when you want to do many requests to the same domain.  If <code class="prettyprint">baseUrl</code> is <code class="prettyprint">https://example.com/api/</code>, then requesting <code class="prettyprint">/end/point?test=true</code> will fetch <code class="prettyprint">https://example.com/api/end/point?test=true</code>. When <code class="prettyprint">baseUrl</code> is given, <code class="prettyprint">uri</code> must also be a string.</li>
<li><code class="prettyprint">method</code> - http method (default: <code class="prettyprint">&quot;GET&quot;</code>)</li>
<li><code class="prettyprint">headers</code> - http headers (default: <code class="prettyprint">{}</code>)</li>
</ul>

<hr>

<ul>
<li><code class="prettyprint">qs</code> - object containing querystring values to be appended to the <code class="prettyprint">uri</code></li>
<li><code class="prettyprint">qsParseOptions</code> - object containing options to pass to the <a href="https://github.com/hapijs/qs#parsing-objects">qs.parse</a> method. Alternatively pass options to the <a href="https://nodejs.org/docs/v0.12.0/api/querystring.html#querystring_querystring_parse_str_sep_eq_options">querystring.parse</a> method using this format <code class="prettyprint">{sep:&#39;;&#39;, eq:&#39;:&#39;, options:{}}</code></li>
<li><code class="prettyprint">qsStringifyOptions</code> - object containing options to pass to the <a href="https://github.com/hapijs/qs#stringifying">qs.stringify</a> method. Alternatively pass options to the  <a href="https://nodejs.org/docs/v0.12.0/api/querystring.html#querystring_querystring_stringify_obj_sep_eq_options">querystring.stringify</a> method using this format <code class="prettyprint">{sep:&#39;;&#39;, eq:&#39;:&#39;, options:{}}</code>. For example, to change the way arrays are converted to query strings using the <code class="prettyprint">qs</code> module pass the <code class="prettyprint">arrayFormat</code> option with one of <code class="prettyprint">indices|brackets|repeat</code></li>
<li><code class="prettyprint">useQuerystring</code> - If true, use <code class="prettyprint">querystring</code> to stringify and parse
querystrings, otherwise use <code class="prettyprint">qs</code> (default: <code class="prettyprint">false</code>).  Set this option to
<code class="prettyprint">true</code> if you need arrays to be serialized as <code class="prettyprint">foo=bar&amp;foo=baz</code> instead of the
default <code class="prettyprint">foo[0]=bar&amp;foo[1]=baz</code>.</li>
</ul>

<hr>

<ul>
<li><code class="prettyprint">body</code> - entity body for PATCH, POST and PUT requests. Must be a <code class="prettyprint">Buffer</code>, <code class="prettyprint">String</code> or <code class="prettyprint">ReadStream</code>. If <code class="prettyprint">json</code> is <code class="prettyprint">true</code>, then <code class="prettyprint">body</code> must be a JSON-serializable object.</li>
<li><code class="prettyprint">form</code> - when passed an object or a querystring, this sets <code class="prettyprint">body</code> to a querystring representation of value, and adds <code class="prettyprint">Content-type: application/x-www-form-urlencoded</code> header. When passed no options, a <code class="prettyprint">FormData</code> instance is returned (and is piped to request). See &ldquo;Forms&rdquo; section above.</li>
<li><code class="prettyprint">formData</code> - Data to pass for a <code class="prettyprint">multipart/form-data</code> request. See
<a href="#forms">Forms</a> section above.</li>
<li><code class="prettyprint">multipart</code> - array of objects which contain their own headers and <code class="prettyprint">body</code>
attributes. Sends a <code class="prettyprint">multipart/related</code> request. See <a href="#forms">Forms</a> section
above.

<ul>
<li>Alternatively you can pass in an object <code class="prettyprint">{chunked: false, data: []}</code> where
<code class="prettyprint">chunked</code> is used to specify whether the request is sent in
<a href="https://en.wikipedia.org/wiki/Chunked_transfer_encoding">chunked transfer encoding</a>
In non-chunked requests, data items with body streams are not allowed.</li>
</ul></li>
<li><code class="prettyprint">preambleCRLF</code> - append a newline/CRLF before the boundary of your <code class="prettyprint">multipart/form-data</code> request.</li>
<li><code class="prettyprint">postambleCRLF</code> - append a newline/CRLF at the end of the boundary of your <code class="prettyprint">multipart/form-data</code> request.</li>
<li><code class="prettyprint">json</code> - sets <code class="prettyprint">body</code> to JSON representation of value and adds <code class="prettyprint">Content-type: application/json</code> header.  Additionally, parses the response body as JSON.</li>
<li><code class="prettyprint">jsonReviver</code> - a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse">reviver function</a> that will be passed to <code class="prettyprint">JSON.parse()</code> when parsing a JSON response body.</li>
<li><code class="prettyprint">jsonReplacer</code> - a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify">replacer function</a> that will be passed to <code class="prettyprint">JSON.stringify()</code> when stringifying a JSON request body.</li>
</ul>

<hr>

<ul>
<li><code class="prettyprint">auth</code> - A hash containing values <code class="prettyprint">user</code> || <code class="prettyprint">username</code>, <code class="prettyprint">pass</code> || <code class="prettyprint">password</code>, and <code class="prettyprint">sendImmediately</code> (optional).  See documentation above.</li>
<li><code class="prettyprint">oauth</code> - Options for OAuth HMAC-SHA1 signing. See documentation above.</li>
<li><code class="prettyprint">hawk</code> - Options for <a href="https://github.com/hueniverse/hawk">Hawk signing</a>. The <code class="prettyprint">credentials</code> key must contain the necessary signing info, <a href="https://github.com/hueniverse/hawk#usage-example">see hawk docs for details</a>.</li>
<li><code class="prettyprint">aws</code> - <code class="prettyprint">object</code> containing AWS signing information. Should have the properties <code class="prettyprint">key</code>, <code class="prettyprint">secret</code>. Also requires the property <code class="prettyprint">bucket</code>, unless you’re specifying your <code class="prettyprint">bucket</code> as part of the path, or the request doesn’t use a bucket (i.e. GET Services). If you want to use AWS sign version 4 use the parameter <code class="prettyprint">sign_version</code> with value <code class="prettyprint">4</code> otherwise the default is version 2. <strong>Note:</strong> you need to <code class="prettyprint">npm install aws4</code> first.</li>
<li><code class="prettyprint">httpSignature</code> - Options for the <a href="https://github.com/joyent/node-http-signature/blob/master/http_signing.md">HTTP Signature Scheme</a> using <a href="https://github.com/joyent/node-http-signature">Joyent&rsquo;s library</a>. The <code class="prettyprint">keyId</code> and <code class="prettyprint">key</code> properties must be specified. See the docs for other options.</li>
</ul>

<hr>

<ul>
<li><code class="prettyprint">followRedirect</code> - follow HTTP 3xx responses as redirects (default: <code class="prettyprint">true</code>). This property can also be implemented as function which gets <code class="prettyprint">response</code> object as a single argument and should return <code class="prettyprint">true</code> if redirects should continue or <code class="prettyprint">false</code> otherwise.</li>
<li><code class="prettyprint">followAllRedirects</code> - follow non-GET HTTP 3xx responses as redirects (default: <code class="prettyprint">false</code>)</li>
<li><code class="prettyprint">maxRedirects</code> - the maximum number of redirects to follow (default: <code class="prettyprint">10</code>)</li>
<li><code class="prettyprint">removeRefererHeader</code> - removes the referer header when a redirect happens (default: <code class="prettyprint">false</code>). <strong>Note:</strong> if true, referer header set in the initial request is preserved during redirect chain.</li>
</ul>

<hr>

<ul>
<li><code class="prettyprint">encoding</code> - Encoding to be used on <code class="prettyprint">setEncoding</code> of response data. If <code class="prettyprint">null</code>, the <code class="prettyprint">body</code> is returned as a <code class="prettyprint">Buffer</code>. Anything else <strong>(including the default value of <code class="prettyprint">undefined</code>)</strong> will be passed as the <a href="http://nodejs.org/api/buffer.html#buffer_buffer">encoding</a> parameter to <code class="prettyprint">toString()</code> (meaning this is effectively <code class="prettyprint">utf8</code> by default). (<strong>Note:</strong> if you expect binary data, you should set <code class="prettyprint">encoding: null</code>.)</li>
<li><code class="prettyprint">gzip</code> - If <code class="prettyprint">true</code>, add an <code class="prettyprint">Accept-Encoding</code> header to request compressed content encodings from the server (if not already present) and decode supported content encodings in the response.  <strong>Note:</strong> Automatic decoding of the response content is performed on the body data returned through <code class="prettyprint">request</code> (both through the <code class="prettyprint">request</code> stream and passed to the callback function) but is not performed on the <code class="prettyprint">response</code> stream (available from the <code class="prettyprint">response</code> event) which is the unmodified <code class="prettyprint">http.IncomingMessage</code> object which may contain compressed data. See example below.</li>
<li><code class="prettyprint">jar</code> - If <code class="prettyprint">true</code>, remember cookies for future use (or define your custom cookie jar; see examples section)</li>
</ul>

<hr>

<ul>
<li><code class="prettyprint">agent</code> - <code class="prettyprint">http(s).Agent</code> instance to use</li>
<li><code class="prettyprint">agentClass</code> - alternatively specify your agent&rsquo;s class name</li>
<li><code class="prettyprint">agentOptions</code> - and pass its options. <strong>Note:</strong> for HTTPS see <a href="http://nodejs.org/api/tls.html#tls_tls_connect_options_callback">tls API doc for TLS/SSL options</a> and the <a href="#using-optionsagentoptions">documentation above</a>.</li>
<li><code class="prettyprint">forever</code> - set to <code class="prettyprint">true</code> to use the <a href="https://github.com/request/forever-agent">forever-agent</a> <strong>Note:</strong> Defaults to <code class="prettyprint">http(s).Agent({keepAlive:true})</code> in node 0.12+</li>
<li><code class="prettyprint">pool</code> - An object describing which agents to use for the request. If this option is omitted the request will use the global agent (as long as your options allow for it). Otherwise, request will search the pool for your custom agent. If no custom agent is found, a new agent will be created and added to the pool. <strong>Note:</strong> <code class="prettyprint">pool</code> is used only when the <code class="prettyprint">agent</code> option is not specified.

<ul>
<li>A <code class="prettyprint">maxSockets</code> property can also be provided on the <code class="prettyprint">pool</code> object to set the max number of sockets for all agents created (ex: <code class="prettyprint">pool: {maxSockets: Infinity}</code>).</li>
<li>Note that if you are sending multiple requests in a loop and creating
multiple new <code class="prettyprint">pool</code> objects, <code class="prettyprint">maxSockets</code> will not work as intended.  To
work around this, either use <a href="#requestdefaultsoptions"><code class="prettyprint">request.defaults</code></a>
with your pool options or create the pool object with the <code class="prettyprint">maxSockets</code>
property outside of the loop.</li>
</ul></li>
<li><code class="prettyprint">timeout</code> - Integer containing the number of milliseconds to wait for a
server to send response headers (and start the response body) before aborting
the request. Note that if the underlying TCP connection cannot be established,
the OS-wide TCP connection timeout will overrule the <code class="prettyprint">timeout</code> option (<a href="http://www.sekuda.com/overriding_the_default_linux_kernel_20_second_tcp_socket_connect_timeout">the
default in Linux can be anywhere from 20-120 seconds</a>).</li>
</ul>

<hr>

<ul>
<li><code class="prettyprint">localAddress</code> - Local interface to bind for network connections.</li>
<li><code class="prettyprint">proxy</code> - An HTTP proxy to be used. Supports proxy Auth with Basic Auth, identical to support for the <code class="prettyprint">url</code> parameter (by embedding the auth info in the <code class="prettyprint">uri</code>)</li>
<li><code class="prettyprint">strictSSL</code> - If <code class="prettyprint">true</code>, requires SSL certificates be valid. <strong>Note:</strong> to use your own certificate authority, you need to specify an agent that was created with that CA as an option.</li>
<li><code class="prettyprint">tunnel</code> - controls the behavior of
<a href="https://en.wikipedia.org/wiki/HTTP_tunnel#HTTP_CONNECT_tunneling">HTTP <code class="prettyprint">CONNECT</code> tunneling</a>
as follows:

<ul>
<li><code class="prettyprint">undefined</code> (default) - <code class="prettyprint">true</code> if the destination is <code class="prettyprint">https</code>, <code class="prettyprint">false</code> otherwise</li>
<li><code class="prettyprint">true</code> - always tunnel to the destination by making a <code class="prettyprint">CONNECT</code> request to
the proxy</li>
<li><code class="prettyprint">false</code> - request the destination as a <code class="prettyprint">GET</code> request.</li>
</ul></li>
<li><code class="prettyprint">proxyHeaderWhiteList</code> - A whitelist of headers to send to a
tunneling proxy.</li>
<li><code class="prettyprint">proxyHeaderExclusiveList</code> - A whitelist of headers to send
exclusively to a tunneling proxy and not to destination.</li>
</ul>

<hr>

<ul>
<li><code class="prettyprint">time</code> - If <code class="prettyprint">true</code>, the request-response cycle (including all redirects) is timed at millisecond resolution, and the result provided on the response&rsquo;s <code class="prettyprint">elapsedTime</code> property.</li>
<li><code class="prettyprint">har</code> - A <a href="http://www.softwareishard.com/blog/har-12-spec/#request">HAR 1.2 Request Object</a>, will be processed from HAR format into options overwriting matching values <em>(see the <a href="#support-for-har-1.2">HAR 1.2 section</a> for details)</em></li>
<li><code class="prettyprint">callback</code> - alternatively pass the request&rsquo;s callback in the options object</li>
</ul>

<p>The callback argument gets 3 arguments:</p>

<ol>
<li>An <code class="prettyprint">error</code> when applicable (usually from <a href="http://nodejs.org/api/http.html#http_class_http_clientrequest"><code class="prettyprint">http.ClientRequest</code></a> object)</li>
<li>An <a href="https://nodejs.org/api/http.html#http_class_http_incomingmessage"><code class="prettyprint">http.IncomingMessage</code></a> object</li>
<li>The third is the <code class="prettyprint">response</code> body (<code class="prettyprint">String</code> or <code class="prettyprint">Buffer</code>, or JSON object if the <code class="prettyprint">json</code> option is supplied)</li>
</ol>

<p><a href="#table-of-contents">back to top</a></p>

<hr>

<h2 id="convenience-methods">Convenience methods</h2>

<p>There are also shorthand methods for different HTTP METHODs and some other conveniences.</p>

<h3 id="request-defaults-options">request.defaults(options)</h3>

<p>This method <strong>returns a wrapper</strong> around the normal request API that defaults
to whatever options you pass to it.</p>

<p><strong>Note:</strong> <code class="prettyprint">request.defaults()</code> <strong>does not</strong> modify the global request API;
instead, it <strong>returns a wrapper</strong> that has your default settings applied to it.</p>

<p><strong>Note:</strong> You can call <code class="prettyprint">.defaults()</code> on the wrapper that is returned from
<code class="prettyprint">request.defaults</code> to add/override defaults that were previously defaulted.</p>

<p>For example:
&ldquo;`js
//requests using baseRequest() will set the &lsquo;x-token&rsquo; header
var baseRequest = request.defaults({
  headers: {&#39;x-token&rsquo;: &#39;my-token&rsquo;}
})</p>

<p>//requests using specialRequest() will include the &#39;x-token&rsquo; header set in
//baseRequest and will also include the &#39;special&rsquo; header
var specialRequest = baseRequest.defaults({
  headers: {special: &#39;special value&rsquo;}
})
&rdquo;`</p>

<h3 id="request-put">request.put</h3>

<p>Same as <code class="prettyprint">request()</code>, but defaults to <code class="prettyprint">method: &quot;PUT&quot;</code>.</p>
<pre class="highlight javascript"><code><span class="nx">request</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span>
</code></pre>

<h3 id="request-patch">request.patch</h3>

<p>Same as <code class="prettyprint">request()</code>, but defaults to <code class="prettyprint">method: &quot;PATCH&quot;</code>.</p>
<pre class="highlight javascript"><code><span class="nx">request</span><span class="p">.</span><span class="nx">patch</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span>
</code></pre>

<h3 id="request-post">request.post</h3>

<p>Same as <code class="prettyprint">request()</code>, but defaults to <code class="prettyprint">method: &quot;POST&quot;</code>.</p>
<pre class="highlight javascript"><code><span class="nx">request</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span>
</code></pre>

<h3 id="request-head">request.head</h3>

<p>Same as <code class="prettyprint">request()</code>, but defaults to <code class="prettyprint">method: &quot;HEAD&quot;</code>.</p>
<pre class="highlight javascript"><code><span class="nx">request</span><span class="p">.</span><span class="nx">head</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span>
</code></pre>

<h3 id="request-del-request-delete">request.del / request.delete</h3>

<p>Same as <code class="prettyprint">request()</code>, but defaults to <code class="prettyprint">method: &quot;DELETE&quot;</code>.</p>
<pre class="highlight javascript"><code><span class="nx">request</span><span class="p">.</span><span class="nx">del</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span>
<span class="nx">request</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span>
</code></pre>

<h3 id="request-get">request.get</h3>

<p>Same as <code class="prettyprint">request()</code> (for uniformity).</p>
<pre class="highlight javascript"><code><span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span>
</code></pre>

<h3 id="request-cookie">request.cookie</h3>

<p>Function that creates a new cookie.</p>
<pre class="highlight javascript"><code><span class="nx">request</span><span class="p">.</span><span class="nx">cookie</span><span class="p">(</span><span class="s1">'key1=value1'</span><span class="p">)</span>
</code></pre>

<h3 id="request-jar">request.jar()</h3>

<p>Function that creates a new cookie jar.</p>
<pre class="highlight javascript"><code><span class="nx">request</span><span class="p">.</span><span class="nx">jar</span><span class="p">()</span>
</code></pre>

<p><a href="#table-of-contents">back to top</a></p>

<hr>

<h2 id="debugging">Debugging</h2>

<p>There are at least three ways to debug the operation of <code class="prettyprint">request</code>:</p>

<ol>
<li><p>Launch the node process like <code class="prettyprint">NODE_DEBUG=request node script.js</code>
(<code class="prettyprint">lib,request,otherlib</code> works too).</p></li>
<li><p>Set <code class="prettyprint">require(&#39;request&#39;).debug = true</code> at any time (this does the same thing
as #1).</p></li>
<li><p>Use the <a href="https://github.com/request/request-debug">request-debug module</a> to
view request and response headers and bodies.</p></li>
</ol>

<p><a href="#table-of-contents">back to top</a></p>

<hr>

<h2 id="timeouts">Timeouts</h2>

<p>Most requests to external servers should have a timeout attached, in case the
server is not responding in a timely manner. Without a timeout, your code may
have a socket open/consume resources for minutes or more.</p>

<p>There are two main types of timeouts: <strong>connection timeouts</strong> and <strong>read
timeouts</strong>. A connect timeout occurs if the timeout is hit while your client is
attempting to establish a connection to a remote machine (corresponding to the
<a href="http://linux.die.net/man/2/connect">connect() call</a> on the socket). A read timeout occurs any time the
server is too slow to send back a part of the response.</p>

<p>These two situations have widely different implications for what went wrong
with the request, so it&rsquo;s useful to be able to distinguish them. You can detect
timeout errors by checking <code class="prettyprint">err.code</code> for an &#39;ETIMEDOUT&rsquo; value. Further, you
can detect whether the timeout was a connection timeout by checking if the
<code class="prettyprint">err.connect</code> property is set to <code class="prettyprint">true</code>.</p>
<pre class="highlight javascript"><code><span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'http://10.255.255.1'</span><span class="p">,</span> <span class="p">{</span><span class="na">timeout</span><span class="p">:</span> <span class="mi">1500</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">code</span> <span class="o">===</span> <span class="s1">'ETIMEDOUT'</span><span class="p">);</span>
    <span class="c1">// Set to `true` if the timeout was a connection timeout, `false` or</span>
    <span class="c1">// `undefined` otherwise.</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">connect</span> <span class="o">===</span> <span class="kc">true</span><span class="p">);</span>
    <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">});</span>
</code></pre>

<h2 id="examples">Examples:</h2>
<pre class="highlight javascript"><code>  <span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'request'</span><span class="p">)</span>
    <span class="p">,</span> <span class="nx">rand</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="mi">100000000</span><span class="p">).</span><span class="nx">toString</span><span class="p">()</span>
    <span class="p">;</span>
  <span class="nx">request</span><span class="p">(</span>
    <span class="p">{</span> <span class="na">method</span><span class="p">:</span> <span class="s1">'PUT'</span>
    <span class="p">,</span> <span class="na">uri</span><span class="p">:</span> <span class="s1">'http://mikeal.iriscouch.com/testjs/'</span> <span class="o">+</span> <span class="nx">rand</span>
    <span class="p">,</span> <span class="na">multipart</span><span class="p">:</span>
      <span class="p">[</span> <span class="p">{</span> <span class="s1">'content-type'</span><span class="p">:</span> <span class="s1">'application/json'</span>
        <span class="p">,</span>  <span class="na">body</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span><span class="na">foo</span><span class="p">:</span> <span class="s1">'bar'</span><span class="p">,</span> <span class="na">_attachments</span><span class="p">:</span> <span class="p">{</span><span class="s1">'message.txt'</span><span class="p">:</span> <span class="p">{</span><span class="nl">follows</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">length</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span> <span class="s1">'content_type'</span><span class="p">:</span> <span class="s1">'text/plain'</span> <span class="p">}}})</span>
        <span class="p">}</span>
      <span class="p">,</span> <span class="p">{</span> <span class="na">body</span><span class="p">:</span> <span class="s1">'I am an attachment'</span> <span class="p">}</span>
      <span class="p">]</span>
    <span class="p">}</span>
  <span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">==</span> <span class="mi">201</span><span class="p">){</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'document saved as: http://mikeal.iriscouch.com/testjs/'</span><span class="o">+</span> <span class="nx">rand</span><span class="p">)</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'error: '</span><span class="o">+</span> <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span><span class="p">)</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">body</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">)</span>
</code></pre>

<p>For backwards-compatibility, response compression is not supported by default.
To accept gzip-compressed responses, set the <code class="prettyprint">gzip</code> option to <code class="prettyprint">true</code>.  Note
that the body data passed through <code class="prettyprint">request</code> is automatically decompressed
while the response object is unmodified and will contain compressed data if
the server sent a compressed response.</p>
<pre class="highlight javascript"><code>  <span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'request'</span><span class="p">)</span>
  <span class="nx">request</span><span class="p">(</span>
    <span class="p">{</span> <span class="na">method</span><span class="p">:</span> <span class="s1">'GET'</span>
    <span class="p">,</span> <span class="na">uri</span><span class="p">:</span> <span class="s1">'http://www.google.com'</span>
    <span class="p">,</span> <span class="na">gzip</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">}</span>
  <span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// body is the decompressed response body</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'server encoded the data as: '</span> <span class="o">+</span> <span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">headers</span><span class="p">[</span><span class="s1">'content-encoding'</span><span class="p">]</span> <span class="o">||</span> <span class="s1">'identity'</span><span class="p">))</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'the decoded data is: '</span> <span class="o">+</span> <span class="nx">body</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">'data'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// decompressed data as it is received</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'decoded chunk: '</span> <span class="o">+</span> <span class="nx">data</span><span class="p">)</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">'response'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// unmodified http.IncomingMessage object</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">'data'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// compressed data as it is received</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'received '</span> <span class="o">+</span> <span class="nx">data</span><span class="p">.</span><span class="nx">length</span> <span class="o">+</span> <span class="s1">' bytes of compressed data'</span><span class="p">)</span>
    <span class="p">})</span>
  <span class="p">})</span>
</code></pre>

<p>Cookies are disabled by default (else, they would be used in subsequent requests). To enable cookies, set <code class="prettyprint">jar</code> to <code class="prettyprint">true</code> (either in <code class="prettyprint">defaults</code> or <code class="prettyprint">options</code>).</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">defaults</span><span class="p">({</span><span class="na">jar</span><span class="p">:</span> <span class="kc">true</span><span class="p">})</span>
<span class="nx">request</span><span class="p">(</span><span class="s1">'http://www.google.com'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">request</span><span class="p">(</span><span class="s1">'http://images.google.com'</span><span class="p">)</span>
<span class="p">})</span>
</code></pre>

<p>To use a custom cookie jar (instead of <code class="prettyprint">request</code>’s global cookie jar), set <code class="prettyprint">jar</code> to an instance of <code class="prettyprint">request.jar()</code> (either in <code class="prettyprint">defaults</code> or <code class="prettyprint">options</code>)</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">jar</span><span class="p">()</span>
<span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">defaults</span><span class="p">({</span><span class="na">jar</span><span class="p">:</span><span class="nx">j</span><span class="p">})</span>
<span class="nx">request</span><span class="p">(</span><span class="s1">'http://www.google.com'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">request</span><span class="p">(</span><span class="s1">'http://images.google.com'</span><span class="p">)</span>
<span class="p">})</span>
</code></pre>

<p>OR</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">jar</span><span class="p">();</span>
<span class="kd">var</span> <span class="nx">cookie</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">cookie</span><span class="p">(</span><span class="s1">'key1=value1'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">'http://www.google.com'</span><span class="p">;</span>
<span class="nx">j</span><span class="p">.</span><span class="nx">setCookie</span><span class="p">(</span><span class="nx">cookie</span><span class="p">,</span> <span class="nx">url</span><span class="p">);</span>
<span class="nx">request</span><span class="p">({</span><span class="na">url</span><span class="p">:</span> <span class="nx">url</span><span class="p">,</span> <span class="na">jar</span><span class="p">:</span> <span class="nx">j</span><span class="p">},</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">request</span><span class="p">(</span><span class="s1">'http://images.google.com'</span><span class="p">)</span>
<span class="p">})</span>
</code></pre>

<p>To use a custom cookie store (such as a
<a href="https://github.com/mitsuru/tough-cookie-filestore"><code class="prettyprint">FileCookieStore</code></a>
which supports saving to and restoring from JSON files), pass it as a parameter
to <code class="prettyprint">request.jar()</code>:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">FileCookieStore</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'tough-cookie-filestore'</span><span class="p">);</span>
<span class="c1">// NOTE - currently the 'cookies.json' file must already exist!</span>
<span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">jar</span><span class="p">(</span><span class="k">new</span> <span class="nx">FileCookieStore</span><span class="p">(</span><span class="s1">'cookies.json'</span><span class="p">));</span>
<span class="nx">request</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">defaults</span><span class="p">({</span> <span class="na">jar</span> <span class="p">:</span> <span class="nx">j</span> <span class="p">})</span>
<span class="nx">request</span><span class="p">(</span><span class="s1">'http://www.google.com'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">request</span><span class="p">(</span><span class="s1">'http://images.google.com'</span><span class="p">)</span>
<span class="p">})</span>
</code></pre>

<p>The cookie store must be a
<a href="https://github.com/SalesforceEng/tough-cookie"><code class="prettyprint">tough-cookie</code></a>
store and it must support synchronous operations; see the
<a href="https://github.com/SalesforceEng/tough-cookie#cookiestore-api"><code class="prettyprint">CookieStore</code> API docs</a>
for details.</p>

<p>To inspect your cookie jar after a request:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">jar</span><span class="p">()</span>
<span class="nx">request</span><span class="p">({</span><span class="na">url</span><span class="p">:</span> <span class="s1">'http://www.google.com'</span><span class="p">,</span> <span class="na">jar</span><span class="p">:</span> <span class="nx">j</span><span class="p">},</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">cookie_string</span> <span class="o">=</span> <span class="nx">j</span><span class="p">.</span><span class="nx">getCookieString</span><span class="p">(</span><span class="nx">url</span><span class="p">);</span> <span class="c1">// "key1=value1; key2=value2; ..."</span>
  <span class="kd">var</span> <span class="nx">cookies</span> <span class="o">=</span> <span class="nx">j</span><span class="p">.</span><span class="nx">getCookies</span><span class="p">(</span><span class="nx">url</span><span class="p">);</span>
  <span class="c1">// [{key: 'key1', value: 'value1', domain: "www.google.com", ...}, ...]</span>
<span class="p">})</span>
</code></pre>

<p><a href="#table-of-contents">back to top</a></p>
