<p><a name="module_symbol-tree"></a></p>

<h2 id="symbol-tree">symbol-tree</h2>

<p><strong>Author:</strong> Joris van der Wel <a href="mailto:joris@jorisvanderwel.com">joris@jorisvanderwel.com</a>  </p>

<ul>
<li><a href="#module_symbol-tree">symbol-tree</a>

<ul>
<li><a href="#exp_module_symbol-tree--SymbolTree">SymbolTree</a> ⏏</li>
<li><a href="#new_module_symbol-tree--SymbolTree_new">new SymbolTree([description])</a></li>
<li><a href="#module_symbol-tree--SymbolTree+initialize">.initialize(object)</a> ⇒ <code>Object</code></li>
<li><a href="#module_symbol-tree--SymbolTree+hasChildren">.hasChildren(object)</a> ⇒ <code>Boolean</code></li>
<li><a href="#module_symbol-tree--SymbolTree+firstChild">.firstChild(object)</a> ⇒ <code>Object</code></li>
<li><a href="#module_symbol-tree--SymbolTree+lastChild">.lastChild(object)</a> ⇒ <code>Object</code></li>
<li><a href="#module_symbol-tree--SymbolTree+previousSibling">.previousSibling(object)</a> ⇒ <code>Object</code></li>
<li><a href="#module_symbol-tree--SymbolTree+nextSibling">.nextSibling(object)</a> ⇒ <code>Object</code></li>
<li><a href="#module_symbol-tree--SymbolTree+parent">.parent(object)</a> ⇒ <code>Object</code></li>
<li><a href="#module_symbol-tree--SymbolTree+lastInclusiveDescendant">.lastInclusiveDescendant(object)</a> ⇒ <code>Object</code></li>
<li><a href="#module_symbol-tree--SymbolTree+preceding">.preceding(object, [options])</a> ⇒ <code>Object</code></li>
<li><a href="#module_symbol-tree--SymbolTree+following">.following(object, [options])</a> ⇒ <code>Object</code></li>
<li><a href="#module_symbol-tree--SymbolTree+childrenToArray">.childrenToArray(parent, [options])</a> ⇒ <code>Array.&lt;Object&gt;</code></li>
<li><a href="#module_symbol-tree--SymbolTree+ancestorsToArray">.ancestorsToArray(object, [options])</a> ⇒ <code>Array.&lt;Object&gt;</code></li>
<li><a href="#module_symbol-tree--SymbolTree+treeToArray">.treeToArray(root, [options])</a> ⇒ <code>Array.&lt;Object&gt;</code></li>
<li><a href="#module_symbol-tree--SymbolTree+childrenIterator">.childrenIterator(parent, [options])</a> ⇒ <code>Object</code></li>
<li><a href="#module_symbol-tree--SymbolTree+previousSiblingsIterator">.previousSiblingsIterator(object)</a> ⇒ <code>Object</code></li>
<li><a href="#module_symbol-tree--SymbolTree+nextSiblingsIterator">.nextSiblingsIterator(object)</a> ⇒ <code>Object</code></li>
<li><a href="#module_symbol-tree--SymbolTree+ancestorsIterator">.ancestorsIterator(object)</a> ⇒ <code>Object</code></li>
<li><a href="#module_symbol-tree--SymbolTree+treeIterator">.treeIterator(root, options)</a> ⇒ <code>Object</code></li>
<li><a href="#module_symbol-tree--SymbolTree+index">.index(child)</a> ⇒ <code>Number</code></li>
<li><a href="#module_symbol-tree--SymbolTree+childrenCount">.childrenCount(parent)</a> ⇒ <code>Number</code></li>
<li><a href="#module_symbol-tree--SymbolTree+compareTreePosition">.compareTreePosition(left, right)</a> ⇒ <code>Number</code></li>
<li><a href="#module_symbol-tree--SymbolTree+remove">.remove(removeObject)</a> ⇒ <code>Object</code></li>
<li><a href="#module_symbol-tree--SymbolTree+insertBefore">.insertBefore(referenceObject, newObject)</a> ⇒ <code>Object</code></li>
<li><a href="#module_symbol-tree--SymbolTree+insertAfter">.insertAfter(referenceObject, newObject)</a> ⇒ <code>Object</code></li>
<li><a href="#module_symbol-tree--SymbolTree+prependChild">.prependChild(referenceObject, newObject)</a> ⇒ <code>Object</code></li>
<li><a href="#module_symbol-tree--SymbolTree+appendChild">.appendChild(referenceObject, newObject)</a> ⇒ <code>Object</code></li>
</ul></li>
</ul>

<p><a name="exp_module_symbol-tree--SymbolTree"></a></p>

<h3 id="symboltree">SymbolTree ⏏</h3>

<p><strong>Kind</strong>: Exported class<br>
<a name="new_module_symbol-tree--SymbolTree_new"></a></p>

<h4 id="new-symboltree-description">new SymbolTree([description])</h4>

<table><thead>
<tr>
<th>Param</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>[description]</td>
<td><code>&#x27;SymbolTree data&#x27;</code></td>
<td>Description used for the Symbol</td>
</tr>
</tbody></table>

<p><a name="module_symbol-tree--SymbolTree+initialize"></a></p>

<h4 id="symboltree-initialize-object-object">symbolTree.initialize(object) ⇒ <code>Object</code></h4>

<p>You can optionally initialize an object after its creation,
to take advantage of V8&rsquo;s fast properties. Also useful if you would like to
freeze your object.</p>

<p><code class="prettyprint">O(1)</code></p>

<p><strong>Kind</strong>: instance method of <code><a href="#exp_module_symbol-tree--SymbolTree">SymbolTree</a></code><br>
<strong>Returns</strong>: <code>Object</code> - object  </p>

<table><thead>
<tr>
<th>Param</th>
<th>Type</th>
</tr>
</thead><tbody>
<tr>
<td>object</td>
<td><code>Object</code></td>
</tr>
</tbody></table>

<p><a name="module_symbol-tree--SymbolTree+hasChildren"></a></p>

<h4 id="symboltree-haschildren-object-boolean">symbolTree.hasChildren(object) ⇒ <code>Boolean</code></h4>

<p>Returns <code class="prettyprint">true</code> if the object has any children. Otherwise it returns <code class="prettyprint">false</code>.</p>

<p><code class="prettyprint">O(1)</code></p>

<p><strong>Kind</strong>: instance method of <code><a href="#exp_module_symbol-tree--SymbolTree">SymbolTree</a></code>  </p>

<table><thead>
<tr>
<th>Param</th>
<th>Type</th>
</tr>
</thead><tbody>
<tr>
<td>object</td>
<td><code>Object</code></td>
</tr>
</tbody></table>

<p><a name="module_symbol-tree--SymbolTree+firstChild"></a></p>

<h4 id="symboltree-firstchild-object-object">symbolTree.firstChild(object) ⇒ <code>Object</code></h4>

<p>Return the first child of the given object.</p>

<p><code class="prettyprint">O(1)</code></p>

<p><strong>Kind</strong>: instance method of <code><a href="#exp_module_symbol-tree--SymbolTree">SymbolTree</a></code>  </p>

<table><thead>
<tr>
<th>Param</th>
<th>Type</th>
</tr>
</thead><tbody>
<tr>
<td>object</td>
<td><code>Object</code></td>
</tr>
</tbody></table>

<p><a name="module_symbol-tree--SymbolTree+lastChild"></a></p>

<h4 id="symboltree-lastchild-object-object">symbolTree.lastChild(object) ⇒ <code>Object</code></h4>

<p>Return the last child of the given object.</p>

<p><code class="prettyprint">O(1)</code></p>

<p><strong>Kind</strong>: instance method of <code><a href="#exp_module_symbol-tree--SymbolTree">SymbolTree</a></code>  </p>

<table><thead>
<tr>
<th>Param</th>
<th>Type</th>
</tr>
</thead><tbody>
<tr>
<td>object</td>
<td><code>Object</code></td>
</tr>
</tbody></table>

<p><a name="module_symbol-tree--SymbolTree+previousSibling"></a></p>

<h4 id="symboltree-previoussibling-object-object">symbolTree.previousSibling(object) ⇒ <code>Object</code></h4>

<p>Return the previous sibling of the given object.</p>

<p><code class="prettyprint">O(1)</code></p>

<p><strong>Kind</strong>: instance method of <code><a href="#exp_module_symbol-tree--SymbolTree">SymbolTree</a></code>  </p>

<table><thead>
<tr>
<th>Param</th>
<th>Type</th>
</tr>
</thead><tbody>
<tr>
<td>object</td>
<td><code>Object</code></td>
</tr>
</tbody></table>

<p><a name="module_symbol-tree--SymbolTree+nextSibling"></a></p>

<h4 id="symboltree-nextsibling-object-object">symbolTree.nextSibling(object) ⇒ <code>Object</code></h4>

<p>Return the nextSibling sibling of the given object.</p>

<p><code class="prettyprint">O(1)</code></p>

<p><strong>Kind</strong>: instance method of <code><a href="#exp_module_symbol-tree--SymbolTree">SymbolTree</a></code>  </p>

<table><thead>
<tr>
<th>Param</th>
<th>Type</th>
</tr>
</thead><tbody>
<tr>
<td>object</td>
<td><code>Object</code></td>
</tr>
</tbody></table>

<p><a name="module_symbol-tree--SymbolTree+parent"></a></p>

<h4 id="symboltree-parent-object-object">symbolTree.parent(object) ⇒ <code>Object</code></h4>

<p>Return the parent of the given object.</p>

<p><code class="prettyprint">O(1)</code></p>

<p><strong>Kind</strong>: instance method of <code><a href="#exp_module_symbol-tree--SymbolTree">SymbolTree</a></code>  </p>

<table><thead>
<tr>
<th>Param</th>
<th>Type</th>
</tr>
</thead><tbody>
<tr>
<td>object</td>
<td><code>Object</code></td>
</tr>
</tbody></table>

<p><a name="module_symbol-tree--SymbolTree+lastInclusiveDescendant"></a></p>

<h4 id="symboltree-lastinclusivedescendant-object-object">symbolTree.lastInclusiveDescendant(object) ⇒ <code>Object</code></h4>

<p>Find the inclusive descendant that is last in tree order of the given object.</p>

<p><code class="prettyprint">O(n)</code> (worst case) where n is the depth of the subtree of <code class="prettyprint">object</code></p>

<p><strong>Kind</strong>: instance method of <code><a href="#exp_module_symbol-tree--SymbolTree">SymbolTree</a></code>  </p>

<table><thead>
<tr>
<th>Param</th>
<th>Type</th>
</tr>
</thead><tbody>
<tr>
<td>object</td>
<td><code>Object</code></td>
</tr>
</tbody></table>

<p><a name="module_symbol-tree--SymbolTree+preceding"></a></p>

<h4 id="symboltree-preceding-object-options-object">symbolTree.preceding(object, [options]) ⇒ <code>Object</code></h4>

<p>Find the preceding object (A) of the given object (B).
An object A is preceding an object B if A and B are in the same tree
and A comes before B in tree order.</p>

<p><code class="prettyprint">O(n)</code> (worst case) <br>
<code class="prettyprint">O(1)</code> (amortized when walking the entire tree)</p>

<p><strong>Kind</strong>: instance method of <code><a href="#exp_module_symbol-tree--SymbolTree">SymbolTree</a></code>  </p>

<table><thead>
<tr>
<th>Param</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>object</td>
<td><code>Object</code></td>
<td></td>
</tr>
<tr>
<td>[options]</td>
<td><code>Object</code></td>
<td></td>
</tr>
<tr>
<td>[options.root]</td>
<td><code>Object</code></td>
<td>If set, <code class="prettyprint">root</code> must be an inclusive ancestor        of the return value (or else null is returned). This check <em>assumes</em>        that <code class="prettyprint">root</code> is also an inclusive ancestor of the given <code class="prettyprint">node</code></td>
</tr>
</tbody></table>

<p><a name="module_symbol-tree--SymbolTree+following"></a></p>

<h4 id="symboltree-following-object-options-object">symbolTree.following(object, [options]) ⇒ <code>Object</code></h4>

<p>Find the following object (A) of the given object (B).
An object A is following an object B if A and B are in the same tree
and A comes after B in tree order.</p>

<p><code class="prettyprint">O(n)</code> (worst case) where n is the amount of objects in the entire tree<br>
<code class="prettyprint">O(1)</code> (amortized when walking the entire tree)</p>

<p><strong>Kind</strong>: instance method of <code><a href="#exp_module_symbol-tree--SymbolTree">SymbolTree</a></code>  </p>

<table><thead>
<tr>
<th>Param</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>object</td>
<td><code>Object</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td>[options]</td>
<td><code>Object</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td>[options.root]</td>
<td><code>Object</code></td>
<td></td>
<td>If set, <code class="prettyprint">root</code> must be an inclusive ancestor        of the return value (or else null is returned). This check <em>assumes</em>        that <code class="prettyprint">root</code> is also an inclusive ancestor of the given <code class="prettyprint">node</code></td>
</tr>
<tr>
<td>[options.skipChildren]</td>
<td><code>Boolean</code></td>
<td><code>false</code></td>
<td>If set, ignore the children of <code class="prettyprint">object</code></td>
</tr>
</tbody></table>

<p><a name="module_symbol-tree--SymbolTree+childrenToArray"></a></p>

<h4 id="symboltree-childrentoarray-parent-options-array-lt-object-gt">symbolTree.childrenToArray(parent, [options]) ⇒ <code>Array.&lt;Object&gt;</code></h4>

<p>Append all children of the given object to an array.</p>

<p><code class="prettyprint">O(n)</code> where n is the amount of children of the given <code class="prettyprint">parent</code></p>

<p><strong>Kind</strong>: instance method of <code><a href="#exp_module_symbol-tree--SymbolTree">SymbolTree</a></code>  </p>

<table><thead>
<tr>
<th>Param</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>parent</td>
<td><code>Object</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td>[options]</td>
<td><code>Object</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td>[options.array]</td>
<td><code>Array.&lt;Object&gt;</code></td>
<td><code>[]</code></td>
<td></td>
</tr>
<tr>
<td>[options.filter]</td>
<td><code>function</code></td>
<td></td>
<td>Function to test each object before it is added to the array.                            Invoked with arguments (object). Should return <code class="prettyprint">true</code> if an object                            is to be included.</td>
</tr>
<tr>
<td>[options.thisArg]</td>
<td><code>*</code></td>
<td></td>
<td>Value to use as <code class="prettyprint">this</code> when executing <code class="prettyprint">filter</code>.</td>
</tr>
</tbody></table>

<p><a name="module_symbol-tree--SymbolTree+ancestorsToArray"></a></p>

<h4 id="symboltree-ancestorstoarray-object-options-array-lt-object-gt">symbolTree.ancestorsToArray(object, [options]) ⇒ <code>Array.&lt;Object&gt;</code></h4>

<p>Append all inclusive ancestors of the given object to an array.</p>

<p><code class="prettyprint">O(n)</code> where n is the amount of ancestors of the given <code class="prettyprint">object</code></p>

<p><strong>Kind</strong>: instance method of <code><a href="#exp_module_symbol-tree--SymbolTree">SymbolTree</a></code>  </p>

<table><thead>
<tr>
<th>Param</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>object</td>
<td><code>Object</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td>[options]</td>
<td><code>Object</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td>[options.array]</td>
<td><code>Array.&lt;Object&gt;</code></td>
<td><code>[]</code></td>
<td></td>
</tr>
<tr>
<td>[options.filter]</td>
<td><code>function</code></td>
<td></td>
<td>Function to test each object before it is added to the array.                            Invoked with arguments (object). Should return <code class="prettyprint">true</code> if an object                            is to be included.</td>
</tr>
<tr>
<td>[options.thisArg]</td>
<td><code>*</code></td>
<td></td>
<td>Value to use as <code class="prettyprint">this</code> when executing <code class="prettyprint">filter</code>.</td>
</tr>
</tbody></table>

<p><a name="module_symbol-tree--SymbolTree+treeToArray"></a></p>

<h4 id="symboltree-treetoarray-root-options-array-lt-object-gt">symbolTree.treeToArray(root, [options]) ⇒ <code>Array.&lt;Object&gt;</code></h4>

<p>Append all descendants of the given object to an array (in tree order).</p>

<p><code class="prettyprint">O(n)</code> where n is the amount of objects in the sub-tree of the given <code class="prettyprint">object</code></p>

<p><strong>Kind</strong>: instance method of <code><a href="#exp_module_symbol-tree--SymbolTree">SymbolTree</a></code>  </p>

<table><thead>
<tr>
<th>Param</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>root</td>
<td><code>Object</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td>[options]</td>
<td><code>Object</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td>[options.array]</td>
<td><code>Array.&lt;Object&gt;</code></td>
<td><code>[]</code></td>
<td></td>
</tr>
<tr>
<td>[options.filter]</td>
<td><code>function</code></td>
<td></td>
<td>Function to test each object before it is added to the array.                            Invoked with arguments (object). Should return <code class="prettyprint">true</code> if an object                            is to be included.</td>
</tr>
<tr>
<td>[options.thisArg]</td>
<td><code>*</code></td>
<td></td>
<td>Value to use as <code class="prettyprint">this</code> when executing <code class="prettyprint">filter</code>.</td>
</tr>
</tbody></table>

<p><a name="module_symbol-tree--SymbolTree+childrenIterator"></a></p>

<h4 id="symboltree-childreniterator-parent-options-object">symbolTree.childrenIterator(parent, [options]) ⇒ <code>Object</code></h4>

<p>Iterate over all children of the given object</p>

<p><code class="prettyprint">O(1)</code> for a single iteration</p>

<p><strong>Kind</strong>: instance method of <code><a href="#exp_module_symbol-tree--SymbolTree">SymbolTree</a></code><br>
<strong>Returns</strong>: <code>Object</code> - An iterable iterator (ES6)  </p>

<table><thead>
<tr>
<th>Param</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>parent</td>
<td><code>Object</code></td>
<td></td>
</tr>
<tr>
<td>[options]</td>
<td><code>Object</code></td>
<td></td>
</tr>
<tr>
<td>[options.reverse]</td>
<td><code>Boolean</code></td>
<td><code>false</code></td>
</tr>
</tbody></table>

<p><a name="module_symbol-tree--SymbolTree+previousSiblingsIterator"></a></p>

<h4 id="symboltree-previoussiblingsiterator-object-object">symbolTree.previousSiblingsIterator(object) ⇒ <code>Object</code></h4>

<p>Iterate over all the previous siblings of the given object. (in reverse tree order)</p>

<p><code class="prettyprint">O(1)</code> for a single iteration</p>

<p><strong>Kind</strong>: instance method of <code><a href="#exp_module_symbol-tree--SymbolTree">SymbolTree</a></code><br>
<strong>Returns</strong>: <code>Object</code> - An iterable iterator (ES6)  </p>

<table><thead>
<tr>
<th>Param</th>
<th>Type</th>
</tr>
</thead><tbody>
<tr>
<td>object</td>
<td><code>Object</code></td>
</tr>
</tbody></table>

<p><a name="module_symbol-tree--SymbolTree+nextSiblingsIterator"></a></p>

<h4 id="symboltree-nextsiblingsiterator-object-object">symbolTree.nextSiblingsIterator(object) ⇒ <code>Object</code></h4>

<p>Iterate over all the next siblings of the given object. (in tree order)</p>

<p><code class="prettyprint">O(1)</code> for a single iteration</p>

<p><strong>Kind</strong>: instance method of <code><a href="#exp_module_symbol-tree--SymbolTree">SymbolTree</a></code><br>
<strong>Returns</strong>: <code>Object</code> - An iterable iterator (ES6)  </p>

<table><thead>
<tr>
<th>Param</th>
<th>Type</th>
</tr>
</thead><tbody>
<tr>
<td>object</td>
<td><code>Object</code></td>
</tr>
</tbody></table>

<p><a name="module_symbol-tree--SymbolTree+ancestorsIterator"></a></p>

<h4 id="symboltree-ancestorsiterator-object-object">symbolTree.ancestorsIterator(object) ⇒ <code>Object</code></h4>

<p>Iterate over all inclusive ancestors of the given object</p>

<p><code class="prettyprint">O(1)</code> for a single iteration</p>

<p><strong>Kind</strong>: instance method of <code><a href="#exp_module_symbol-tree--SymbolTree">SymbolTree</a></code><br>
<strong>Returns</strong>: <code>Object</code> - An iterable iterator (ES6)  </p>

<table><thead>
<tr>
<th>Param</th>
<th>Type</th>
</tr>
</thead><tbody>
<tr>
<td>object</td>
<td><code>Object</code></td>
</tr>
</tbody></table>

<p><a name="module_symbol-tree--SymbolTree+treeIterator"></a></p>

<h4 id="symboltree-treeiterator-root-options-object">symbolTree.treeIterator(root, options) ⇒ <code>Object</code></h4>

<p>Iterate over all descendants of the given object (in tree order).</p>

<p>where n is the amount of objects in the sub-tree of the given <code class="prettyprint">root</code>:
<code class="prettyprint">O(n)</code> (worst case for a single iterator)
<code class="prettyprint">O(n)</code> (amortized, when completing the iterator)<br></p>

<p><strong>Kind</strong>: instance method of <code><a href="#exp_module_symbol-tree--SymbolTree">SymbolTree</a></code><br>
<strong>Returns</strong>: <code>Object</code> - An iterable iterator (ES6)  </p>

<table><thead>
<tr>
<th>Param</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>root</td>
<td><code>Object</code></td>
<td></td>
</tr>
<tr>
<td>options</td>
<td><code>Object</code></td>
<td></td>
</tr>
<tr>
<td>[options.reverse]</td>
<td><code>Boolean</code></td>
<td><code>false</code></td>
</tr>
</tbody></table>

<p><a name="module_symbol-tree--SymbolTree+index"></a></p>

<h4 id="symboltree-index-child-number">symbolTree.index(child) ⇒ <code>Number</code></h4>

<p>Find the index of the given object (the number of preceding siblings).</p>

<p><code class="prettyprint">O(n)</code> where n is the amount of preceding siblings<br>
<code class="prettyprint">O(1)</code> (amortized, if the tree is not modified)</p>

<p><strong>Kind</strong>: instance method of <code><a href="#exp_module_symbol-tree--SymbolTree">SymbolTree</a></code><br>
<strong>Returns</strong>: <code>Number</code> - The number of preceding siblings, or -1 if the object has no parent  </p>

<table><thead>
<tr>
<th>Param</th>
<th>Type</th>
</tr>
</thead><tbody>
<tr>
<td>child</td>
<td><code>Object</code></td>
</tr>
</tbody></table>

<p><a name="module_symbol-tree--SymbolTree+childrenCount"></a></p>

<h4 id="symboltree-childrencount-parent-number">symbolTree.childrenCount(parent) ⇒ <code>Number</code></h4>

<p>Calculate the number of children.</p>

<p><code class="prettyprint">O(n)</code> where n is the amount of children<br>
<code class="prettyprint">O(1)</code> (amortized, if the tree is not modified)</p>

<p><strong>Kind</strong>: instance method of <code><a href="#exp_module_symbol-tree--SymbolTree">SymbolTree</a></code>  </p>

<table><thead>
<tr>
<th>Param</th>
<th>Type</th>
</tr>
</thead><tbody>
<tr>
<td>parent</td>
<td><code>Object</code></td>
</tr>
</tbody></table>

<p><a name="module_symbol-tree--SymbolTree+compareTreePosition"></a></p>

<h4 id="symboltree-comparetreeposition-left-right-number">symbolTree.compareTreePosition(left, right) ⇒ <code>Number</code></h4>

<p>Compare the position of an object relative to another object. A bit set is returned:</p>

<ul>
    <li>DISCONNECTED : 1</li>
    <li>PRECEDING : 2</li>
    <li>FOLLOWING : 4</li>
    <li>CONTAINS : 8</li>
    <li>CONTAINED_BY : 16</li>
</ul>

<p>The semantics are the same as compareDocumentPosition in DOM, with the exception that
DISCONNECTED never occurs with any other bit.</p>

<p>where n and m are the amount of ancestors of <code class="prettyprint">left</code> and <code class="prettyprint">right</code>;
where o is the amount of children of the lowest common ancestor of <code class="prettyprint">left</code> and <code class="prettyprint">right</code>:
<code class="prettyprint">O(n + m + o)</code> (worst case)
`O(n + m) (amortized, if the tree is not modified)</p>

<p><strong>Kind</strong>: instance method of <code><a href="#exp_module_symbol-tree--SymbolTree">SymbolTree</a></code>  </p>

<table><thead>
<tr>
<th>Param</th>
<th>Type</th>
</tr>
</thead><tbody>
<tr>
<td>left</td>
<td><code>Object</code></td>
</tr>
<tr>
<td>right</td>
<td><code>Object</code></td>
</tr>
</tbody></table>

<p><a name="module_symbol-tree--SymbolTree+remove"></a></p>

<h4 id="symboltree-remove-removeobject-object">symbolTree.remove(removeObject) ⇒ <code>Object</code></h4>

<p>Remove the object from this tree.
Has no effect if already removed.</p>

<p><code class="prettyprint">O(1)</code></p>

<p><strong>Kind</strong>: instance method of <code><a href="#exp_module_symbol-tree--SymbolTree">SymbolTree</a></code><br>
<strong>Returns</strong>: <code>Object</code> - removeObject  </p>

<table><thead>
<tr>
<th>Param</th>
<th>Type</th>
</tr>
</thead><tbody>
<tr>
<td>removeObject</td>
<td><code>Object</code></td>
</tr>
</tbody></table>

<p><a name="module_symbol-tree--SymbolTree+insertBefore"></a></p>

<h4 id="symboltree-insertbefore-referenceobject-newobject-object">symbolTree.insertBefore(referenceObject, newObject) ⇒ <code>Object</code></h4>

<p>Insert the given object before the reference object.
<code class="prettyprint">newObject</code> is now the previous sibling of <code class="prettyprint">referenceObject</code>.</p>

<p><code class="prettyprint">O(1)</code></p>

<p><strong>Kind</strong>: instance method of <code><a href="#exp_module_symbol-tree--SymbolTree">SymbolTree</a></code><br>
<strong>Returns</strong>: <code>Object</code> - newObject<br>
<strong>Throws</strong>:</p>

<ul>
<li><code>Error</code> If the newObject is already present in this SymbolTree</li>
</ul>

<table><thead>
<tr>
<th>Param</th>
<th>Type</th>
</tr>
</thead><tbody>
<tr>
<td>referenceObject</td>
<td><code>Object</code></td>
</tr>
<tr>
<td>newObject</td>
<td><code>Object</code></td>
</tr>
</tbody></table>

<p><a name="module_symbol-tree--SymbolTree+insertAfter"></a></p>

<h4 id="symboltree-insertafter-referenceobject-newobject-object">symbolTree.insertAfter(referenceObject, newObject) ⇒ <code>Object</code></h4>

<p>Insert the given object after the reference object.
<code class="prettyprint">newObject</code> is now the next sibling of <code class="prettyprint">referenceObject</code>.</p>

<p><code class="prettyprint">O(1)</code></p>

<p><strong>Kind</strong>: instance method of <code><a href="#exp_module_symbol-tree--SymbolTree">SymbolTree</a></code><br>
<strong>Returns</strong>: <code>Object</code> - newObject<br>
<strong>Throws</strong>:</p>

<ul>
<li><code>Error</code> If the newObject is already present in this SymbolTree</li>
</ul>

<table><thead>
<tr>
<th>Param</th>
<th>Type</th>
</tr>
</thead><tbody>
<tr>
<td>referenceObject</td>
<td><code>Object</code></td>
</tr>
<tr>
<td>newObject</td>
<td><code>Object</code></td>
</tr>
</tbody></table>

<p><a name="module_symbol-tree--SymbolTree+prependChild"></a></p>

<h4 id="symboltree-prependchild-referenceobject-newobject-object">symbolTree.prependChild(referenceObject, newObject) ⇒ <code>Object</code></h4>

<p>Insert the given object as the first child of the given reference object.
<code class="prettyprint">newObject</code> is now the first child of <code class="prettyprint">referenceObject</code>.</p>

<p><code class="prettyprint">O(1)</code></p>

<p><strong>Kind</strong>: instance method of <code><a href="#exp_module_symbol-tree--SymbolTree">SymbolTree</a></code><br>
<strong>Returns</strong>: <code>Object</code> - newObject<br>
<strong>Throws</strong>:</p>

<ul>
<li><code>Error</code> If the newObject is already present in this SymbolTree</li>
</ul>

<table><thead>
<tr>
<th>Param</th>
<th>Type</th>
</tr>
</thead><tbody>
<tr>
<td>referenceObject</td>
<td><code>Object</code></td>
</tr>
<tr>
<td>newObject</td>
<td><code>Object</code></td>
</tr>
</tbody></table>

<p><a name="module_symbol-tree--SymbolTree+appendChild"></a></p>

<h4 id="symboltree-appendchild-referenceobject-newobject-object">symbolTree.appendChild(referenceObject, newObject) ⇒ <code>Object</code></h4>

<p>Insert the given object as the last child of the given reference object.
<code class="prettyprint">newObject</code> is now the last child of <code class="prettyprint">referenceObject</code>.</p>

<p><code class="prettyprint">O(1)</code></p>

<p><strong>Kind</strong>: instance method of <code><a href="#exp_module_symbol-tree--SymbolTree">SymbolTree</a></code><br>
<strong>Returns</strong>: <code>Object</code> - newObject<br>
<strong>Throws</strong>:</p>

<ul>
<li><code>Error</code> If the newObject is already present in this SymbolTree</li>
</ul>

<table><thead>
<tr>
<th>Param</th>
<th>Type</th>
</tr>
</thead><tbody>
<tr>
<td>referenceObject</td>
<td><code>Object</code></td>
</tr>
<tr>
<td>newObject</td>
<td><code>Object</code></td>
</tr>
</tbody></table>
