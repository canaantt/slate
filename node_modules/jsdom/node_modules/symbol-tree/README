<h1 id="symbol-tree">symbol-tree</h1>

<p>Turn any collection of objects into its own efficient tree or linked list using <code class="prettyprint">Symbol</code>.</p>

<p>This library has been designed to provide an efficient backing data structure for DOM trees. You can also use this library as an efficient linked list. Any meta data is stored on your objects directly, which ensures any kind of insertion or deletion is performed in constant time. Because an ES6 <code class="prettyprint">Symbol</code> is used, the meta data does not interfere with your object in any way.</p>

<p>Node.js 4+, io.js and modern browsers are supported.</p>

<h2 id="example">Example</h2>

<p>A linked list:</p>
<pre class="highlight javascript"><code><span class="kr">const</span> <span class="nx">SymbolTree</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'symbol-tree'</span><span class="p">);</span>
<span class="kr">const</span> <span class="nx">tree</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SymbolTree</span><span class="p">();</span>

<span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">{</span><span class="na">foo</span><span class="p">:</span> <span class="s1">'bar'</span><span class="p">};</span> <span class="c1">// or `new Whatever()`</span>
<span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="p">{</span><span class="na">foo</span><span class="p">:</span> <span class="s1">'baz'</span><span class="p">};</span>
<span class="kd">let</span> <span class="nx">c</span> <span class="o">=</span> <span class="p">{</span><span class="na">foo</span><span class="p">:</span> <span class="s1">'qux'</span><span class="p">};</span>

<span class="nx">tree</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span> <span class="nx">a</span><span class="p">);</span> <span class="c1">// insert a before b</span>
<span class="nx">tree</span><span class="p">.</span><span class="nx">insertAfter</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">);</span> <span class="c1">// insert c after b</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">tree</span><span class="p">.</span><span class="nx">nextSibling</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="o">===</span> <span class="nx">b</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">tree</span><span class="p">.</span><span class="nx">nextSibling</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span> <span class="o">===</span> <span class="nx">c</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">tree</span><span class="p">.</span><span class="nx">previousSibling</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span> <span class="o">===</span> <span class="nx">b</span><span class="p">);</span>

<span class="nx">tree</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">tree</span><span class="p">.</span><span class="nx">nextSibling</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="o">===</span> <span class="nx">c</span><span class="p">);</span>
</code></pre>

<p>A tree:</p>
<pre class="highlight javascript"><code><span class="kr">const</span> <span class="nx">SymbolTree</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'symbol-tree'</span><span class="p">);</span>
<span class="kr">const</span> <span class="nx">tree</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SymbolTree</span><span class="p">();</span>

<span class="kd">let</span> <span class="nx">parent</span> <span class="o">=</span> <span class="p">{};</span>
<span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">{};</span>
<span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="p">{};</span>
<span class="kd">let</span> <span class="nx">c</span> <span class="o">=</span> <span class="p">{};</span>

<span class="nx">tree</span><span class="p">.</span><span class="nx">prependChild</span><span class="p">(</span><span class="nx">parent</span><span class="p">,</span> <span class="nx">a</span><span class="p">);</span> <span class="c1">// insert a as the first child</span>
<span class="nx">tree</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">parent</span><span class="p">,</span><span class="nx">c</span> <span class="p">);</span> <span class="c1">// insert c as the last child</span>
<span class="nx">tree</span><span class="p">.</span><span class="nx">insertAfter</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">);</span> <span class="c1">// insert b after a, it now has the same parent as a</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">tree</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">(</span><span class="nx">parent</span><span class="p">)</span> <span class="o">===</span> <span class="nx">a</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">tree</span><span class="p">.</span><span class="nx">nextSibling</span><span class="p">(</span><span class="nx">tree</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">(</span><span class="nx">parent</span><span class="p">))</span> <span class="o">===</span> <span class="nx">b</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">tree</span><span class="p">.</span><span class="nx">lastChild</span><span class="p">(</span><span class="nx">parent</span><span class="p">)</span> <span class="o">===</span> <span class="nx">c</span><span class="p">);</span>

<span class="kd">let</span> <span class="nx">grandparent</span> <span class="o">=</span> <span class="p">{};</span>
<span class="nx">tree</span><span class="p">.</span><span class="nx">prependChild</span><span class="p">(</span><span class="nx">grandparent</span><span class="p">,</span> <span class="nx">parent</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">tree</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">(</span><span class="nx">tree</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">(</span><span class="nx">grandparent</span><span class="p">))</span> <span class="o">===</span> <span class="nx">a</span><span class="p">);</span>
</code></pre>

<p>See <a href="api.md">api.md</a> for more documentation.</p>

<h2 id="testing">Testing</h2>

<p>Make sure you install the dependencies first:</p>

<p>npm install</p>

<p>You can now run the unit tests by executing:</p>

<p>npm test</p>

<p>The line and branch coverage should be 100%.</p>
