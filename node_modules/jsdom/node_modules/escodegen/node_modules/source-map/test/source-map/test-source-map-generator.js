/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if("function"!=typeof define)var define=require("amdefine")(module,require);define(function(e,n,o){var a=e("../../lib/source-map/source-map-generator").SourceMapGenerator,i=e("../../lib/source-map/source-map-consumer").SourceMapConsumer,l=e("../../lib/source-map/source-node").SourceNode;e("./util");n["test some simple stuff"]=function(e,n){var o=new a({file:"foo.js",sourceRoot:"."});e.ok(!0);var o=(new a).toJSON();e.ok(!("file"in o)),e.ok(!("sourceRoot"in o))},n["test JSON serialization"]=function(e,n){var o=new a({file:"foo.js",sourceRoot:"."});e.equal(o.toString(),JSON.stringify(o))},n["test adding mappings (case 1)"]=function(e,n){var o=new a({file:"generated-foo.js",sourceRoot:"."});e.doesNotThrow(function(){o.addMapping({generated:{line:1,column:1}})})},n["test adding mappings (case 2)"]=function(e,n){var o=new a({file:"generated-foo.js",sourceRoot:"."});e.doesNotThrow(function(){o.addMapping({generated:{line:1,column:1},source:"bar.js",original:{line:1,column:1}})})},n["test adding mappings (case 3)"]=function(e,n){var o=new a({file:"generated-foo.js",sourceRoot:"."});e.doesNotThrow(function(){o.addMapping({generated:{line:1,column:1},source:"bar.js",original:{line:1,column:1},name:"someToken"})})},n["test adding mappings (invalid)"]=function(e,n){var o=new a({file:"generated-foo.js",sourceRoot:"."});e["throws"](function(){o.addMapping({})}),e["throws"](function(){o.addMapping({generated:{line:1,column:1},original:{line:1,column:1}})})},n["test adding mappings with skipValidation"]=function(e,n){var o=new a({file:"generated-foo.js",sourceRoot:".",skipValidation:!0});e["throws"](function(){o.addMapping({})}),e.doesNotThrow(function(){o.addMapping({generated:{line:1,column:1},original:{line:1,column:1}})})},n["test that the correct mappings are being generated"]=function(e,n){var o=new a({file:"min.js",sourceRoot:"/the/root"});o.addMapping({generated:{line:1,column:1},original:{line:1,column:1},source:"one.js"}),o.addMapping({generated:{line:1,column:5},original:{line:1,column:5},source:"one.js"}),o.addMapping({generated:{line:1,column:9},original:{line:1,column:11},source:"one.js"}),o.addMapping({generated:{line:1,column:18},original:{line:1,column:21},source:"one.js",name:"bar"}),o.addMapping({generated:{line:1,column:21},original:{line:2,column:3},source:"one.js"}),o.addMapping({generated:{line:1,column:28},original:{line:2,column:10},source:"one.js",name:"baz"}),o.addMapping({generated:{line:1,column:32},original:{line:2,column:14},source:"one.js",name:"bar"}),o.addMapping({generated:{line:2,column:1},original:{line:1,column:1},source:"two.js"}),o.addMapping({generated:{line:2,column:5},original:{line:1,column:5},source:"two.js"}),o.addMapping({generated:{line:2,column:9},original:{line:1,column:11},source:"two.js"}),o.addMapping({generated:{line:2,column:18},original:{line:1,column:21},source:"two.js",name:"n"}),o.addMapping({generated:{line:2,column:21},original:{line:2,column:3},source:"two.js"}),o.addMapping({generated:{line:2,column:28},original:{line:2,column:10},source:"two.js",name:"n"}),o=JSON.parse(o.toString()),n.assertEqualMaps(e,o,n.testMap)},n["test that adding a mapping with an empty string name does not break generation"]=function(e,n){var o=new a({file:"generated-foo.js",sourceRoot:"."});o.addMapping({generated:{line:1,column:1},source:"bar.js",original:{line:1,column:1},name:""}),e.doesNotThrow(function(){JSON.parse(o.toString())})},n["test that source content can be set"]=function(e,n){var o=new a({file:"min.js",sourceRoot:"/the/root"});o.addMapping({generated:{line:1,column:1},original:{line:1,column:1},source:"one.js"}),o.addMapping({generated:{line:2,column:1},original:{line:1,column:1},source:"two.js"}),o.setSourceContent("one.js","one file content"),o=JSON.parse(o.toString()),e.equal(o.sources[0],"one.js"),e.equal(o.sources[1],"two.js"),e.equal(o.sourcesContent[0],"one file content"),e.equal(o.sourcesContent[1],null)},n["test .fromSourceMap"]=function(e,n){var o=a.fromSourceMap(new i(n.testMap));n.assertEqualMaps(e,o.toJSON(),n.testMap)},n["test .fromSourceMap with sourcesContent"]=function(e,n){var o=a.fromSourceMap(new i(n.testMapWithSourcesContent));n.assertEqualMaps(e,o.toJSON(),n.testMapWithSourcesContent)},n["test applySourceMap"]=function(e,n){var o=new l(null,null,null,[new l(2,0,"fileX","lineX2\n"),"genA1\n",new l(2,0,"fileY","lineY2\n"),"genA2\n",new l(1,0,"fileX","lineX1\n"),"genA3\n",new l(1,0,"fileY","lineY1\n")]),t=o.toStringWithSourceMap({file:"fileA"}).map;t.setSourceContent("fileX","lineX1\nlineX2\n"),t=t.toJSON(),o=new l(null,null,null,["gen1\n",new l(1,0,"fileA","lineA1\n"),new l(2,0,"fileA","lineA2\n"),new l(3,0,"fileA","lineA3\n"),new l(4,0,"fileA","lineA4\n"),new l(1,0,"fileB","lineB1\n"),new l(2,0,"fileB","lineB2\n"),"gen2\n"]);var r=o.toStringWithSourceMap({file:"fileGen"}).map;r.setSourceContent("fileB","lineB1\nlineB2\n"),r=r.toJSON(),o=new l(null,null,null,["gen1\n",new l(2,0,"fileX","lineA1\n"),new l(2,0,"fileA","lineA2\n"),new l(2,0,"fileY","lineA3\n"),new l(4,0,"fileA","lineA4\n"),new l(1,0,"fileB","lineB1\n"),new l(2,0,"fileB","lineB2\n"),"gen2\n"]);var s=o.toStringWithSourceMap({file:"fileGen"}).map;s.setSourceContent("fileX","lineX1\nlineX2\n"),s.setSourceContent("fileB","lineB1\nlineB2\n"),s=s.toJSON();var c=a.fromSourceMap(new i(r));c.applySourceMap(new i(t));var u=c.toJSON();n.assertEqualMaps(e,u,s)},n["test applySourceMap throws when file is missing"]=function(e,n){var o=new a({file:"test.js"}),l=new a;e["throws"](function(){o.applySourceMap(new i(l.toJSON()))})},n["test the two additional parameters of applySourceMap"]=function(e,n){var o=new a({file:"bundle.js"});o.addMapping({generated:{line:3,column:3},original:{line:2,column:2},source:"../../coffee/foo.coffee"}),o.setSourceContent("../../coffee/foo.coffee","foo coffee"),o.addMapping({generated:{line:13,column:13},original:{line:12,column:12},source:"/bar.coffee"}),o.setSourceContent("/bar.coffee","bar coffee"),o.addMapping({generated:{line:23,column:23},original:{line:22,column:22},source:"http://www.example.com/baz.coffee"}),o.setSourceContent("http://www.example.com/baz.coffee","baz coffee"),o=new i(o.toJSON());var l=new a({file:"bundle.min.js",sourceRoot:".."});l.addMapping({generated:{line:1,column:1},original:{line:3,column:3},source:"temp/bundle.js"}),l.addMapping({generated:{line:11,column:11},original:{line:13,column:13},source:"temp/bundle.js"}),l.addMapping({generated:{line:21,column:21},original:{line:23,column:23},source:"temp/bundle.js"}),l=new i(l.toJSON());var t=function(e){var n=new a({file:"bundle.min.js",sourceRoot:".."});return n.addMapping({generated:{line:1,column:1},original:{line:2,column:2},source:e[0]}),n.setSourceContent(e[0],"foo coffee"),n.addMapping({generated:{line:11,column:11},original:{line:12,column:12},source:e[1]}),n.setSourceContent(e[1],"bar coffee"),n.addMapping({generated:{line:21,column:21},original:{line:22,column:22},source:e[2]}),n.setSourceContent(e[2],"baz coffee"),n.toJSON()},r=function(e){var n=a.fromSourceMap(l);return n.applySourceMap(o,"../temp/bundle.js",e),n.toJSON()};n.assertEqualMaps(e,r("../temp/temp_maps"),t(["coffee/foo.coffee","/bar.coffee","http://www.example.com/baz.coffee"])),n.assertEqualMaps(e,r("/app/temp/temp_maps"),t(["/app/coffee/foo.coffee","/bar.coffee","http://www.example.com/baz.coffee"])),n.assertEqualMaps(e,r("http://foo.org/app/temp/temp_maps"),t(["http://foo.org/app/coffee/foo.coffee","http://foo.org/bar.coffee","http://www.example.com/baz.coffee"])),n.assertEqualMaps(e,r(),t(["../coffee/foo.coffee","/bar.coffee","http://www.example.com/baz.coffee"])),n.assertEqualMaps(e,r(""),t(["../coffee/foo.coffee","/bar.coffee","http://www.example.com/baz.coffee"])),n.assertEqualMaps(e,r("."),t(["../coffee/foo.coffee","/bar.coffee","http://www.example.com/baz.coffee"])),n.assertEqualMaps(e,r("./"),t(["../coffee/foo.coffee","/bar.coffee","http://www.example.com/baz.coffee"]))},n["test applySourceMap name handling"]=function(e,n){var o=function(n,o,l){var t=new a({file:"test.js.min"});t.addMapping({generated:{line:1,column:4},original:{line:1,column:4},source:"test.js",name:o});var r=new a({file:"test.js"});r.addMapping({generated:{line:1,column:4},original:{line:1,column:0},source:"test.coffee",name:n}),t.applySourceMap(new i(r.toJSON())),new i(t.toJSON()).eachMapping(function(n){e.equal(n.name,l)})};o(null,"foo","foo"),o("foo","coffee$foo","foo"),o("foo",null,"foo"),o(null,null,null)},n["test sorting with duplicate generated mappings"]=function(e,n){var o=new a({file:"test.js"});o.addMapping({generated:{line:3,column:0},original:{line:2,column:0},source:"a.js"}),o.addMapping({generated:{line:2,column:0}}),o.addMapping({generated:{line:2,column:0}}),o.addMapping({generated:{line:1,column:0},original:{line:1,column:0},source:"a.js"}),n.assertEqualMaps(e,o.toJSON(),{version:3,file:"test.js",sources:["a.js"],names:[],mappings:"AAAA;A;AACA"})},n["test ignore duplicate mappings."]=function(e,n){var o,i,l={file:"min.js",sourceRoot:"/the/root"},t={generated:{line:1,column:0}},r={generated:{line:2,column:2}};o=new a(l),i=new a(l),o.addMapping(t),o.addMapping(t),i.addMapping(t),n.assertEqualMaps(e,o.toJSON(),i.toJSON()),o.addMapping(r),o.addMapping(t),i.addMapping(r),n.assertEqualMaps(e,o.toJSON(),i.toJSON());var s={generated:{line:1,column:0},original:{line:11,column:0},source:"srcMapping1.js"},c={generated:{line:2,column:2},original:{line:11,column:0},source:"srcMapping2.js"};o=new a(l),i=new a(l),o.addMapping(s),o.addMapping(s),i.addMapping(s),n.assertEqualMaps(e,o.toJSON(),i.toJSON()),o.addMapping(c),o.addMapping(s),i.addMapping(c),n.assertEqualMaps(e,o.toJSON(),i.toJSON());var u={generated:{line:1,column:0},original:{line:11,column:0},source:"fullMapping1.js",name:"fullMapping1"},p={generated:{line:2,column:2},original:{line:11,column:0},source:"fullMapping2.js",name:"fullMapping2"};o=new a(l),i=new a(l),o.addMapping(u),o.addMapping(u),i.addMapping(u),n.assertEqualMaps(e,o.toJSON(),i.toJSON()),o.addMapping(p),o.addMapping(u),i.addMapping(p),n.assertEqualMaps(e,o.toJSON(),i.toJSON())},n["test github issue #72, check for duplicate names or sources"]=function(e,n){var o=new a({file:"test.js"});o.addMapping({generated:{line:1,column:1},original:{line:2,column:2},source:"a.js",name:"foo"}),o.addMapping({generated:{line:3,column:3},original:{line:4,column:4},source:"a.js",name:"foo"}),n.assertEqualMaps(e,o.toJSON(),{version:3,file:"test.js",sources:["a.js"],names:["foo"],mappings:"CACEA;;GAEEA"})},n["test setting sourcesContent to null when already null"]=function(e,n){var o=new a({file:"foo.js"});e.doesNotThrow(function(){o.setSourceContent("bar.js",null)})}});