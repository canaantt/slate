/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if("function"!=typeof define)var define=require("amdefine")(module,require);define(function(t,o,a){function r(){for(var t=new i,o=0;100>o;o++)t.add(String(o));return t}var i=t("../../lib/source-map/array-set").ArraySet;o["test .has() membership"]=function(t,o){for(var a=r(),i=0;100>i;i++)t.ok(a.has(String(i)))},o["test .indexOf() elements"]=function(t,o){for(var a=r(),i=0;100>i;i++)t.strictEqual(a.indexOf(String(i)),i)},o["test .at() indexing"]=function(t,o){for(var a=r(),i=0;100>i;i++)t.strictEqual(a.at(i),String(i))},o["test creating from an array"]=function(t,o){var a=i.fromArray(["foo","bar","baz","quux","hasOwnProperty"]);t.ok(a.has("foo")),t.ok(a.has("bar")),t.ok(a.has("baz")),t.ok(a.has("quux")),t.ok(a.has("hasOwnProperty")),t.strictEqual(a.indexOf("foo"),0),t.strictEqual(a.indexOf("bar"),1),t.strictEqual(a.indexOf("baz"),2),t.strictEqual(a.indexOf("quux"),3),t.strictEqual(a.at(0),"foo"),t.strictEqual(a.at(1),"bar"),t.strictEqual(a.at(2),"baz"),t.strictEqual(a.at(3),"quux")},o["test that you can add __proto__; see github issue #30"]=function(t,o){var a=new i;a.add("__proto__"),t.ok(a.has("__proto__")),t.strictEqual(a.at(0),"__proto__"),t.strictEqual(a.indexOf("__proto__"),0)},o["test .fromArray() with duplicates"]=function(t,o){var a=i.fromArray(["foo","foo"]);t.ok(a.has("foo")),t.strictEqual(a.at(0),"foo"),t.strictEqual(a.indexOf("foo"),0),t.strictEqual(a.toArray().length,1),a=i.fromArray(["foo","foo"],!0),t.ok(a.has("foo")),t.strictEqual(a.at(0),"foo"),t.strictEqual(a.at(1),"foo"),t.strictEqual(a.indexOf("foo"),0),t.strictEqual(a.toArray().length,2)},o["test .add() with duplicates"]=function(t,o){var a=new i;a.add("foo"),a.add("foo"),t.ok(a.has("foo")),t.strictEqual(a.at(0),"foo"),t.strictEqual(a.indexOf("foo"),0),t.strictEqual(a.toArray().length,1),a.add("foo",!0),t.ok(a.has("foo")),t.strictEqual(a.at(0),"foo"),t.strictEqual(a.at(1),"foo"),t.strictEqual(a.indexOf("foo"),0),t.strictEqual(a.toArray().length,2)}});