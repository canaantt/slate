<h1 id="optionator">Optionator</h1>

<p><a name="optionator" /></p>

<p>Optionator is a JavaScript option parsing and help generation library used by <a href="http://eslint.org">eslint</a>, <a href="http://graspjs.com">Grasp</a>, <a href="http://livescript.net">LiveScript</a>, <a href="https://github.com/estools/esmangle">esmangle</a>, <a href="https://github.com/estools/escodegen">escodegen</a>, and <a href="https://www.npmjs.com/browse/depended/optionator">many more</a>.</p>

<p>For an online demo, check out the <a href="http://www.graspjs.com/#demo">Grasp online demo</a>.</p>

<p><a href="#about">About</a> &middot; <a href="#usage">Usage</a> &middot; <a href="#settings-format">Settings Format</a> &middot; <a href="#argument-format">Argument Format</a></p>

<h2 id="why">Why?</h2>

<p>The  problem with other option parsers, such as <code class="prettyprint">yargs</code> or <code class="prettyprint">minimist</code>, is they just accept all input, valid or not.
With Optionator, if you mistype an option, it will give you an error (with a suggestion for what you meant).
If you give the wrong type of argument for an option, it will give you an error rather than supplying the wrong input to your application.</p>

<p>$ cmd &ndash;halp
    Invalid option &rsquo;&ndash;halp&rsquo; - perhaps you meant &rsquo;&ndash;help&rsquo;?</p>

<p>$ cmd &ndash;count str
    Invalid value for option &lsquo;count&rsquo; - expected type Int, received value: str.</p>

<p>Other helpful features include reformatting the help text based on the size of the console, so that it fits even if the console is narrow, and accepting not just an array (eg. process.argv), but a string or object as well, making things like testing much easier.</p>

<h2 id="about">About</h2>

<p>Optionator uses <a href="https://github.com/gkz/type-check">type-check</a> and <a href="https://github.com/gkz/levn">levn</a> behind the scenes to cast and verify input according the specified types.</p>

<p>MIT license. Version 0.8.1</p>

<p>npm install optionator</p>

<p>For updates on Optionator, <a href="https://twitter.com/gkzahariev">follow me on twitter</a>.</p>

<h2 id="usage">Usage</h2>

<p><code class="prettyprint">require(&#39;optionator&#39;);</code> returns a function. It has one property, <code class="prettyprint">VERSION</code>, the current version of the library as a string. This function is called with an object specifying your options and other information, see the <a href="#settings-format">settings format section</a>. This in turn returns an object with three properties, <code class="prettyprint">parse</code>, <code class="prettyprint">parseArgv</code>, <code class="prettyprint">generateHelp</code>, and <code class="prettyprint">generateHelpForOption</code>, which are all functions.</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">optionator</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'optionator'</span><span class="p">)({</span>
    <span class="na">prepend</span><span class="p">:</span> <span class="s1">'Usage: cmd [options]'</span><span class="p">,</span>
    <span class="na">append</span><span class="p">:</span> <span class="s1">'Version 1.0.0'</span><span class="p">,</span>
    <span class="na">options</span><span class="p">:</span> <span class="p">[{</span>
        <span class="na">option</span><span class="p">:</span> <span class="s1">'help'</span><span class="p">,</span>
        <span class="na">alias</span><span class="p">:</span> <span class="s1">'h'</span><span class="p">,</span>
        <span class="na">type</span><span class="p">:</span> <span class="s1">'Boolean'</span><span class="p">,</span>
        <span class="na">description</span><span class="p">:</span> <span class="s1">'displays help'</span>
    <span class="p">},</span> <span class="p">{</span>
        <span class="na">option</span><span class="p">:</span> <span class="s1">'count'</span><span class="p">,</span>
        <span class="na">alias</span><span class="p">:</span> <span class="s1">'c'</span><span class="p">,</span>
        <span class="na">type</span><span class="p">:</span> <span class="s1">'Int'</span><span class="p">,</span>
        <span class="na">description</span><span class="p">:</span> <span class="s1">'number of things'</span><span class="p">,</span>
        <span class="na">example</span><span class="p">:</span> <span class="s1">'cmd --count 2'</span>
    <span class="p">}]</span>
<span class="p">});</span>

<span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="nx">optionator</span><span class="p">.</span><span class="nx">parseArgv</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">help</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">optionator</span><span class="p">.</span><span class="nx">generateHelp</span><span class="p">());</span>
<span class="p">}</span>
<span class="p">...</span>
</code></pre>

<h3 id="parse-input-parseoptions">parse(input, parseOptions)</h3>

<p><code class="prettyprint">parse</code> processes the <code class="prettyprint">input</code> according to your settings, and returns an object with the results.</p>

<h5 id="arguments">arguments</h5>

<ul>
<li>input - <code class="prettyprint">[String] | Object | String</code> - the input you wish to parse</li>
<li>parseOptions - <code class="prettyprint">{slice: Int}</code> - all options optional

<ul>
<li><code class="prettyprint">slice</code> specifies how much to slice away from the beginning if the input is an array or string - by default <code class="prettyprint">0</code> for string, <code class="prettyprint">2</code> for array (works with <code class="prettyprint">process.argv</code>)</li>
</ul></li>
</ul>

<h5 id="returns">returns</h5>

<p><code class="prettyprint">Object</code> - the parsed options, each key is a camelCase version of the option name (specified in dash-case), and each value is the processed value for that option. Positional values are in an array under the <code class="prettyprint">_</code> key.</p>

<h5 id="example">example</h5>
<pre class="highlight javascript"><code><span class="nx">parse</span><span class="p">([</span><span class="s1">'node'</span><span class="p">,</span> <span class="s1">'t.js'</span><span class="p">,</span> <span class="s1">'--count'</span><span class="p">,</span> <span class="s1">'2'</span><span class="p">,</span> <span class="s1">'positional'</span><span class="p">]);</span> <span class="c1">// {count: 2, _: ['positional']}</span>
<span class="nx">parse</span><span class="p">(</span><span class="s1">'--count 2 positional'</span><span class="p">);</span>                         <span class="c1">// {count: 2, _: ['positional']}</span>
<span class="nx">parse</span><span class="p">({</span><span class="na">count</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="na">_</span><span class="p">:[</span><span class="s1">'positional'</span><span class="p">]});</span>                   <span class="c1">// {count: 2, _: ['positional']}</span>
</code></pre>

<h3 id="parseargv-input">parseArgv(input)</h3>

<p><code class="prettyprint">parseArgv</code> works exactly like <code class="prettyprint">parse</code>, but only for array input and it slices off the first two elements.</p>

<h5 id="arguments">arguments</h5>

<ul>
<li>input - <code class="prettyprint">[String]</code> - the input you wish to parse</li>
</ul>

<h5 id="returns">returns</h5>

<p>See &ldquo;returns&rdquo; section in &ldquo;parse&rdquo;</p>

<h5 id="example">example</h5>
<pre class="highlight javascript"><code><span class="nx">parseArgv</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">);</span>
</code></pre>

<h3 id="generatehelp-helpoptions">generateHelp(helpOptions)</h3>

<p><code class="prettyprint">generateHelp</code> produces help text based on your settings.</p>

<h5 id="arguments">arguments</h5>

<ul>
<li>helpOptions - <code class="prettyprint">{showHidden: Boolean, interpolate: Object}</code> - all options optional

<ul>
<li><code class="prettyprint">showHidden</code> specifies whether to show options with <code class="prettyprint">hidden: true</code> specified, by default it is <code class="prettyprint">false</code></li>
<li><code class="prettyprint">interpolate</code> specify data to be interpolated in <code class="prettyprint">prepend</code> and <code class="prettyprint">append</code> text, <code class="prettyprint">{{key}}</code> is the format - eg. <code class="prettyprint">generateHelp({interpolate:{version: &#39;0.4.2&#39;}})</code>, will change this <code class="prettyprint">append</code> text: <code class="prettyprint">Version {{version}}</code> to <code class="prettyprint">Version 0.4.2</code></li>
</ul></li>
</ul>

<h5 id="returns">returns</h5>

<p><code class="prettyprint">String</code> - the generated help text</p>

<h5 id="example">example</h5>
<pre class="highlight javascript"><code><span class="nx">generateHelp</span><span class="p">();</span> <span class="cm">/*
"Usage: cmd [options] positional

  -h, --help       displays help
  -c, --count Int  number of things

Version  1.0.0
"*/</span>
</code></pre>

<h3 id="generatehelpforoption-optionname">generateHelpForOption(optionName)</h3>

<p><code class="prettyprint">generateHelpForOption</code> produces expanded help text for the specified with <code class="prettyprint">optionName</code> option. If an <code class="prettyprint">example</code> was specified for the option, it will be displayed,  and if a <code class="prettyprint">longDescription</code> was specified, it will display that instead of the <code class="prettyprint">description</code>.</p>

<h5 id="arguments">arguments</h5>

<ul>
<li>optionName - <code class="prettyprint">String</code> - the name of the option to display</li>
</ul>

<h5 id="returns">returns</h5>

<p><code class="prettyprint">String</code> - the generated help text for the option</p>

<h5 id="example">example</h5>
<pre class="highlight javascript"><code><span class="nx">generateHelpForOption</span><span class="p">(</span><span class="s1">'count'</span><span class="p">);</span> <span class="cm">/*
"-c, --count Int
description: number of things
example: cmd --count 2
"*/</span>
</code></pre>

<h2 id="settings-format">Settings Format</h2>

<p>When your <code class="prettyprint">require(&#39;optionator&#39;)</code>, you get a function that takes in a settings object. This object has the type:</p>

<p>{
      prepend: String,
      append: String,
      options: [{heading: String} | {
        option: String,
        alias: [String] | String,
        type: String,
        enum: [String],
        default: String,
        restPositional: Boolean,
        required: Boolean,
        overrideRequired: Boolean,
        dependsOn: [String] | String,
        concatRepeatedArrays: Boolean | (Boolean, Object),
        mergeRepeatedObjects: Boolean,
        description: String,
        longDescription: String,
        example: [String] | String
      }],
      helpStyle: {
        aliasSeparator: String,
        typeSeparator: String,
        descriptionSeparator: String,
        initialIndent: Int,
        secondaryIndent: Int,
        maxPadFactor: Number
      },
      mutuallyExclusive: [[String | [String]]],
      concatRepeatedArrays: Boolean | (Boolean, Object), // deprecated, set in defaults object
      mergeRepeatedObjects: Boolean, // deprecated, set in defaults object
      positionalAnywhere: Boolean,
      typeAliases: Object,
      defaults: Object
    }</p>

<p>All of the properties are optional (the <code class="prettyprint">Maybe</code> has been excluded for brevities sake), except for having either <code class="prettyprint">heading: String</code> or <code class="prettyprint">option: String</code> in each object in the <code class="prettyprint">options</code> array.</p>

<h3 id="top-level-properties">Top Level Properties</h3>

<ul>
<li><code class="prettyprint">prepend</code> is an optional string to be placed before the options in the help text</li>
<li><code class="prettyprint">append</code> is an optional string to be placed after the options in the help text</li>
<li><code class="prettyprint">options</code> is a required array specifying your options and headings, the options and headings will be displayed in the order specified</li>
<li><code class="prettyprint">helpStyle</code> is an optional object which enables you to change the default appearance of some aspects of the help text</li>
<li><code class="prettyprint">mutuallyExclusive</code> is an optional array of arrays of either strings or arrays of strings. The top level array is a list of rules, each rule is a list of elements - each element can be either a string (the name of an option), or a list of strings (a group of option names) - there will be an error if more than one element is present</li>
<li><code class="prettyprint">concatRepeatedArrays</code> see description under the &ldquo;Option Properties&rdquo; heading - use at the top level is deprecated, if you want to set this for all options, use the <code class="prettyprint">defaults</code> property</li>
<li><code class="prettyprint">mergeRepeatedObjects</code> see description under the &ldquo;Option Properties&rdquo; heading - use at the top level is deprecated, if you want to set this for all options, use the <code class="prettyprint">defaults</code> property</li>
<li><code class="prettyprint">positionalAnywhere</code> is an optional boolean (defaults to <code class="prettyprint">true</code>) - when <code class="prettyprint">true</code> it allows positional arguments anywhere, when <code class="prettyprint">false</code>, all arguments after the first positional one are taken to be positional as well, even if they look like a flag. For example, with <code class="prettyprint">positionalAnywhere: false</code>, the arguments <code class="prettyprint">--flag --boom 12 --crack</code> would have two positional arguments: <code class="prettyprint">12</code> and <code class="prettyprint">--crack</code></li>
<li><code class="prettyprint">typeAliases</code> is an optional object, it allows you to set aliases for types, eg. <code class="prettyprint">{Path: &#39;String&#39;}</code> would allow you to use the type <code class="prettyprint">Path</code> as an alias for the type <code class="prettyprint">String</code></li>
<li><code class="prettyprint">defaults</code> is an optional object following the option properties format, which specifies default values for all options. A default will be overridden if manually set. For example, you can do <code class="prettyprint">default: { type: &quot;String&quot; }</code> to set the default type of all options to <code class="prettyprint">String</code>, and then override that default in an individual option by setting the <code class="prettyprint">type</code> property</li>
</ul>

<h4 id="heading-properties">Heading Properties</h4>

<ul>
<li><code class="prettyprint">heading</code> a required string, the name of the heading</li>
</ul>

<h4 id="option-properties">Option Properties</h4>

<ul>
<li><code class="prettyprint">option</code> the required name of the option - use dash-case, without the leading dashes</li>
<li><code class="prettyprint">alias</code> is an optional string or array of strings which specify any aliases for the option</li>
<li><code class="prettyprint">type</code> is a required string in the <a href="https://github.com/gkz/type-check">type check</a> <a href="https://github.com/gkz/type-check#type-format">format</a>, this will be used to cast the inputted value and validate it</li>
<li><code class="prettyprint">enum</code> is an optional array of strings, each string will be parsed by <a href="https://github.com/gkz/levn">levn</a> - the argument value must be one of the resulting values - each potential value must validate against the specified <code class="prettyprint">type</code></li>
<li><code class="prettyprint">default</code> is a optional string, which will be parsed by <a href="https://github.com/gkz/levn">levn</a> and used as the default value if none is set - the value must validate against the specified <code class="prettyprint">type</code></li>
<li><code class="prettyprint">restPositional</code> is an optional boolean - if set to <code class="prettyprint">true</code>, everything after the option will be taken to be a positional argument, even if it looks like a named argument</li>
<li><code class="prettyprint">required</code> is an optional boolean - if set to <code class="prettyprint">true</code>, the option parsing will fail if the option is not defined</li>
<li><code class="prettyprint">overrideRequired</code> is a optional boolean - if set to <code class="prettyprint">true</code> and the option is used, and there is another option which is required but not set, it will override the need for the required option and there will be no error - this is useful if you have required options and want to use <code class="prettyprint">--help</code> or <code class="prettyprint">--version</code> flags</li>
<li><code class="prettyprint">concatRepeatedArrays</code> is an optional boolean or tuple with boolean and options object (defaults to <code class="prettyprint">false</code>) - when set to <code class="prettyprint">true</code> and an option contains an array value and is repeated, the subsequent values for the flag will be appended rather than overwriting the original value - eg. option <code class="prettyprint">g</code> of type <code class="prettyprint">[String]</code>: <code class="prettyprint">-g a -g b -g c,d</code> will result in <code class="prettyprint">[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;]</code></li>
</ul>

<p>You can supply an options object by giving the following value: <code class="prettyprint">[true, options]</code>. The one currently supported option is <code class="prettyprint">oneValuePerFlag</code>, this only allows one array value per flag. This is useful if your potential values contain a comma.
* <code class="prettyprint">mergeRepeatedObjects</code> is an optional boolean (defaults to <code class="prettyprint">false</code>) - when set to <code class="prettyprint">true</code> and an option contains an object value and is repeated, the subsequent values for the flag will be merged rather than overwriting the original value - eg. option <code class="prettyprint">g</code> of type <code class="prettyprint">Object</code>: <code class="prettyprint">-g a:1 -g b:2 -g c:3,d:4</code> will result in <code class="prettyprint">{a: 1, b: 2, c: 3, d: 4}</code>
* <code class="prettyprint">dependsOn</code> is an optional string or array of strings - if simply a string (the name of another option), it will make sure that that other option is set, if an array of strings, depending on whether <code class="prettyprint">&#39;and&#39;</code> or <code class="prettyprint">&#39;or&#39;</code> is first, it will either check whether all (<code class="prettyprint">[&#39;and&#39;, &#39;option-a&#39;, &#39;option-b&#39;]</code>), or at least one (<code class="prettyprint">[&#39;or&#39;, &#39;option-a&#39;, &#39;option-b&#39;]</code>) other options are set
* <code class="prettyprint">description</code> is an optional string, which will be displayed next to the option in the help text
* <code class="prettyprint">longDescription</code> is an optional string, it will be displayed instead of the <code class="prettyprint">description</code> when <code class="prettyprint">generateHelpForOption</code> is used
* <code class="prettyprint">example</code> is an optional string or array of strings with example(s) for the option - these will be displayed when <code class="prettyprint">generateHelpForOption</code> is used</p>

<h4 id="help-style-properties">Help Style Properties</h4>

<ul>
<li><code class="prettyprint">aliasSeparator</code> is an optional string, separates multiple names from each other - default: &rsquo; ,&rsquo;</li>
<li><code class="prettyprint">typeSeparator</code> is an optional string, separates the type from the names - default: &rsquo; &rsquo;</li>
<li><code class="prettyprint">descriptionSeparator</code> is an optional string , separates the description from the padded name and type - default: &rsquo;  &rsquo;</li>
<li><code class="prettyprint">initialIndent</code> is an optional int - the amount of indent for options - default: 2</li>
<li><code class="prettyprint">secondaryIndent</code> is an optional int - the amount of indent if wrapped fully (in addition to the initial indent) - default: 4</li>
<li><code class="prettyprint">maxPadFactor</code> is an optional number - affects the default level of padding for the names/type, it is multiplied by the average of the length of the names/type - default: 1.5</li>
</ul>

<h2 id="argument-format">Argument Format</h2>

<p>At the highest level there are two types of arguments: named, and positional.</p>

<p>Name arguments of any length are prefixed with <code class="prettyprint">--</code> (eg. <code class="prettyprint">--go</code>), and those of one character may be prefixed with either <code class="prettyprint">--</code> or <code class="prettyprint">-</code> (eg. <code class="prettyprint">-g</code>).</p>

<p>There are two types of named arguments: boolean flags (eg. <code class="prettyprint">--problemo</code>, <code class="prettyprint">-p</code>) which take no value and result in a <code class="prettyprint">true</code> if they are present, the falsey <code class="prettyprint">undefined</code> if they are not present, or <code class="prettyprint">false</code> if present and explicitly prefixed with <code class="prettyprint">no</code> (eg. <code class="prettyprint">--no-problemo</code>). Named arguments with values (eg. <code class="prettyprint">--tseries 800</code>, <code class="prettyprint">-t 800</code>) are the other type. If the option has a type <code class="prettyprint">Boolean</code> it will automatically be made into a boolean flag. Any other type results in a named argument that takes a value.</p>

<p>For more information about how to properly set types to get the value you want, take a look at the <a href="https://github.com/gkz/type-check">type check</a> and <a href="https://github.com/gkz/levn">levn</a> pages.</p>

<p>You can group single character arguments that use a single <code class="prettyprint">-</code>, however all except the last must be boolean flags (which take no value). The last may be a boolean flag, or an argument which takes a value - eg. <code class="prettyprint">-ba 2</code> is equivalent to <code class="prettyprint">-b -a 2</code>.</p>

<p>Positional arguments are all those values which do not fall under the above - they can be anywhere, not just at the end. For example, in <code class="prettyprint">cmd -b one -a 2 two</code> where <code class="prettyprint">b</code> is a boolean flag, and <code class="prettyprint">a</code> has the type <code class="prettyprint">Number</code>, there are two positional arguments, <code class="prettyprint">one</code> and <code class="prettyprint">two</code>.</p>

<p>Everything after an <code class="prettyprint">--</code> is positional, even if it looks like a named argument.</p>

<p>You may optionally use <code class="prettyprint">=</code> to separate option names from values, for example: <code class="prettyprint">--count=2</code>.</p>

<p>If you specify the option <code class="prettyprint">NUM</code>, then any argument using a single <code class="prettyprint">-</code> followed by a number will be valid and will set the value of <code class="prettyprint">NUM</code>. Eg. <code class="prettyprint">-2</code> will be parsed into <code class="prettyprint">NUM: 2</code>.</p>

<p>If duplicate named arguments are present, the last one will be taken.</p>

<h2 id="technical-about">Technical About</h2>

<p><code class="prettyprint">optionator</code> is written in <a href="http://livescript.net/">LiveScript</a> - a language that compiles to JavaScript. It uses <a href="https://github.com/gkz/levn">levn</a> to cast arguments to their specified type, and uses <a href="https://github.com/gkz/type-check">type-check</a> to validate values. It also uses the <a href="http://preludels.com/">prelude.ls</a> library.</p>
