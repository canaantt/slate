<h1 id="type-check">type-check <a href="https://travis-ci.org/gkz/type-check"><img alt="Build Status" src="https://travis-ci.org/gkz/type-check.png?branch=master" /></a></h1>

<p><a name="type-check" /></p>

<p><code class="prettyprint">type-check</code> is a library which allows you to check the types of JavaScript values at runtime with a Haskell like type syntax. It is great for checking external input, for testing, or even for adding a bit of safety to your internal code. It is a major component of <a href="https://github.com/gkz/levn">levn</a>. MIT license. Version 0.3.2. Check out the <a href="http://gkz.github.io/type-check/">demo</a>.</p>

<p>For updates on <code class="prettyprint">type-check</code>, <a href="https://twitter.com/gkzahariev">follow me on twitter</a>.</p>

<p>npm install type-check</p>

<h2 id="quick-examples">Quick Examples</h2>
<pre class="highlight javascript"><code><span class="c1">// Basic types:</span>
<span class="kd">var</span> <span class="nx">typeCheck</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'type-check'</span><span class="p">).</span><span class="nx">typeCheck</span><span class="p">;</span>
<span class="nx">typeCheck</span><span class="p">(</span><span class="s1">'Number'</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>               <span class="c1">// true</span>
<span class="nx">typeCheck</span><span class="p">(</span><span class="s1">'Number'</span><span class="p">,</span> <span class="s1">'str'</span><span class="p">);</span>           <span class="c1">// false</span>
<span class="nx">typeCheck</span><span class="p">(</span><span class="s1">'Error'</span><span class="p">,</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">);</span>        <span class="c1">// true</span>
<span class="nx">typeCheck</span><span class="p">(</span><span class="s1">'Undefined'</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">);</span>    <span class="c1">// true</span>

<span class="c1">// Comment</span>
<span class="nx">typeCheck</span><span class="p">(</span><span class="s1">'count::Number'</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>        <span class="c1">// true</span>

<span class="c1">// One type OR another type:</span>
<span class="nx">typeCheck</span><span class="p">(</span><span class="s1">'Number | String'</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>      <span class="c1">// true</span>
<span class="nx">typeCheck</span><span class="p">(</span><span class="s1">'Number | String'</span><span class="p">,</span> <span class="s1">'str'</span><span class="p">);</span>  <span class="c1">// true</span>

<span class="c1">// Wildcard, matches all types:</span>
<span class="nx">typeCheck</span><span class="p">(</span><span class="s1">'*'</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">// true</span>

<span class="c1">// Array, all elements of a single type:</span>
<span class="nx">typeCheck</span><span class="p">(</span><span class="s1">'[Number]'</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]);</span>                <span class="c1">// true</span>
<span class="nx">typeCheck</span><span class="p">(</span><span class="s1">'[Number]'</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="s1">'str'</span><span class="p">,</span> <span class="mi">3</span><span class="p">]);</span>            <span class="c1">// false</span>

<span class="c1">// Tuples, or fixed length arrays with elements of different types:</span>
<span class="nx">typeCheck</span><span class="p">(</span><span class="s1">'(String, Number)'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'str'</span><span class="p">,</span> <span class="mi">2</span><span class="p">]);</span>       <span class="c1">// true</span>
<span class="nx">typeCheck</span><span class="p">(</span><span class="s1">'(String, Number)'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'str'</span><span class="p">]);</span>          <span class="c1">// false</span>
<span class="nx">typeCheck</span><span class="p">(</span><span class="s1">'(String, Number)'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'str'</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">]);</span>    <span class="c1">// false</span>

<span class="c1">// Object properties:</span>
<span class="nx">typeCheck</span><span class="p">(</span><span class="s1">'{x: Number, y: Boolean}'</span><span class="p">,</span> <span class="p">{</span><span class="na">x</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="na">y</span><span class="p">:</span> <span class="kc">false</span><span class="p">});</span>             <span class="c1">// true</span>
<span class="nx">typeCheck</span><span class="p">(</span><span class="s1">'{x: Number, y: Boolean}'</span><span class="p">,</span>       <span class="p">{</span><span class="na">x</span><span class="p">:</span> <span class="mi">2</span><span class="p">});</span>                 <span class="c1">// false</span>
<span class="nx">typeCheck</span><span class="p">(</span><span class="s1">'{x: Number, y: Maybe Boolean}'</span><span class="p">,</span> <span class="p">{</span><span class="na">x</span><span class="p">:</span> <span class="mi">2</span><span class="p">});</span>                 <span class="c1">// true</span>
<span class="nx">typeCheck</span><span class="p">(</span><span class="s1">'{x: Number, y: Boolean}'</span><span class="p">,</span>      <span class="p">{</span><span class="na">x</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="na">y</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span> <span class="na">z</span><span class="p">:</span> <span class="mi">3</span><span class="p">});</span>  <span class="c1">// false</span>
<span class="nx">typeCheck</span><span class="p">(</span><span class="s1">'{x: Number, y: Boolean, ...}'</span><span class="p">,</span> <span class="p">{</span><span class="na">x</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="na">y</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span> <span class="na">z</span><span class="p">:</span> <span class="mi">3</span><span class="p">});</span>  <span class="c1">// true</span>

<span class="c1">// A particular type AND object properties:</span>
<span class="nx">typeCheck</span><span class="p">(</span><span class="s1">'RegExp{source: String, ...}'</span><span class="p">,</span> <span class="sr">/re/i</span><span class="p">);</span>          <span class="c1">// true</span>
<span class="nx">typeCheck</span><span class="p">(</span><span class="s1">'RegExp{source: String, ...}'</span><span class="p">,</span> <span class="p">{</span><span class="na">source</span><span class="p">:</span> <span class="s1">'re'</span><span class="p">});</span> <span class="c1">// false</span>

<span class="c1">// Custom types:</span>
<span class="kd">var</span> <span class="nx">opt</span> <span class="o">=</span> <span class="p">{</span><span class="na">customTypes</span><span class="p">:</span>
  <span class="p">{</span><span class="na">Even</span><span class="p">:</span> <span class="p">{</span> <span class="na">typeOf</span><span class="p">:</span> <span class="s1">'Number'</span><span class="p">,</span> <span class="na">validate</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span><span class="p">;</span> <span class="p">}}}};</span>
<span class="nx">typeCheck</span><span class="p">(</span><span class="s1">'Even'</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">opt</span><span class="p">);</span> <span class="c1">// true</span>

<span class="c1">// Nested:</span>
<span class="kd">var</span> <span class="nx">type</span> <span class="o">=</span> <span class="s1">'{a: (String, [Number], {y: Array, ...}), b: Error{message: String, ...}}'</span>
<span class="nx">typeCheck</span><span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="p">{</span><span class="na">a</span><span class="p">:</span> <span class="p">[</span><span class="s1">'hi'</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">{</span><span class="na">y</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="s1">'ms'</span><span class="p">]}],</span> <span class="na">b</span><span class="p">:</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">'oh no'</span><span class="p">)});</span> <span class="c1">// true</span>
</code></pre>

<p>Check out the <a href="#syntax">type syntax format</a> and <a href="#guide">guide</a>.</p>

<h2 id="usage">Usage</h2>

<p><code class="prettyprint">require(&#39;type-check&#39;);</code> returns an object that exposes four properties. <code class="prettyprint">VERSION</code> is the current version of the library as a string. <code class="prettyprint">typeCheck</code>, <code class="prettyprint">parseType</code>, and <code class="prettyprint">parsedTypeCheck</code> are functions.</p>
<pre class="highlight javascript"><code><span class="c1">// typeCheck(type, input, options);</span>
<span class="nx">typeCheck</span><span class="p">(</span><span class="s1">'Number'</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>               <span class="c1">// true</span>

<span class="c1">// parseType(type);</span>
<span class="kd">var</span> <span class="nx">parsedType</span> <span class="o">=</span> <span class="nx">parseType</span><span class="p">(</span><span class="s1">'Number'</span><span class="p">);</span> <span class="c1">// object</span>

<span class="c1">// parsedTypeCheck(parsedType, input, options);</span>
<span class="nx">parsedTypeCheck</span><span class="p">(</span><span class="nx">parsedType</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>       <span class="c1">// true</span>
</code></pre>

<h3 id="typecheck-type-input-options">typeCheck(type, input, options)</h3>

<p><code class="prettyprint">typeCheck</code> checks a JavaScript value <code class="prettyprint">input</code> against <code class="prettyprint">type</code> written in the <a href="#type-format">type format</a> (and taking account the optional <code class="prettyprint">options</code>) and returns whether the <code class="prettyprint">input</code> matches the <code class="prettyprint">type</code>.</p>

<h5 id="arguments">arguments</h5>

<ul>
<li>type - <code class="prettyprint">String</code> - the type written in the <a href="#type-format">type format</a> which to check against</li>
<li>input - <code class="prettyprint">*</code> - any JavaScript value, which is to be checked against the type</li>
<li>options - <code class="prettyprint">Maybe Object</code> - an optional parameter specifying additional options, currently the only available option is specifying <a href="#custom-types">custom types</a></li>
</ul>

<h5 id="returns">returns</h5>

<p><code class="prettyprint">Boolean</code> - whether the input matches the type</p>

<h5 id="example">example</h5>
<pre class="highlight javascript"><code><span class="nx">typeCheck</span><span class="p">(</span><span class="s1">'Number'</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span> <span class="c1">// true</span>
</code></pre>

<h3 id="parsetype-type">parseType(type)</h3>

<p><code class="prettyprint">parseType</code> parses string <code class="prettyprint">type</code> written in the <a href="#type-format">type format</a> into an object representing the parsed type.</p>

<h5 id="arguments">arguments</h5>

<ul>
<li>type - <code class="prettyprint">String</code> - the type written in the <a href="#type-format">type format</a> which to parse</li>
</ul>

<h5 id="returns">returns</h5>

<p><code class="prettyprint">Object</code> - an object in the parsed type format representing the parsed type</p>

<h5 id="example">example</h5>
<pre class="highlight javascript"><code><span class="nx">parseType</span><span class="p">(</span><span class="s1">'Number'</span><span class="p">);</span> <span class="c1">// [{type: 'Number'}]</span>
</code></pre>

<h3 id="parsedtypecheck-parsedtype-input-options">parsedTypeCheck(parsedType, input, options)</h3>

<p><code class="prettyprint">parsedTypeCheck</code> checks a JavaScript value <code class="prettyprint">input</code> against parsed <code class="prettyprint">type</code> in the parsed type format (and taking account the optional <code class="prettyprint">options</code>) and returns whether the <code class="prettyprint">input</code> matches the <code class="prettyprint">type</code>. Use this in conjunction with <code class="prettyprint">parseType</code> if you are going to use a type more than once.</p>

<h5 id="arguments">arguments</h5>

<ul>
<li>type - <code class="prettyprint">Object</code> - the type in the parsed type format which to check against</li>
<li>input - <code class="prettyprint">*</code> - any JavaScript value, which is to be checked against the type</li>
<li>options - <code class="prettyprint">Maybe Object</code> - an optional parameter specifying additional options, currently the only available option is specifying <a href="#custom-types">custom types</a></li>
</ul>

<h5 id="returns">returns</h5>

<p><code class="prettyprint">Boolean</code> - whether the input matches the type</p>

<h5 id="example">example</h5>
<pre class="highlight javascript"><code><span class="nx">parsedTypeCheck</span><span class="p">([{</span><span class="na">type</span><span class="p">:</span> <span class="s1">'Number'</span><span class="p">}],</span> <span class="mi">2</span><span class="p">);</span> <span class="c1">// true</span>
<span class="kd">var</span> <span class="nx">parsedType</span> <span class="o">=</span> <span class="nx">parseType</span><span class="p">(</span><span class="s1">'String'</span><span class="p">);</span>
<span class="nx">parsedTypeCheck</span><span class="p">(</span><span class="nx">parsedType</span><span class="p">,</span> <span class="s1">'str'</span><span class="p">);</span>     <span class="c1">// true</span>
</code></pre>

<p><a name="type-format" /></p>

<h2 id="type-format">Type Format</h2>

<h3 id="syntax">Syntax</h3>

<p>White space is ignored. The root node is a <strong>Types</strong>.</p>

<ul>
<li><strong>Identifier</strong> = <code class="prettyprint">[\$\w]+</code> - a group of any lower or upper case letters, numbers, underscores, or dollar signs - eg. <code class="prettyprint">String</code></li>
<li><strong>Type</strong> = an <code class="prettyprint">Identifier</code>, an <code class="prettyprint">Identifier</code> followed by a <code class="prettyprint">Structure</code>, just a <code class="prettyprint">Structure</code>, or a wildcard <code class="prettyprint">*</code> - eg. <code class="prettyprint">String</code>, <code class="prettyprint">Object{x: Number}</code>, <code class="prettyprint">{x: Number}</code>, <code class="prettyprint">Array{0: String, 1: Boolean, length: Number}</code>, <code class="prettyprint">*</code></li>
<li><strong>Types</strong> = optionally a comment (an <code class="prettyprint">Indentifier</code> followed by a <code class="prettyprint">::</code>), optionally the identifier <code class="prettyprint">Maybe</code>, one or more <code class="prettyprint">Type</code>, separated by <code class="prettyprint">|</code> - eg. <code class="prettyprint">Number</code>, <code class="prettyprint">String | Date</code>, <code class="prettyprint">Maybe Number</code>, <code class="prettyprint">Maybe Boolean | String</code></li>
<li><strong>Structure</strong> = <code class="prettyprint">Fields</code>, or a <code class="prettyprint">Tuple</code>, or an <code class="prettyprint">Array</code> - eg. <code class="prettyprint">{x: Number}</code>, <code class="prettyprint">(String, Number)</code>, <code class="prettyprint">[Date]</code></li>
<li><strong>Fields</strong> = a <code class="prettyprint">{</code>, followed one or more <code class="prettyprint">Field</code> separated by a comma <code class="prettyprint">,</code> (trailing comma <code class="prettyprint">,</code> is permitted), optionally an <code class="prettyprint">...</code> (always preceded by a comma <code class="prettyprint">,</code>), followed by a <code class="prettyprint">}</code> - eg. <code class="prettyprint">{x: Number, y: String}</code>, <code class="prettyprint">{k: Function, ...}</code></li>
<li><strong>Field</strong> = an <code class="prettyprint">Identifier</code>, followed by a colon <code class="prettyprint">:</code>, followed by <code class="prettyprint">Types</code> - eg. <code class="prettyprint">x: Date | String</code>, <code class="prettyprint">y: Boolean</code></li>
<li><strong>Tuple</strong> = a <code class="prettyprint">(</code>, followed by one or more <code class="prettyprint">Types</code> separated by a comma <code class="prettyprint">,</code> (trailing comma <code class="prettyprint">,</code> is permitted), followed by a <code class="prettyprint">)</code> - eg <code class="prettyprint">(Date)</code>, <code class="prettyprint">(Number, Date)</code></li>
<li><strong>Array</strong> = a <code class="prettyprint">[</code> followed by exactly one <code class="prettyprint">Types</code> followed by a <code class="prettyprint">]</code> - eg. <code class="prettyprint">[Boolean]</code>, <code class="prettyprint">[Boolean | Null]</code></li>
</ul>

<h3 id="guide">Guide</h3>

<p><code class="prettyprint">type-check</code> uses <code class="prettyprint">Object.toString</code> to find out the basic type of a value. Specifically,</p>
<pre class="highlight javascript"><code><span class="p">{}.</span><span class="nx">toString</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">VALUE</span><span class="p">).</span><span class="nx">slice</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="p">{}.</span><span class="nx">toString</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">true</span><span class="p">).</span><span class="nx">slice</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="c1">// 'Boolean'</span>
</code></pre>

<p>A basic type, eg. <code class="prettyprint">Number</code>, uses this check. This is much more versatile than using <code class="prettyprint">typeof</code> - for example, with <code class="prettyprint">document</code>, <code class="prettyprint">typeof</code> produces <code class="prettyprint">&#39;object&#39;</code> which isn&rsquo;t that useful, and our technique produces <code class="prettyprint">&#39;HTMLDocument&#39;</code>.</p>

<p>You may check for multiple types by separating types with a <code class="prettyprint">|</code>. The checker proceeds from left to right, and passes if the value is any of the types - eg. <code class="prettyprint">String | Boolean</code> first checks if the value is a string, and then if it is a boolean. If it is none of those, then it returns false.</p>

<p>Adding a <code class="prettyprint">Maybe</code> in front of a list of multiple types is the same as also checking for <code class="prettyprint">Null</code> and <code class="prettyprint">Undefined</code> - eg. <code class="prettyprint">Maybe String</code> is equivalent to <code class="prettyprint">Undefined | Null | String</code>.</p>

<p>You may add a comment to remind you of what the type is for by following an identifier with a <code class="prettyprint">::</code> before a type (or multiple types). The comment is simply thrown out.</p>

<p>The wildcard <code class="prettyprint">*</code> matches all types.</p>

<p>There are three types of structures for checking the contents of a value: &lsquo;fields&rsquo;, &#39;tuple&rsquo;, and &#39;array&rsquo;.</p>

<p>If used by itself, a &#39;fields&rsquo; structure will pass with any type of object as long as it is an instance of <code class="prettyprint">Object</code> and the properties pass - this allows for duck typing - eg. <code class="prettyprint">{x: Boolean}</code>.</p>

<p>To check if the properties pass, and the value is of a certain type, you can specify the type - eg. <code class="prettyprint">Error{message: String}</code>.</p>

<p>If you want to make a field optional, you can simply use <code class="prettyprint">Maybe</code> - eg. <code class="prettyprint">{x: Boolean, y: Maybe String}</code> will still pass if <code class="prettyprint">y</code> is undefined (or null).</p>

<p>If you don&rsquo;t care if the value has properties beyond what you have specified, you can use the &#39;etc&rsquo; operator <code class="prettyprint">...</code> - eg. <code class="prettyprint">{x: Boolean, ...}</code> will match an object with an <code class="prettyprint">x</code> property that is a boolean, and with zero or more other properties.</p>

<p>For an array, you must specify one or more types (separated by <code class="prettyprint">|</code>) - it will pass for something of any length as long as each element passes the types provided - eg. <code class="prettyprint">[Number]</code>, <code class="prettyprint">[Number | String]</code>.</p>

<p>A tuple checks for a fixed number of elements, each of a potentially different type. Each element is separated by a comma - eg. <code class="prettyprint">(String, Number)</code>.</p>

<p>An array and tuple structure check that the value is of type <code class="prettyprint">Array</code> by default, but if another type is specified, they will check for that instead - eg. <code class="prettyprint">Int32Array[Number]</code>. You can use the wildcard <code class="prettyprint">*</code> to search for any type at all.</p>

<p>Check out the <a href="https://github.com/zaboco/type-precedence">type precedence</a> library for type-check.</p>

<h2 id="options">Options</h2>

<p>Options is an object. It is an optional parameter to the <code class="prettyprint">typeCheck</code> and <code class="prettyprint">parsedTypeCheck</code> functions. The only current option is <code class="prettyprint">customTypes</code>.</p>

<p><a name="custom-types" /></p>

<h3 id="custom-types">Custom Types</h3>

<p><strong>Example:</strong></p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">customTypes</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">Even</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">typeOf</span><span class="p">:</span> <span class="s1">'Number'</span><span class="p">,</span>
      <span class="na">validate</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">};</span>
<span class="nx">typeCheck</span><span class="p">(</span><span class="s1">'Even'</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span> <span class="c1">// true</span>
<span class="nx">typeCheck</span><span class="p">(</span><span class="s1">'Even'</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span> <span class="c1">// false</span>
</code></pre>

<p><code class="prettyprint">customTypes</code> allows you to set up custom types for validation. The value of this is an object. The keys of the object are the types you will be matching. Each value of the object will be an object having a <code class="prettyprint">typeOf</code> property - a string, and <code class="prettyprint">validate</code> property - a function.</p>

<p>The <code class="prettyprint">typeOf</code> property is the type the value should be, and <code class="prettyprint">validate</code> is a function which should return true if the value is of that type. <code class="prettyprint">validate</code> receives one parameter, which is the value that we are checking.</p>

<h2 id="technical-about">Technical About</h2>

<p><code class="prettyprint">type-check</code> is written in <a href="http://livescript.net/">LiveScript</a> - a language that compiles to JavaScript. It also uses the <a href="http://preludels.com/">prelude.ls</a> library.</p>
