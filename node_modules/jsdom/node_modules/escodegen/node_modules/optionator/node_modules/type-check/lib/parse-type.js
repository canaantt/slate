(function(){function r(r){var t;if(t=r[0],null==t)throw new Error("Unexpected end of input.");return t}function t(t){var e;if(e=r(t),!p.test(e))throw new Error("Expected text, got '"+e+"' instead.");return t.shift()}function e(t,e){var n;if(n=r(t),n!==e)throw new Error("Expected '"+e+"', got '"+n+"' instead.");return t.shift()}function n(r,t){var e;return e=r[0],e===t?r.shift():null}function o(t){var n;if(e(t,"["),"]"===r(t))throw new Error("Must specify type of Array - eg. [Type], got [] instead.");return n=c(t),e(t,"]"),{structure:"array",of:n}}function u(t){var o;if(o=[],e(t,"("),")"===r(t))throw new Error("Tuple must be of at least length 1 - eg. (Type), got () instead.");for(;o.push(c(t)),n(t,","),")"!==r(t););return e(t,")"),{structure:"tuple",of:o}}function i(t){var o,u,i,a,s;for(o={},e(t,"{"),u=!1;;){if(n(t,"...")){u=!0;break}if(i=f(t),a=i[0],s=i[1],o[a]=s,n(t,","),"}"===r(t))break}return e(t,"}"),{structure:"fields",of:o,subset:u}}function f(r){var n,o;return n=t(r),e(r,":"),o=c(r),[n,o]}function a(r){switch(r[0]){case"[":return o(r);case"(":return u(r);case"{":return i(r)}}function s(n){var o,u,i,f;if(o=r(n),u="*"===o,u||p.test(o))return i=u?e(n,"*"):t(n),f=a(n),f?(f.type=i,f):{type:i};if(f=a(n),!f)throw new Error("Unexpected character: "+o);return f}function c(t){var e,o,u,i,f;if("::"===r(t))throw new Error("No comment before comment separator '::' found.");for(e=t[1],null!=e&&"::"===e&&(t.shift(),t.shift()),o=[],u={},"Maybe"===r(t)&&(t.shift(),o=[{type:"Undefined"},{type:"Null"}],u={Undefined:!0,Null:!0});i=s(t),f=i.type,u[f]||o.push(i),u[f]=!0,n(t,"|"););return o}function h(r,t){for(var e=-1,n=t.length>>>0;++e<n;)if(r===t[e])return!0;return!1}var p,l;p=/[\$\w]+/,l=RegExp("\\.\\.\\.|::|->|"+p.source+"|\\S","g"),module.exports=function(r){var t,e;if(!r.length)throw new Error("No type specified.");if(t=r.match(l)||[],h("->",t))throw new Error("Function types are not supported. To validate that something is a function, you may use 'Function'.");try{return c(t)}catch(n){throw e=n,new Error(e.message+" - Remaining tokens: "+JSON.stringify(t)+" - Initial input: '"+r+"'")}}}).call(this);