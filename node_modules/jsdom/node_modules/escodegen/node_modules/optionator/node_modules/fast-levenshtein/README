<h1 id="fast-levenshtein-levenshtein-algorithm-in-javascript">fast-levenshtein - Levenshtein algorithm in Javascript</h1>

<p><a href="http://travis-ci.org/hiddentao/fast-levenshtein"><img alt="Build Status" src="https://secure.travis-ci.org/hiddentao/fast-levenshtein.png" /></a></p>

<p>An efficient Javascript implementation of the <a href="http://en.wikipedia.org/wiki/Levenshtein_distance">Levenshtein algorithm</a> with asynchronous callback support.</p>

<h2 id="features">Features</h2>

<ul>
<li>Works in node.js and in the browser.</li>
<li>Better performance than other implementations by not needing to store the whole matrix (<a href="http://www.codeproject.com/Articles/13525/Fast-memory-efficient-Levenshtein-algorithm">more info</a>).</li>
<li>Provides synchronous and asynchronous versions of the algorithm.</li>
<li>Asynchronous version is almost as fast as the synchronous version for small strings and can also provide progress updates.</li>
<li>Comprehensive test suite and performance benchmark.</li>
<li>Small: &lt;1 KB minified and gzipped</li>
</ul>

<h2 id="installation">Installation</h2>

<h3 id="node-js">node.js</h3>

<p>Install using <a href="http://npmjs.org/">npm</a>:</p>
<pre class="highlight shell"><code><span class="gp">$ </span>npm install fast-levenshtein
</code></pre>

<h3 id="browser">Browser</h3>

<p>Using bower:</p>
<pre class="highlight shell"><code><span class="gp">$ </span>bower install fast-levenshtein
</code></pre>

<p>If you are not using any module loader system then the API will then be accessible via the <code class="prettyprint">window.Levenshtein</code> object.</p>

<h2 id="examples">Examples</h2>

<p><strong>Synchronous</strong></p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">levenshtein</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'fast-levenshtein'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">distance</span> <span class="o">=</span> <span class="nx">levenshtein</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'back'</span><span class="p">,</span> <span class="s1">'book'</span><span class="p">);</span>   <span class="c1">// 2</span>
<span class="kd">var</span> <span class="nx">distance</span> <span class="o">=</span> <span class="nx">levenshtein</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'我愛你'</span><span class="p">,</span> <span class="s1">'我叫你'</span><span class="p">);</span>   <span class="c1">// 1</span>
</code></pre>

<p><strong>Asynchronous</strong></p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">levenshtein</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'fast-levenshtein'</span><span class="p">);</span>

<span class="nx">levenshtein</span><span class="p">.</span><span class="nx">getAsync</span><span class="p">(</span><span class="s1">'back'</span><span class="p">,</span> <span class="s1">'book'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">distance</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// err is null unless an error was thrown</span>
  <span class="c1">// distance equals 2</span>
<span class="p">});</span>
</code></pre>

<p><strong>Asynchronous with progress updates</strong></p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">levenshtein</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'fast-levenshtein'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">hugeText1</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(...);</span>
<span class="kd">var</span> <span class="nx">hugeText2</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(...);</span>

<span class="nx">levenshtein</span><span class="p">.</span><span class="nx">getAsync</span><span class="p">(</span><span class="nx">hugeText1</span><span class="p">,</span> <span class="nx">hugeText2</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">distance</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// process the results as normal</span>
<span class="p">},</span> <span class="p">{</span>
  <span class="na">progress</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">percentComplete</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">percentComplete</span> <span class="o">+</span> <span class="s1">' % completed so far...'</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">);</span>
</code></pre>

<h2 id="building-and-testing">Building and Testing</h2>

<p>To build the code and run the tests:</p>
<pre class="highlight shell"><code><span class="gp">$ </span>npm install -g grunt-cli
<span class="gp">$ </span>npm install
<span class="gp">$ </span>npm run build
</code></pre>

<h2 id="performance">Performance</h2>

<p><em>Thanks to <a href="https://github.com/wooorm">Titus Wormer</a> for <a href="https://github.com/hiddentao/fast-levenshtein/issues/1">encouraging me</a> to do this.</em></p>

<p>Benchmarked against other node.js levenshtein distance modules (on Macbook Air 2012, Core i7, 8GB RAM):</p>
<pre class="highlight shell"><code>Running suite Implementation comparison <span class="o">[</span>benchmark/speed.js]...
<span class="gp">&gt;&gt; </span>levenshtein-edit-distance x 234 ops/sec ±3.02% <span class="o">(</span>73 runs sampled<span class="o">)</span>
<span class="gp">&gt;&gt; </span>levenshtein-component x 422 ops/sec ±4.38% <span class="o">(</span>83 runs sampled<span class="o">)</span>
<span class="gp">&gt;&gt; </span>levenshtein-deltas x 283 ops/sec ±3.83% <span class="o">(</span>78 runs sampled<span class="o">)</span>
<span class="gp">&gt;&gt; </span>natural x 255 ops/sec ±0.76% <span class="o">(</span>88 runs sampled<span class="o">)</span>
<span class="gp">&gt;&gt; </span>levenshtein x 180 ops/sec ±3.55% <span class="o">(</span>86 runs sampled<span class="o">)</span>
<span class="gp">&gt;&gt; </span>fast-levenshtein x 1,792 ops/sec ±2.72% <span class="o">(</span>95 runs sampled<span class="o">)</span>
Benchmark <span class="k">done</span>.
Fastest <span class="nb">test </span>is fast-levenshtein at 4.2x faster than levenshtein-component
</code></pre>

<p>You can run this benchmark yourself by doing:</p>
<pre class="highlight shell"><code><span class="gp">$ </span>npm install -g grunt-cli
<span class="gp">$ </span>npm install
<span class="gp">$ </span>npm run build
<span class="gp">$ </span>npm run benchmark
</code></pre>

<h2 id="contributing">Contributing</h2>

<p>If you wish to submit a pull request please update and/or create new tests for any changes you make and ensure the grunt build passes.</p>

<p>See <a href="https://github.com/hiddentao/fast-levenshtein/blob/master/CONTRIBUTING.md">CONTRIBUTING.md</a> for details.</p>

<h2 id="license">License</h2>

<p>MIT - see <a href="https://github.com/hiddentao/fast-levenshtein/blob/master/LICENSE.md">LICENSE.md</a></p>
