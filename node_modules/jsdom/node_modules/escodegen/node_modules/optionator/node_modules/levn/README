<h1 id="levn">levn <a href="https://travis-ci.org/gkz/levn"><img alt="Build Status" src="https://travis-ci.org/gkz/levn.png" /></a> <a name="levn" /></h1>

<p><strong>Light ECMAScript (JavaScript) Value Notation</strong>
Levn is a library which allows you to parse a string into a JavaScript value based on an expected type. It is meant for short amounts of human entered data (eg. config files, command line arguments).</p>

<p>Levn aims to concisely describe JavaScript values in text, and allow for the extraction and validation of those values. Levn uses <a href="https://github.com/gkz/type-check">type-check</a> for its type format, and to validate the results. MIT license. Version 0.3.0.</p>

<p><strong>How is this different than JSON?</strong> levn is meant to be written by humans only, is (due to the previous point) much more concise, can be validated against supplied types, has regex and date literals, and can easily be extended with custom types. On the other hand, it is probably slower and thus less efficient at transporting large amounts of data, which is fine since this is not its purpose.</p>

<p>npm install levn</p>

<p>For updates on levn, <a href="https://twitter.com/gkzahariev">follow me on twitter</a>.</p>

<h2 id="quick-examples">Quick Examples</h2>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">parse</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'levn'</span><span class="p">).</span><span class="nx">parse</span><span class="p">;</span>
<span class="nx">parse</span><span class="p">(</span><span class="s1">'Number'</span><span class="p">,</span> <span class="s1">'2'</span><span class="p">);</span>      <span class="c1">// 2</span>
<span class="nx">parse</span><span class="p">(</span><span class="s1">'String'</span><span class="p">,</span> <span class="s1">'2'</span><span class="p">);</span>      <span class="c1">// '2'</span>
<span class="nx">parse</span><span class="p">(</span><span class="s1">'String'</span><span class="p">,</span> <span class="s1">'levn'</span><span class="p">);</span>   <span class="c1">// 'levn'</span>
<span class="nx">parse</span><span class="p">(</span><span class="s1">'String'</span><span class="p">,</span> <span class="s1">'a b'</span><span class="p">);</span>    <span class="c1">// 'a b'</span>
<span class="nx">parse</span><span class="p">(</span><span class="s1">'Boolean'</span><span class="p">,</span> <span class="s1">'true'</span><span class="p">);</span>  <span class="c1">// true</span>

<span class="nx">parse</span><span class="p">(</span><span class="s1">'Date'</span><span class="p">,</span> <span class="s1">'#2011-11-11#'</span><span class="p">);</span> <span class="c1">// (Date object)</span>
<span class="nx">parse</span><span class="p">(</span><span class="s1">'Date'</span><span class="p">,</span> <span class="s1">'2011-11-11'</span><span class="p">);</span>   <span class="c1">// (Date object)</span>
<span class="nx">parse</span><span class="p">(</span><span class="s1">'RegExp'</span><span class="p">,</span> <span class="s1">'/[a-z]/gi'</span><span class="p">);</span>  <span class="c1">// /[a-z]/gi</span>
<span class="nx">parse</span><span class="p">(</span><span class="s1">'RegExp'</span><span class="p">,</span> <span class="s1">'re'</span><span class="p">);</span>         <span class="c1">// /re/</span>
<span class="nx">parse</span><span class="p">(</span><span class="s1">'Int'</span><span class="p">,</span> <span class="s1">'2'</span><span class="p">);</span>             <span class="c1">// 2</span>

<span class="nx">parse</span><span class="p">(</span><span class="s1">'Number | String'</span><span class="p">,</span> <span class="s1">'str'</span><span class="p">);</span> <span class="c1">// 'str'</span>
<span class="nx">parse</span><span class="p">(</span><span class="s1">'Number | String'</span><span class="p">,</span> <span class="s1">'2'</span><span class="p">);</span>   <span class="c1">// 2</span>

<span class="nx">parse</span><span class="p">(</span><span class="s1">'[Number]'</span><span class="p">,</span> <span class="s1">'[1,2,3]'</span><span class="p">);</span>                      <span class="c1">// [1,2,3]</span>
<span class="nx">parse</span><span class="p">(</span><span class="s1">'(String, Boolean)'</span><span class="p">,</span> <span class="s1">'(hi, false)'</span><span class="p">);</span>         <span class="c1">// ['hi', false]</span>
<span class="nx">parse</span><span class="p">(</span><span class="s1">'{a: String, b: Number}'</span><span class="p">,</span> <span class="s1">'{a: str, b: 2}'</span><span class="p">);</span> <span class="c1">// {a: 'str', b: 2}</span>

<span class="c1">// at the top level, you can ommit surrounding delimiters</span>
<span class="nx">parse</span><span class="p">(</span><span class="s1">'[Number]'</span><span class="p">,</span> <span class="s1">'1,2,3'</span><span class="p">);</span>                      <span class="c1">// [1,2,3]</span>
<span class="nx">parse</span><span class="p">(</span><span class="s1">'(String, Boolean)'</span><span class="p">,</span> <span class="s1">'hi, false'</span><span class="p">);</span>         <span class="c1">// ['hi', false]</span>
<span class="nx">parse</span><span class="p">(</span><span class="s1">'{a: String, b: Number}'</span><span class="p">,</span> <span class="s1">'a: str, b: 2'</span><span class="p">);</span> <span class="c1">// {a: 'str', b: 2}</span>

<span class="c1">// wildcard - auto choose type</span>
<span class="nx">parse</span><span class="p">(</span><span class="s1">'*'</span><span class="p">,</span> <span class="s1">'[hi,(null,[42]),{k: true}]'</span><span class="p">);</span> <span class="c1">// ['hi', [null, [42]], {k: true}]</span>
</code></pre>

<h2 id="usage">Usage</h2>

<p><code class="prettyprint">require(&#39;levn&#39;);</code> returns an object that exposes three properties. <code class="prettyprint">VERSION</code> is the current version of the library as a string. <code class="prettyprint">parse</code> and <code class="prettyprint">parsedTypeParse</code> are functions.</p>
<pre class="highlight javascript"><code><span class="c1">// parse(type, input, options);</span>
<span class="nx">parse</span><span class="p">(</span><span class="s1">'[Number]'</span><span class="p">,</span> <span class="s1">'1,2,3'</span><span class="p">);</span> <span class="c1">// [1, 2, 3]</span>

<span class="c1">// parsedTypeParse(parsedType, input, options);</span>
<span class="kd">var</span> <span class="nx">parsedType</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'type-check'</span><span class="p">).</span><span class="nx">parseType</span><span class="p">(</span><span class="s1">'[Number]'</span><span class="p">);</span>
<span class="nx">parsedTypeParse</span><span class="p">(</span><span class="nx">parsedType</span><span class="p">,</span> <span class="s1">'1,2,3'</span><span class="p">);</span> <span class="c1">// [1, 2, 3]</span>
</code></pre>

<h3 id="parse-type-input-options">parse(type, input, options)</h3>

<p><code class="prettyprint">parse</code> casts the string <code class="prettyprint">input</code> into a JavaScript value according to the specified <code class="prettyprint">type</code> in the <a href="https://github.com/gkz/type-check#type-format">type format</a> (and taking account the optional <code class="prettyprint">options</code>) and returns the resulting JavaScript value.</p>

<h5 id="arguments">arguments</h5>

<ul>
<li>type - <code class="prettyprint">String</code> - the type written in the <a href="https://github.com/gkz/type-check#type-format">type format</a> which to check against</li>
<li>input - <code class="prettyprint">String</code> - the value written in the <a href="#levn-format">levn format</a></li>
<li>options - <code class="prettyprint">Maybe Object</code> - an optional parameter specifying additional <a href="#options">options</a></li>
</ul>

<h5 id="returns">returns</h5>

<p><code class="prettyprint">*</code> - the resulting JavaScript value</p>

<h5 id="example">example</h5>
<pre class="highlight javascript"><code><span class="nx">parse</span><span class="p">(</span><span class="s1">'[Number]'</span><span class="p">,</span> <span class="s1">'1,2,3'</span><span class="p">);</span> <span class="c1">// [1, 2, 3]</span>
</code></pre>

<h3 id="parsedtypeparse-parsedtype-input-options">parsedTypeParse(parsedType, input, options)</h3>

<p><code class="prettyprint">parsedTypeParse</code> casts the string <code class="prettyprint">input</code> into a JavaScript value according to the specified <code class="prettyprint">type</code> which has already been parsed (and taking account the optional <code class="prettyprint">options</code>) and returns the resulting JavaScript value. You can parse a type using the <a href="https://github.com/gkz/type-check">type-check</a> library&rsquo;s <code class="prettyprint">parseType</code> function.</p>

<h5 id="arguments">arguments</h5>

<ul>
<li>type - <code class="prettyprint">Object</code> - the type in the parsed type format which to check against</li>
<li>input - <code class="prettyprint">String</code> - the value written in the <a href="#levn-format">levn format</a></li>
<li>options - <code class="prettyprint">Maybe Object</code> - an optional parameter specifying additional <a href="#options">options</a></li>
</ul>

<h5 id="returns">returns</h5>

<p><code class="prettyprint">*</code> - the resulting JavaScript value</p>

<h5 id="example">example</h5>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">parsedType</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'type-check'</span><span class="p">).</span><span class="nx">parseType</span><span class="p">(</span><span class="s1">'[Number]'</span><span class="p">);</span>
<span class="nx">parsedTypeParse</span><span class="p">(</span><span class="nx">parsedType</span><span class="p">,</span> <span class="s1">'1,2,3'</span><span class="p">);</span> <span class="c1">// [1, 2, 3]</span>
</code></pre>

<h2 id="levn-format">Levn Format</h2>

<p>Levn can use the type information you provide to choose the appropriate value to produce from the input. For the same input, it will choose a different output value depending on the type provided. For example, <code class="prettyprint">parse(&#39;Number&#39;, &#39;2&#39;)</code> will produce the number <code class="prettyprint">2</code>, but <code class="prettyprint">parse(&#39;String&#39;, &#39;2&#39;)</code> will produce the string <code class="prettyprint">&quot;2&quot;</code>.</p>

<p>If you do not provide type information, and simply use <code class="prettyprint">*</code>, levn will parse the input according the unambiguous &ldquo;explicit&rdquo; mode, which we will now detail - you can also set the <code class="prettyprint">explicit</code> option to true manually in the <a href="#options">options</a>.</p>

<ul>
<li><code class="prettyprint">&quot;string&quot;</code>, <code class="prettyprint">&#39;string&#39;</code> are parsed as a String, eg. <code class="prettyprint">&quot;a msg&quot;</code> is <code class="prettyprint">&quot;a msg&quot;</code></li>
<li><code class="prettyprint">#date#</code> is parsed as a Date, eg. <code class="prettyprint">#2011-11-11#</code> is <code class="prettyprint">new Date(&#39;2011-11-11&#39;)</code></li>
<li><code class="prettyprint">/regexp/flags</code> is parsed as a RegExp, eg. <code class="prettyprint">/re/gi</code> is <code class="prettyprint">/re/gi</code></li>
<li><code class="prettyprint">undefined</code>, <code class="prettyprint">null</code>, <code class="prettyprint">NaN</code>, <code class="prettyprint">true</code>, and <code class="prettyprint">false</code> are all their JavaScript equivalents</li>
<li><code class="prettyprint">[element1, element2, etc]</code> is an Array, and the casting procedure is recursively applied to each element. Eg. <code class="prettyprint">[1,2,3]</code> is <code class="prettyprint">[1,2,3]</code>.</li>
<li><code class="prettyprint">(element1, element2, etc)</code> is an tuple, and the casting procedure is recursively applied to each element. Eg. <code class="prettyprint">(1, a)</code> is <code class="prettyprint">(1, a)</code> (is <code class="prettyprint">[1, &#39;a&#39;]</code>).</li>
<li><code class="prettyprint">{key1: val1, key2: val2, ...}</code> is an Object, and the casting procedure is recursively applied to each property. Eg. <code class="prettyprint">{a: 1, b: 2}</code> is <code class="prettyprint">{a: 1, b: 2}</code>.</li>
<li>Any test which does not fall under the above, and which does not contain special characters (<code class="prettyprint">[</code><code class="prettyprint">]</code><code class="prettyprint">(</code><code class="prettyprint">)</code><code class="prettyprint">{</code><code class="prettyprint">}</code><code class="prettyprint">:</code><code class="prettyprint">,</code>) is a string, eg. <code class="prettyprint">$12- blah</code> is <code class="prettyprint">&quot;$12- blah&quot;</code>.</li>
</ul>

<p>If you do provide type information, you can make your input more concise as the program already has some information about what it expects. Please see the <a href="https://github.com/gkz/type-check#type-format">type format</a> section of <a href="https://github.com/gkz/type-check">type-check</a> for more information about how to specify types. There are some rules about what levn can do with the information:</p>

<ul>
<li>If a String is expected, and only a String, all characters of the input (including any special ones) will become part of the output. Eg. <code class="prettyprint">[({})]</code> is <code class="prettyprint">&quot;[({})]&quot;</code>, and <code class="prettyprint">&quot;hi&quot;</code> is <code class="prettyprint">&#39;&quot;hi&quot;&#39;</code>.</li>
<li>If a Date is expected, the surrounding <code class="prettyprint">#</code> can be omitted from date literals. Eg. <code class="prettyprint">2011-11-11</code> is <code class="prettyprint">new Date(&#39;2011-11-11&#39;)</code>.</li>
<li>If a RegExp is expected, no flags need to be specified, and the regex is not using any of the special characters,the opening and closing <code class="prettyprint">/</code> can be omitted - this will have the affect of setting the source of the regex to the input. Eg. <code class="prettyprint">regex</code> is <code class="prettyprint">/regex/</code>.</li>
<li>If an Array is expected, and it is the root node (at the top level), the opening <code class="prettyprint">[</code> and closing <code class="prettyprint">]</code> can be omitted. Eg. <code class="prettyprint">1,2,3</code> is <code class="prettyprint">[1,2,3]</code>.</li>
<li>If a tuple is expected, and it is the root node (at the top level), the opening <code class="prettyprint">(</code> and closing <code class="prettyprint">)</code> can be omitted. Eg. <code class="prettyprint">1, a</code> is <code class="prettyprint">(1, a)</code> (is <code class="prettyprint">[1, &#39;a&#39;]</code>).</li>
<li>If an Object is expected, and it is the root node (at the top level), the opening <code class="prettyprint">{</code> and closing <code class="prettyprint">}</code> can be omitted. Eg <code class="prettyprint">a: 1, b: 2</code> is <code class="prettyprint">{a: 1, b: 2}</code>.</li>
</ul>

<p>If you list multiple types (eg. <code class="prettyprint">Number | String</code>), it will first attempt to cast to the first type and then validate - if the validation fails it will move on to the next type and so forth, left to right. You must be careful as some types will succeed with any input, such as String. Thus put String at the end of your list. In non-explicit mode, Date and RegExp will succeed with a large variety of input - also be careful with these and list them near the end if not last in your list.</p>

<p>Whitespace between special characters and elements is inconsequential.</p>

<h2 id="options">Options</h2>

<p>Options is an object. It is an optional parameter to the <code class="prettyprint">parse</code> and <code class="prettyprint">parsedTypeParse</code> functions.</p>

<h3 id="explicit">Explicit</h3>

<p>A <code class="prettyprint">Boolean</code>. By default it is <code class="prettyprint">false</code>.</p>

<p><strong>Example:</strong></p>
<pre class="highlight javascript"><code><span class="nx">parse</span><span class="p">(</span><span class="s1">'RegExp'</span><span class="p">,</span> <span class="s1">'re'</span><span class="p">,</span> <span class="p">{</span><span class="na">explicit</span><span class="p">:</span> <span class="kc">false</span><span class="p">});</span>          <span class="c1">// /re/</span>
<span class="nx">parse</span><span class="p">(</span><span class="s1">'RegExp'</span><span class="p">,</span> <span class="s1">'re'</span><span class="p">,</span> <span class="p">{</span><span class="na">explicit</span><span class="p">:</span> <span class="kc">true</span><span class="p">});</span>           <span class="c1">// Error: ... does not type check...</span>
<span class="nx">parse</span><span class="p">(</span><span class="s1">'RegExp | String'</span><span class="p">,</span> <span class="s1">'re'</span><span class="p">,</span> <span class="p">{</span><span class="na">explicit</span><span class="p">:</span> <span class="kc">true</span><span class="p">});</span>  <span class="c1">// 're'</span>
</code></pre>

<p><code class="prettyprint">explicit</code> sets whether to be in explicit mode or not. Using <code class="prettyprint">*</code> automatically activates explicit mode. For more information, read the <a href="#levn-format">levn format</a> section.</p>

<h3 id="customtypes">customTypes</h3>

<p>An <code class="prettyprint">Object</code>. Empty <code class="prettyprint">{}</code> by default.</p>

<p><strong>Example:</strong></p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">customTypes</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">Even</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">typeOf</span><span class="p">:</span> <span class="s1">'Number'</span><span class="p">,</span>
      <span class="na">validate</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span><span class="p">;</span>
      <span class="p">},</span>
      <span class="na">cast</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">{</span><span class="na">type</span><span class="p">:</span> <span class="s1">'Just'</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">x</span><span class="p">)};</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nx">parse</span><span class="p">(</span><span class="s1">'Even'</span><span class="p">,</span> <span class="s1">'2'</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span> <span class="c1">// 2</span>
<span class="nx">parse</span><span class="p">(</span><span class="s1">'Even'</span><span class="p">,</span> <span class="s1">'3'</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span> <span class="c1">// Error: Value: "3" does not type check...</span>
</code></pre>

<p><strong>Another Example:</strong>
<code class="prettyprint">js
function Person(name, age){
  this.name = name;
  this.age = age;
}
var options = {
  customTypes: {
    Person: {
      typeOf: &#39;Object&#39;,
      validate: function (x) {
        x instanceof Person;
      },
      cast: function (value, options, typesCast) {
        var name, age;
        if ({}.toString.call(value).slice(8, -1) !== &#39;Object&#39;) {
          return {type: &#39;Nothing&#39;};
        }
        name = typesCast(value.name, [{type: &#39;String&#39;}], options);
        age = typesCast(value.age, [{type: &#39;Numger&#39;}], options);
        return {type: &#39;Just&#39;, value: new Person(name, age)};
    }
  }
}
parse(&#39;Person&#39;, &#39;{name: Laura, age: 25}&#39;, options); // Person {name: &#39;Laura&#39;, age: 25}
</code></p>

<p><code class="prettyprint">customTypes</code> is an object whose keys are the name of the types, and whose values are an object with three properties, <code class="prettyprint">typeOf</code>, <code class="prettyprint">validate</code>, and <code class="prettyprint">cast</code>. For more information about <code class="prettyprint">typeOf</code> and <code class="prettyprint">validate</code>, please see the <a href="https://github.com/gkz/type-check#custom-types">custom types</a> section of type-check.</p>

<p><code class="prettyprint">cast</code> is a function which receives three arguments, the value under question, options, and the typesCast function. In <code class="prettyprint">cast</code>, attempt to cast the value into the specified type. If you are successful, return an object in the format <code class="prettyprint">{type: &#39;Just&#39;, value: CAST-VALUE}</code>, if you know it won&rsquo;t work, return <code class="prettyprint">{type: &#39;Nothing&#39;}</code>.  You can use the <code class="prettyprint">typesCast</code> function to cast any child values. Remember to pass <code class="prettyprint">options</code> to it. In your function you can also check for <code class="prettyprint">options.explicit</code> and act accordingly.</p>

<h2 id="technical-about">Technical About</h2>

<p><code class="prettyprint">levn</code> is written in <a href="http://livescript.net/">LiveScript</a> - a language that compiles to JavaScript. It uses <a href="https://github.com/gkz/type-check">type-check</a> to both parse types and validate values. It also uses the <a href="http://preludels.com/">prelude.ls</a> library.</p>
