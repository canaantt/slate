<h1 id="sax-js">sax js</h1>

<p>A sax-style parser for XML and HTML.</p>

<p>Designed with <a href="http://nodejs.org/">node</a> in mind, but should work fine in
the browser or other CommonJS implementations.</p>

<h2 id="what-this-is">What This Is</h2>

<ul>
<li>A very simple tool to parse through an XML string.</li>
<li>A stepping stone to a streaming HTML parser.</li>
<li>A handy way to deal with RSS and other mostly-ok-but-kinda-broken XML
docs.</li>
</ul>

<h2 id="what-this-is-probably-not">What This Is (probably) Not</h2>

<ul>
<li>An HTML Parser - That&rsquo;s a fine goal, but this isn&rsquo;t it.  It&rsquo;s just
XML.</li>
<li>A DOM Builder - You can use it to build an object model out of XML,
but it doesn&rsquo;t do that out of the box.</li>
<li>XSLT - No DOM = no querying.</li>
<li>100% Compliant with (some other SAX implementation) - Most SAX
implementations are in Java and do a lot more than this does.</li>
<li>An XML Validator - It does a little validation when in strict mode, but
not much.</li>
<li>A Schema-Aware XSD Thing - Schemas are an exercise in fetishistic
masochism.</li>
<li>A DTD-aware Thing - Fetching DTDs is a much bigger job.</li>
</ul>

<h2 id="regarding-lt-doctypes-and-lt-entitys">Regarding <code class="prettyprint">&lt;!DOCTYPE</code>s and <code class="prettyprint">&lt;!ENTITY</code>s</h2>

<p>The parser will handle the basic XML entities in text nodes and attribute
values: <code class="prettyprint">&amp;amp; &amp;lt; &amp;gt; &amp;apos; &amp;quot;</code>. It&rsquo;s possible to define additional
entities in XML by putting them in the DTD. This parser doesn&rsquo;t do anything
with that. If you want to listen to the <code class="prettyprint">ondoctype</code> event, and then fetch
the doctypes, and read the entities and add them to <code class="prettyprint">parser.ENTITIES</code>, then
be my guest.</p>

<p>Unknown entities will fail in strict mode, and in loose mode, will pass
through unmolested.</p>

<h2 id="usage">Usage</h2>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">sax</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"./lib/sax"</span><span class="p">),</span>
  <span class="nx">strict</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// set to false for html-mode</span>
  <span class="nx">parser</span> <span class="o">=</span> <span class="nx">sax</span><span class="p">.</span><span class="nx">parser</span><span class="p">(</span><span class="nx">strict</span><span class="p">);</span>

<span class="nx">parser</span><span class="p">.</span><span class="nx">onerror</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// an error happened.</span>
<span class="p">};</span>
<span class="nx">parser</span><span class="p">.</span><span class="nx">ontext</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// got some text.  t is the string of text.</span>
<span class="p">};</span>
<span class="nx">parser</span><span class="p">.</span><span class="nx">onopentag</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// opened a tag.  node has "name" and "attributes"</span>
<span class="p">};</span>
<span class="nx">parser</span><span class="p">.</span><span class="nx">onattribute</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">attr</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// an attribute.  attr has "name" and "value"</span>
<span class="p">};</span>
<span class="nx">parser</span><span class="p">.</span><span class="nx">onend</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="c1">// parser stream is done, and ready to have more stuff written to it.</span>
<span class="p">};</span>

<span class="nx">parser</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">'&lt;xml&gt;Hello, &lt;who name="world"&gt;world&lt;/who&gt;!&lt;/xml&gt;'</span><span class="p">).</span><span class="nx">close</span><span class="p">();</span>

<span class="c1">// stream usage</span>
<span class="c1">// takes the same options as the parser</span>
<span class="kd">var</span> <span class="nx">saxStream</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"sax"</span><span class="p">).</span><span class="nx">createStream</span><span class="p">(</span><span class="nx">strict</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span>
<span class="nx">saxStream</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">"error"</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// unhandled errors will throw, since this is a proper node</span>
  <span class="c1">// event emitter.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">"error!"</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span>
  <span class="c1">// clear the error</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">_parser</span><span class="p">.</span><span class="nx">error</span> <span class="o">=</span> <span class="kc">null</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">_parser</span><span class="p">.</span><span class="nx">resume</span><span class="p">()</span>
<span class="p">})</span>
<span class="nx">saxStream</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">"opentag"</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// same object as above</span>
<span class="p">})</span>
<span class="c1">// pipe is supported, and it's readable/writable</span>
<span class="c1">// same chunks coming in also go out.</span>
<span class="nx">fs</span><span class="p">.</span><span class="nx">createReadStream</span><span class="p">(</span><span class="s2">"file.xml"</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">saxStream</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">createWriteStream</span><span class="p">(</span><span class="s2">"file-copy.xml"</span><span class="p">))</span>
</code></pre>

<h2 id="arguments">Arguments</h2>

<p>Pass the following arguments to the parser function.  All are optional.</p>

<p><code class="prettyprint">strict</code> - Boolean. Whether or not to be a jerk. Default: <code class="prettyprint">false</code>.</p>

<p><code class="prettyprint">opt</code> - Object bag of settings regarding string formatting.  All default to <code class="prettyprint">false</code>.</p>

<p>Settings supported:</p>

<ul>
<li><code class="prettyprint">trim</code> - Boolean. Whether or not to trim text and comment nodes.</li>
<li><code class="prettyprint">normalize</code> - Boolean. If true, then turn any whitespace into a single
space.</li>
<li><code class="prettyprint">lowercase</code> - Boolean. If true, then lowercase tag names and attribute names
in loose mode, rather than uppercasing them.</li>
<li><code class="prettyprint">xmlns</code> - Boolean. If true, then namespaces are supported.</li>
<li><code class="prettyprint">position</code> - Boolean. If false, then don&rsquo;t track line/col/position.</li>
<li><code class="prettyprint">strictEntities</code> - Boolean. If true, only parse <a href="http://www.w3.org/TR/REC-xml/#sec-predefined-ent">predefined XML
entities</a>
(<code class="prettyprint">&amp;amp;</code>, <code class="prettyprint">&amp;apos;</code>, <code class="prettyprint">&amp;gt;</code>, <code class="prettyprint">&amp;lt;</code>, and <code class="prettyprint">&amp;quot;</code>)</li>
</ul>

<h2 id="methods">Methods</h2>

<p><code class="prettyprint">write</code> - Write bytes onto the stream. You don&rsquo;t have to do this all at
once. You can keep writing as much as you want.</p>

<p><code class="prettyprint">close</code> - Close the stream. Once closed, no more data may be written until
it is done processing the buffer, which is signaled by the <code class="prettyprint">end</code> event.</p>

<p><code class="prettyprint">resume</code> - To gracefully handle errors, assign a listener to the <code class="prettyprint">error</code>
event. Then, when the error is taken care of, you can call <code class="prettyprint">resume</code> to
continue parsing. Otherwise, the parser will not continue while in an error
state.</p>

<h2 id="members">Members</h2>

<p>At all times, the parser object will have the following members:</p>

<p><code class="prettyprint">line</code>, <code class="prettyprint">column</code>, <code class="prettyprint">position</code> - Indications of the position in the XML
document where the parser currently is looking.</p>

<p><code class="prettyprint">startTagPosition</code> - Indicates the position where the current tag starts.</p>

<p><code class="prettyprint">closed</code> - Boolean indicating whether or not the parser can be written to.
If it&rsquo;s <code class="prettyprint">true</code>, then wait for the <code class="prettyprint">ready</code> event to write again.</p>

<p><code class="prettyprint">strict</code> - Boolean indicating whether or not the parser is a jerk.</p>

<p><code class="prettyprint">opt</code> - Any options passed into the constructor.</p>

<p><code class="prettyprint">tag</code> - The current tag being dealt with.</p>

<p>And a bunch of other stuff that you probably shouldn&rsquo;t touch.</p>

<h2 id="events">Events</h2>

<p>All events emit with a single argument. To listen to an event, assign a
function to <code class="prettyprint">on&lt;eventname&gt;</code>. Functions get executed in the this-context of
the parser object. The list of supported events are also in the exported
<code class="prettyprint">EVENTS</code> array.</p>

<p>When using the stream interface, assign handlers using the EventEmitter
<code class="prettyprint">on</code> function in the normal fashion.</p>

<p><code class="prettyprint">error</code> - Indication that something bad happened. The error will be hanging
out on <code class="prettyprint">parser.error</code>, and must be deleted before parsing can continue. By
listening to this event, you can keep an eye on that kind of stuff. Note:
this happens <em>much</em> more in strict mode. Argument: instance of <code class="prettyprint">Error</code>.</p>

<p><code class="prettyprint">text</code> - Text node. Argument: string of text.</p>

<p><code class="prettyprint">doctype</code> - The <code class="prettyprint">&lt;!DOCTYPE</code> declaration. Argument: doctype string.</p>

<p><code class="prettyprint">processinginstruction</code> - Stuff like <code class="prettyprint">&lt;?xml foo=&quot;blerg&quot; ?&gt;</code>. Argument:
object with <code class="prettyprint">name</code> and <code class="prettyprint">body</code> members. Attributes are not parsed, as
processing instructions have implementation dependent semantics.</p>

<p><code class="prettyprint">sgmldeclaration</code> - Random SGML declarations. Stuff like <code class="prettyprint">&lt;!ENTITY p&gt;</code>
would trigger this kind of event. This is a weird thing to support, so it
might go away at some point. SAX isn&rsquo;t intended to be used to parse SGML,
after all.</p>

<p><code class="prettyprint">opentagstart</code> - Emitted immediately when the tag name is available,
but before any attributes are encountered.  Argument: object with a
<code class="prettyprint">name</code> field and an empty <code class="prettyprint">attributes</code> set.  Note that this is the
same object that will later be emitted in the <code class="prettyprint">opentag</code> event.</p>

<p><code class="prettyprint">opentag</code> - An opening tag. Argument: object with <code class="prettyprint">name</code> and <code class="prettyprint">attributes</code>.
In non-strict mode, tag names are uppercased, unless the <code class="prettyprint">lowercase</code>
option is set.  If the <code class="prettyprint">xmlns</code> option is set, then it will contain
namespace binding information on the <code class="prettyprint">ns</code> member, and will have a
<code class="prettyprint">local</code>, <code class="prettyprint">prefix</code>, and <code class="prettyprint">uri</code> member.</p>

<p><code class="prettyprint">closetag</code> - A closing tag. In loose mode, tags are auto-closed if their
parent closes. In strict mode, well-formedness is enforced. Note that
self-closing tags will have <code class="prettyprint">closeTag</code> emitted immediately after <code class="prettyprint">openTag</code>.
Argument: tag name.</p>

<p><code class="prettyprint">attribute</code> - An attribute node.  Argument: object with <code class="prettyprint">name</code> and <code class="prettyprint">value</code>.
In non-strict mode, attribute names are uppercased, unless the <code class="prettyprint">lowercase</code>
option is set.  If the <code class="prettyprint">xmlns</code> option is set, it will also contains namespace
information.</p>

<p><code class="prettyprint">comment</code> - A comment node.  Argument: the string of the comment.</p>

<p><code class="prettyprint">opencdata</code> - The opening tag of a <code class="prettyprint">&lt;![CDATA[</code> block.</p>

<p><code class="prettyprint">cdata</code> - The text of a <code class="prettyprint">&lt;![CDATA[</code> block. Since <code class="prettyprint">&lt;![CDATA[</code> blocks can get
quite large, this event may fire multiple times for a single block, if it
is broken up into multiple <code class="prettyprint">write()</code>s. Argument: the string of random
character data.</p>

<p><code class="prettyprint">closecdata</code> - The closing tag (<code class="prettyprint">]]&gt;</code>) of a <code class="prettyprint">&lt;![CDATA[</code> block.</p>

<p><code class="prettyprint">opennamespace</code> - If the <code class="prettyprint">xmlns</code> option is set, then this event will
signal the start of a new namespace binding.</p>

<p><code class="prettyprint">closenamespace</code> - If the <code class="prettyprint">xmlns</code> option is set, then this event will
signal the end of a namespace binding.</p>

<p><code class="prettyprint">end</code> - Indication that the closed stream has ended.</p>

<p><code class="prettyprint">ready</code> - Indication that the stream has reset, and is ready to be written
to.</p>

<p><code class="prettyprint">noscript</code> - In non-strict mode, <code class="prettyprint">&lt;script&gt;</code> tags trigger a <code class="prettyprint">&quot;script&quot;</code>
event, and their contents are not checked for special xml characters.
If you pass <code class="prettyprint">noscript: true</code>, then this behavior is suppressed.</p>

<h2 id="reporting-problems">Reporting Problems</h2>

<p>It&rsquo;s best to write a failing test if you find an issue.  I will always
accept pull requests with failing tests if they demonstrate intended
behavior, but it is very hard to figure out what issue you&rsquo;re describing
without a test.  Writing a test is also the best way for you yourself
to figure out if you really understand the issue you think you have with
sax-js.</p>
