<h1 id="jsdom">jsdom</h1>

<p>A JavaScript implementation of the WHATWG DOM and HTML standards, for use with <a href="https://nodejs.org/">Node.js</a>.</p>

<h2 id="install">Install</h2>
<pre class="highlight shell"><code><span class="gp">$ </span>npm install jsdom
</code></pre>

<p>Note that as of our 7.0.0 release, jsdom requires Node.js 4 or newer (<a href="https://github.com/tmpvar/jsdom/blob/master/Changelog.md#700">why?</a>). In the meantime you are still welcome to install a release in <a href="https://github.com/tmpvar/jsdom/tree/3.x">the 3.x series</a> if you use legacy Node.js versions like 0.10 or 0.12. There are also various releases between 3.x and 7.0.0 that work with various io.js versions.</p>

<h2 id="human-contact">Human contact</h2>

<ul>
<li><a href="http://groups.google.com/group/jsdom">Mailing list</a></li>
<li>IRC channel: <a href="irc://irc.freenode.net/jsdom">#jsdom on freenode</a></li>
</ul>

<h2 id="easymode-jsdom-env">Easymode: <code class="prettyprint">jsdom.env</code></h2>

<p><code class="prettyprint">jsdom.env</code> is an API that allows you to throw a bunch of stuff at it, and it will generally do the right thing.</p>

<p>You can use it with a URL</p>
<pre class="highlight javascript"><code><span class="c1">// Count all of the links from the io.js build page</span>
<span class="kd">var</span> <span class="nx">jsdom</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"jsdom"</span><span class="p">);</span>

<span class="nx">jsdom</span><span class="p">.</span><span class="nx">env</span><span class="p">(</span>
  <span class="s2">"https://iojs.org/dist/"</span><span class="p">,</span>
  <span class="p">[</span><span class="s2">"http://code.jquery.com/jquery.js"</span><span class="p">],</span>
  <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nb">window</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"there have been"</span><span class="p">,</span> <span class="nb">window</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="s2">"a"</span><span class="p">).</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">4</span><span class="p">,</span> <span class="s2">"io.js releases!"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">);</span>
</code></pre>

<p>or with raw HTML</p>
<pre class="highlight javascript"><code><span class="c1">// Run some jQuery on a html fragment</span>
<span class="kd">var</span> <span class="nx">jsdom</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"jsdom"</span><span class="p">);</span>

<span class="nx">jsdom</span><span class="p">.</span><span class="nx">env</span><span class="p">(</span>
  <span class="s1">'&lt;p&gt;&lt;a class="the-link" href="https://github.com/tmpvar/jsdom"&gt;jsdom!&lt;/a&gt;&lt;/p&gt;'</span><span class="p">,</span>
  <span class="p">[</span><span class="s2">"http://code.jquery.com/jquery.js"</span><span class="p">],</span>
  <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nb">window</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"contents of a.the-link:"</span><span class="p">,</span> <span class="nb">window</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="s2">"a.the-link"</span><span class="p">).</span><span class="nx">text</span><span class="p">());</span>
  <span class="p">}</span>
<span class="p">);</span>
</code></pre>

<p>or with a configuration object</p>
<pre class="highlight javascript"><code><span class="c1">// Print all of the news items on Hacker News</span>
<span class="kd">var</span> <span class="nx">jsdom</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"jsdom"</span><span class="p">);</span>

<span class="nx">jsdom</span><span class="p">.</span><span class="nx">env</span><span class="p">({</span>
  <span class="na">url</span><span class="p">:</span> <span class="s2">"http://news.ycombinator.com/"</span><span class="p">,</span>
  <span class="na">scripts</span><span class="p">:</span> <span class="p">[</span><span class="s2">"http://code.jquery.com/jquery.js"</span><span class="p">],</span>
  <span class="na">done</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nb">window</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">$</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"HN Links"</span><span class="p">);</span>
    <span class="nx">$</span><span class="p">(</span><span class="s2">"td.title:not(:last) a"</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">" -"</span><span class="p">,</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">text</span><span class="p">());</span>
    <span class="p">});</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre>

<p>or with raw JavaScript source</p>
<pre class="highlight javascript"><code><span class="c1">// Print all of the news items on Hacker News</span>
<span class="kd">var</span> <span class="nx">jsdom</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"jsdom"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"fs"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">jquery</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="s2">"./path/to/jquery.js"</span><span class="p">,</span> <span class="s2">"utf-8"</span><span class="p">);</span>

<span class="nx">jsdom</span><span class="p">.</span><span class="nx">env</span><span class="p">({</span>
  <span class="na">url</span><span class="p">:</span> <span class="s2">"http://news.ycombinator.com/"</span><span class="p">,</span>
  <span class="na">src</span><span class="p">:</span> <span class="p">[</span><span class="nx">jquery</span><span class="p">],</span>
  <span class="na">done</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nb">window</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">$</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"HN Links"</span><span class="p">);</span>
    <span class="nx">$</span><span class="p">(</span><span class="s2">"td.title:not(:last) a"</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">" -"</span><span class="p">,</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">text</span><span class="p">());</span>
    <span class="p">});</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre>

<h3 id="how-it-works">How it works</h3>

<p>The do-what-I-mean API is used like so:</p>
<pre class="highlight javascript"><code><span class="nx">jsdom</span><span class="p">.</span><span class="nx">env</span><span class="p">(</span><span class="nx">string</span><span class="p">,</span> <span class="p">[</span><span class="nx">scripts</span><span class="p">],</span> <span class="p">[</span><span class="nx">config</span><span class="p">],</span> <span class="nx">callback</span><span class="p">);</span>
</code></pre>

<ul>
<li><code class="prettyprint">string</code>: may be a URL, file name, or HTML fragment</li>
<li><code class="prettyprint">scripts</code>: a string or array of strings, containing file names or URLs that will be inserted as <code class="prettyprint">&lt;script&gt;</code> tags</li>
<li><code class="prettyprint">config</code>: see below</li>
<li><code class="prettyprint">callback</code>: takes two arguments

<ul>
<li><code class="prettyprint">err</code>: either <code class="prettyprint">null</code>, if nothing goes wrong, or an error, if the window could not be created</li>
<li><code class="prettyprint">window</code>: a brand new <code class="prettyprint">window</code>, if there wasn&rsquo;t an error</li>
</ul></li>
</ul>

<p><em>Example:</em></p>
<pre class="highlight javascript"><code><span class="nx">jsdom</span><span class="p">.</span><span class="nx">env</span><span class="p">(</span><span class="nx">html</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nb">window</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// free memory associated with the window</span>
  <span class="nb">window</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
<span class="p">});</span>
</code></pre>

<p>If you would like to specify a configuration object only:</p>
<pre class="highlight javascript"><code><span class="nx">jsdom</span><span class="p">.</span><span class="nx">env</span><span class="p">(</span><span class="nx">config</span><span class="p">);</span>
</code></pre>

<ul>
<li><code class="prettyprint">config.html</code>: a HTML fragment</li>
<li><code class="prettyprint">config.file</code>: a file which jsdom will load HTML from; the resulting document&rsquo;s URL will be a <code class="prettyprint">file://</code> URL.</li>
<li><code class="prettyprint">config.url</code>: sets the resulting document&rsquo;s URL, which is reflected in various properties like <code class="prettyprint">document.URL</code> and <code class="prettyprint">location.href</code>, and is also used for cross-origin request restrictions. If <code class="prettyprint">config.html</code> and <code class="prettyprint">config.file</code> are not provided, jsdom will load HTML from this URL.</li>
<li><code class="prettyprint">config.scripts</code>: see <code class="prettyprint">scripts</code> above.</li>
<li><code class="prettyprint">config.src</code>: an array of JavaScript strings that will be evaluated against the resulting document. Similar to <code class="prettyprint">scripts</code>, but it accepts JavaScript instead of paths/URLs.</li>
<li><code class="prettyprint">config.cookieJar</code>: cookie jar which will be used by document and related resource requests. Can be created by <code class="prettyprint">jsdom.createCookieJar()</code> method. Useful to share cookie state among different documents as browsers does.</li>
<li><code class="prettyprint">config.parsingMode</code>: either <code class="prettyprint">&quot;auto&quot;</code>, <code class="prettyprint">&quot;html&quot;</code>, or <code class="prettyprint">&quot;xml&quot;</code>. The default is <code class="prettyprint">&quot;auto&quot;</code>, which uses HTML behavior unless <code class="prettyprint">config.url</code> responds with an XML <code class="prettyprint">Content-Type</code>, or <code class="prettyprint">config.file</code> contains a filename ending in <code class="prettyprint">.xml</code> or <code class="prettyprint">.xhtml</code>. Setting to <code class="prettyprint">&quot;xml&quot;</code> will attempt to parse the document as an XHTML document. (jsdom is <a href="https://github.com/tmpvar/jsdom/issues/885">currently only OK at doing that</a>.)</li>
<li><code class="prettyprint">config.referrer</code>: the new document will have this referrer.</li>
<li><code class="prettyprint">config.cookie</code>: manually set a cookie value, e.g. <code class="prettyprint">&#39;key=value; expires=Wed, Sep 21 2011 12:00:00 GMT; path=/&#39;</code>. Accepts cookie string or array of cookie strings.</li>
<li><code class="prettyprint">config.headers</code>: an object giving any headers that will be used while loading the HTML from <code class="prettyprint">config.url</code>, if applicable.</li>
<li><code class="prettyprint">config.userAgent</code>: the user agent string used in requests; defaults to <code class="prettyprint">Node.js (#process.platform#; U; rv:#process.version#)</code></li>
<li><code class="prettyprint">config.features</code>: see Flexibility section below. <strong>Note</strong>: the default feature set for <code class="prettyprint">jsdom.env</code> does <em>not</em> include fetching remote JavaScript and executing it. This is something that you will need to <em>carefully</em> enable yourself.</li>
<li><code class="prettyprint">config.resourceLoader</code>: a function that intercepts subresource requests and allows you to re-route them, modify, or outright replace them with your own content. More below.</li>
<li><code class="prettyprint">config.done</code>, <code class="prettyprint">config.onload</code>, <code class="prettyprint">config.created</code>: see below.</li>
<li><code class="prettyprint">config.concurrentNodeIterators</code>: the maximum amount of <code class="prettyprint">NodeIterator</code>s that you can use at the same time. The default is <code class="prettyprint">10</code>; setting this to a high value will hurt performance.</li>
<li><code class="prettyprint">config.virtualConsole</code>: a virtual console instance that can capture the window’s console output; see the &ldquo;Capturing Console Output&rdquo; examples.</li>
<li><code class="prettyprint">config.pool</code>: an object describing which agents to use for the requests; defaults to <code class="prettyprint">{ maxSockets: 6 }</code>, see <a href="https://github.com/request/request#requestoptions-callback">request module</a> for more details.</li>
<li><code class="prettyprint">config.agent</code>: <code class="prettyprint">http(s).Agent</code> instance to use</li>
<li><code class="prettyprint">config.agentClass</code>: alternatively specify your agent&rsquo;s class name</li>
<li><code class="prettyprint">config.agentOptions</code>: the agent options; defaults to <code class="prettyprint">{ keepAlive: true, keepAliveMsecs: 115000 }</code>, see <a href="https://nodejs.org/api/http.html">http api</a> for more details.</li>
<li><code class="prettyprint">config.strictSSL</code>: if <code class="prettyprint">true</code>, requires SSL certificates be valid; defaults to <code class="prettyprint">true</code>, see <a href="https://github.com/request/request#requestoptions-callback">request module</a> for more details.</li>
<li><code class="prettyprint">config.proxy</code>: a URL for a HTTP proxy to use for the requests.</li>
</ul>

<p>Note that at least one of the callbacks (<code class="prettyprint">done</code>, <code class="prettyprint">onload</code>, or <code class="prettyprint">created</code>) is required, as is one of <code class="prettyprint">html</code>, <code class="prettyprint">file</code>, or <code class="prettyprint">url</code>.</p>

<h3 id="initialization-lifecycle">Initialization lifecycle</h3>

<p>If you just want to load the document and execute it, the <code class="prettyprint">done</code> callback shown above is the simplest. If anything goes wrong while loading the document and creating the window, the problem will show up in the <code class="prettyprint">error</code> passed as the first argument.</p>

<p>However, if you want more control over or insight into the initialization lifecycle, you&rsquo;ll want to use the <code class="prettyprint">created</code> and/or <code class="prettyprint">onload</code> callbacks:</p>

<h4 id="created-error-window"><code class="prettyprint">created(error, window)</code></h4>

<p>The <code class="prettyprint">created</code> callback is called as soon as the window is created, or if that process fails. You may access all <code class="prettyprint">window</code> properties here; however, <code class="prettyprint">window.document</code> is not ready for use yet, as the HTML has not been parsed.</p>

<p>The primary use-case for <code class="prettyprint">created</code> is to modify the window object (e.g. add new functions on built-in prototypes) before any scripts execute.</p>

<p>You can also set an event handler for <code class="prettyprint">&#39;load&#39;</code> or other events on the window if you wish.</p>

<p>If the <code class="prettyprint">error</code> argument is non-<code class="prettyprint">null</code>, it will contain whatever loading or initialization error caused the window creation to fail; in that case <code class="prettyprint">window</code> will not be passed.</p>

<h4 id="onload-window"><code class="prettyprint">onload(window)</code></h4>

<p>The <code class="prettyprint">onload</code> callback is called along with the window&rsquo;s <code class="prettyprint">&#39;load&#39;</code> event. This means it will only be called if creation succeeds without error. Note that by the time it has called, any external resources will have been downloaded, and any <code class="prettyprint">&lt;script&gt;</code>s will have finished executing.</p>

<h4 id="done-error-window"><code class="prettyprint">done(error, window)</code></h4>

<p>Now that you know about <code class="prettyprint">created</code> and <code class="prettyprint">onload</code>, you can see that <code class="prettyprint">done</code> is essentially both of them smashed together:</p>

<ul>
<li>If window creation fails, then <code class="prettyprint">error</code> will be the creation error.</li>
<li>Otherwise, <code class="prettyprint">window</code> will be a fully-loaded window, with all external resources downloaded and <code class="prettyprint">&lt;script&gt;</code>s executed.</li>
</ul>

<h4 id="dealing-with-asynchronous-script-loading">Dealing with asynchronous script loading</h4>

<p>If you load scripts asynchronously, e.g. with a module loader like RequireJS, none of the above hooks will really give you what you want. There&rsquo;s nothing, either in jsdom or in browsers, to say &ldquo;notify me after all asynchronous loads have completed.&rdquo; The solution is to use the mechanisms of the framework you are using to notify about this finishing up. E.g., with RequireJS, you could do</p>
<pre class="highlight javascript"><code><span class="c1">// On the Node.js/io.js side:</span>
<span class="kd">var</span> <span class="nb">window</span> <span class="o">=</span> <span class="nx">jsdom</span><span class="p">.</span><span class="nx">jsdom</span><span class="p">(...).</span><span class="nx">defaultView</span><span class="p">;</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">onModulesLoaded</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"ready to roll!"</span><span class="p">);</span>
<span class="p">};</span>
</code></pre>
<pre class="highlight html"><code><span class="c">&lt;!-- Inside the HTML you supply to jsdom --&gt;</span>
<span class="nt">&lt;script&gt;</span>
<span class="nx">requirejs</span><span class="p">([</span><span class="s2">"entry-module"</span><span class="p">],</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nb">window</span><span class="p">.</span><span class="nx">onModulesLoaded</span><span class="p">();</span>
<span class="p">});</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre>

<p>For more details, see the discussion in <a href="https://github.com/tmpvar/jsdom/issues/640">#640</a>, especially <a href="https://github.com/matthewkastor">@matthewkastor</a>&rsquo;s <a href="https://github.com/tmpvar/jsdom/issues/640#issuecomment-22216965">insightful comment</a>.</p>

<h4 id="listening-for-script-errors-during-initialization">Listening for script errors during initialization</h4>

<p>Although it is easy to listen for script errors after initialization, via code like</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nb">window</span> <span class="o">=</span> <span class="nx">jsdom</span><span class="p">.</span><span class="nx">jsdom</span><span class="p">(...).</span><span class="nx">defaultView</span><span class="p">;</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">"error"</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">"script error!!"</span><span class="p">,</span> <span class="nx">event</span><span class="p">.</span><span class="nx">error</span><span class="p">);</span>
<span class="p">});</span>
</code></pre>

<p>it is often also desirable to listen for any script errors during initialization, or errors loading scripts passed to <code class="prettyprint">jsdom.env</code>. To do this, use the virtual console feature, described in more detail later:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">virtualConsole</span> <span class="o">=</span> <span class="nx">jsdom</span><span class="p">.</span><span class="nx">createVirtualConsole</span><span class="p">();</span>
<span class="nx">virtualConsole</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">"jsdomError"</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">.</span><span class="nx">stack</span><span class="p">,</span> <span class="nx">error</span><span class="p">.</span><span class="nx">detail</span><span class="p">);</span>
<span class="p">});</span>

<span class="kd">var</span> <span class="nb">window</span> <span class="o">=</span> <span class="nx">jsdom</span><span class="p">.</span><span class="nx">jsdom</span><span class="p">(...,</span> <span class="p">{</span> <span class="nx">virtualConsole</span> <span class="p">}).</span><span class="nx">defaultView</span><span class="p">;</span>
</code></pre>

<p>You also get this functionality for free by default if you use <code class="prettyprint">virtualConsole.sendTo</code>; again, see more below:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">virtualConsole</span> <span class="o">=</span> <span class="nx">jsdom</span><span class="p">.</span><span class="nx">createVirtualConsole</span><span class="p">().</span><span class="nx">sendTo</span><span class="p">(</span><span class="nx">console</span><span class="p">);</span>
<span class="kd">var</span> <span class="nb">window</span> <span class="o">=</span> <span class="nx">jsdom</span><span class="p">.</span><span class="nx">jsdom</span><span class="p">(...,</span> <span class="p">{</span> <span class="nx">virtualConsole</span> <span class="p">}).</span><span class="nx">defaultView</span><span class="p">;</span>
</code></pre>

<h3 id="on-running-scripts-and-being-safe">On running scripts and being safe</h3>

<p>By default, <code class="prettyprint">jsdom.env</code> will not process and run external JavaScript, since our sandbox is not foolproof. That is, code running inside the DOM&rsquo;s <code class="prettyprint">&lt;script&gt;</code>s can, if it tries hard enough, get access to the Node environment, and thus to your machine. If you want to (carefully!) enable running JavaScript, you can use <code class="prettyprint">jsdom.jsdom</code>, <code class="prettyprint">jsdom.jQueryify</code>, or modify the defaults passed to <code class="prettyprint">jsdom.env</code>.</p>

<h3 id="on-timers-and-process-lifetime">On timers and process lifetime</h3>

<p>Timers in the page (set by <code class="prettyprint">window.setTimeout</code> or <code class="prettyprint">window.setInterval</code>) will, by definition, execute code in the future in the context of the <code class="prettyprint">window</code>. Since there is no way to execute code in the future without keeping the process alive, note that outstanding jsdom timers will keep your Node.js process alive. Similarly, since there is no way to execute code in the context of an object without keeping that object alive, outstanding jsdom timers will prevent garbage collection of the <code class="prettyprint">window</code> on which they are scheduled. If you want to be sure to shut down a jsdom window, use <code class="prettyprint">window.close()</code>, which will terminate all running timers (and also remove any event listeners on the <code class="prettyprint">window</code> and <code class="prettyprint">document</code>).</p>

<h2 id="for-the-hardcore-jsdom-jsdom">For the hardcore: <code class="prettyprint">jsdom.jsdom</code></h2>

<p>The <code class="prettyprint">jsdom.jsdom</code> method does fewer things automatically; it takes in only HTML source, and it does not allow you to separately supply scripts that it will inject and execute. It just gives you back a <code class="prettyprint">document</code> object, with usable <code class="prettyprint">document.defaultView</code>, and starts asynchronously executing any <code class="prettyprint">&lt;script&gt;</code>s included in the HTML source. You can listen for the <code class="prettyprint">&#39;load&#39;</code> event to wait until scripts are done loading and executing, just like you would in a normal HTML page.</p>

<p>Usage of the API generally looks like this:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">jsdom</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"jsdom"</span><span class="p">).</span><span class="nx">jsdom</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">doc</span> <span class="o">=</span> <span class="nx">jsdom</span><span class="p">(</span><span class="nx">markup</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
<span class="kd">var</span> <span class="nb">window</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">defaultView</span><span class="p">;</span>
</code></pre>

<ul>
<li><p><code class="prettyprint">markup</code> is a HTML document to be parsed. You can also pass <code class="prettyprint">undefined</code> to get the basic document, equivalent to what a browser will give if you open up an empty <code class="prettyprint">.html</code> file.</p></li>
<li><p><code class="prettyprint">options</code>: see the explanation of the <code class="prettyprint">config</code> object above.</p></li>
</ul>

<h3 id="flexibility">Flexibility</h3>

<p>One of the goals of jsdom is to be as minimal and light as possible. This section details how someone can change the behavior of <code class="prettyprint">Document</code>s before they are created. These features are baked into the <code class="prettyprint">DOMImplementation</code> that every <code class="prettyprint">Document</code> has, and may be tweaked in two ways:</p>

<ol>
<li>When you create a new <code class="prettyprint">Document</code>, by overriding the configuration:</li>
</ol>
<pre class="highlight javascript"><code>  <span class="kd">var</span> <span class="nx">jsdom</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"jsdom"</span><span class="p">).</span><span class="nx">jsdom</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">doc</span> <span class="o">=</span> <span class="nx">jsdom</span><span class="p">(</span><span class="s2">"&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;"</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">features</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">FetchExternalResources</span> <span class="p">:</span> <span class="p">[</span><span class="s2">"link"</span><span class="p">]</span>
      <span class="p">}</span>
  <span class="p">});</span>
</code></pre>

<p>Do note, that this will only affect the document that is currently being created. All other documents will use the defaults specified below (see: Default Features).</p>

<ol>
<li>Before creating any documents, you can modify the defaults for all future documents:</li>
</ol>
<pre class="highlight javascript"><code>  <span class="nx">require</span><span class="p">(</span><span class="s2">"jsdom"</span><span class="p">).</span><span class="nx">defaultDocumentFeatures</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">FetchExternalResources</span><span class="p">:</span> <span class="p">[</span><span class="s2">"script"</span><span class="p">],</span>
      <span class="na">ProcessExternalResources</span><span class="p">:</span> <span class="kc">false</span>
  <span class="p">};</span>
</code></pre>

<h4 id="external-resources">External Resources</h4>

<p>Default features are extremely important for jsdom as they lower the configuration requirement and present developers a set of consistent default behaviors. The following sections detail the available features, their defaults, and the values that jsdom uses.</p>

<p><code class="prettyprint">FetchExternalResources</code></p>

<ul>
<li><em>Default</em>: <code class="prettyprint">[&quot;script&quot;, &quot;link&quot;]</code></li>
<li><em>Allowed</em>: <code class="prettyprint">[&quot;script&quot;, &quot;frame&quot;, &quot;iframe&quot;, &quot;link&quot;, &quot;img&quot;]</code> or <code class="prettyprint">false</code></li>
<li><em>Default for <code class="prettyprint">jsdom.env</code></em>: <code class="prettyprint">false</code></li>
</ul>

<p>Enables/disables fetching files over the file system/HTTP</p>

<p><code class="prettyprint">ProcessExternalResources</code></p>

<ul>
<li><em>Default</em>: <code class="prettyprint">[&quot;script&quot;]</code></li>
<li><em>Allowed</em>: <code class="prettyprint">[&quot;script&quot;]</code> or <code class="prettyprint">false</code></li>
<li><em>Default for <code class="prettyprint">jsdom.env</code></em>: <code class="prettyprint">false</code></li>
</ul>

<p>Enables/disables JavaScript execution</p>

<p><code class="prettyprint">SkipExternalResources</code></p>

<ul>
<li><em>Default</em>: <code class="prettyprint">false</code> (allow all)</li>
<li><em>Allowed</em>: <code class="prettyprint">/url to be skipped/</code> or <code class="prettyprint">false</code></li>
<li><em>Example</em>: <code class="prettyprint">/http:\/\/example.org/js/bad\.js/</code></li>
</ul>

<p>Filters resource downloading and processing to disallow those matching the given regular expression</p>

<h4 id="custom-external-resource-loader">Custom External Resource Loader</h4>

<p>jsdom lets you intercept subresource requests using <code class="prettyprint">config.resourceLoader</code>. <code class="prettyprint">config.resourceLoader</code> expects a function which is called for each subresource request with the following arguments:</p>

<ul>
<li><code class="prettyprint">resource</code>: a vanilla JavaScript object with the following properties

<ul>
<li><code class="prettyprint">element</code>: the element that requested the resource.</li>
<li><code class="prettyprint">url</code>: a parsed URL object.</li>
<li><code class="prettyprint">cookie</code>: the content of the HTTP cookie header (<code class="prettyprint">key=value</code> pairs separated by semicolons).</li>
<li><code class="prettyprint">baseUrl</code>: the base URL used to resolve relative URLs.</li>
<li><code class="prettyprint">defaultFetch(callback)</code>: a convenience method to fetch the resource online.</li>
</ul></li>
<li><code class="prettyprint">callback</code>: a function to be called with two arguments

<ul>
<li><code class="prettyprint">error</code>: either <code class="prettyprint">null</code>, if nothing goes wrong, or an <code class="prettyprint">Error</code> object.</li>
<li><code class="prettyprint">body</code>: a string representing the body of the resource.</li>
</ul></li>
</ul>

<p>For example, fetching all JS files from a different directory and running them in strict mode:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">jsdom</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"jsdom"</span><span class="p">);</span>

<span class="nx">jsdom</span><span class="p">.</span><span class="nx">env</span><span class="p">({</span>
  <span class="na">url</span><span class="p">:</span> <span class="s2">"http://example.com/"</span><span class="p">,</span>
  <span class="na">resourceLoader</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">pathname</span> <span class="o">=</span> <span class="nx">resource</span><span class="p">.</span><span class="nx">url</span><span class="p">.</span><span class="nx">pathname</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="sr">/</span><span class="se">\.</span><span class="sr">js$/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">pathname</span><span class="p">))</span> <span class="p">{</span>
      <span class="nx">resource</span><span class="p">.</span><span class="nx">url</span><span class="p">.</span><span class="nx">pathname</span> <span class="o">=</span> <span class="nx">pathname</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s2">"/js/"</span><span class="p">,</span> <span class="s2">"/js/raw/"</span><span class="p">);</span>
      <span class="k">return</span> <span class="nx">resource</span><span class="p">.</span><span class="nx">defaultFetch</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
        <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s1">'"use strict";\n'</span> <span class="o">+</span> <span class="nx">body</span><span class="p">);</span>
      <span class="p">});</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">resource</span><span class="p">.</span><span class="nx">defaultFetch</span><span class="p">(</span><span class="nx">callback</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="na">features</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">FetchExternalResources</span><span class="p">:</span> <span class="p">[</span><span class="s2">"script"</span><span class="p">],</span>
    <span class="na">ProcessExternalResources</span><span class="p">:</span> <span class="p">[</span><span class="s2">"script"</span><span class="p">],</span>
    <span class="na">SkipExternalResources</span><span class="p">:</span> <span class="kc">false</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre>

<p>You can return an object containing an <code class="prettyprint">abort()</code> function which will be called if the window is closed or stopped before the request ends.
The <code class="prettyprint">abort()</code> function should stop the request and call the callback with an error.</p>

<p>For example, simulating a long request:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">jsdom</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"jsdom"</span><span class="p">);</span>

<span class="nx">jsdom</span><span class="p">.</span><span class="nx">env</span><span class="p">({</span>
  <span class="na">url</span><span class="p">:</span> <span class="s2">"http://example.com/"</span><span class="p">,</span>
  <span class="na">resourceLoader</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">resource</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">pathname</span> <span class="o">=</span> <span class="nx">resource</span><span class="p">.</span><span class="nx">url</span><span class="p">.</span><span class="nx">pathname</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="sr">/</span><span class="se">\.</span><span class="sr">json$/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">pathname</span><span class="p">))</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">timeout</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s2">"{\"test\":\"test\"}"</span><span class="p">);</span>
      <span class="p">},</span> <span class="mi">10000</span><span class="p">);</span>
      <span class="k">return</span> <span class="p">{</span>
        <span class="na">abort</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
          <span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">timeout</span><span class="p">);</span>
          <span class="nx">callback</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">"request canceled by user"</span><span class="p">));</span>
        <span class="p">}</span>
      <span class="p">};</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">resource</span><span class="p">.</span><span class="nx">defaultFetch</span><span class="p">(</span><span class="nx">callback</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="na">features</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">FetchExternalResources</span><span class="p">:</span> <span class="p">[</span><span class="s2">"script"</span><span class="p">],</span>
    <span class="na">ProcessExternalResources</span><span class="p">:</span> <span class="p">[</span><span class="s2">"script"</span><span class="p">],</span>
    <span class="na">SkipExternalResources</span><span class="p">:</span> <span class="kc">false</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre>

<h2 id="canvas">Canvas</h2>

<p>jsdom includes support for using the <a href="https://npmjs.org/package/canvas">canvas</a> package to extend any <code class="prettyprint">&lt;canvas&gt;</code> elements with the canvas API. To make this work, you need to include canvas as a dependency in your project, as a peer of jsdom. If jsdom can find the canvas package, it will use it, but if it&rsquo;s not present, then <code class="prettyprint">&lt;canvas&gt;</code> elements will behave like <code class="prettyprint">&lt;div&gt;</code>s.</p>

<h2 id="more-examples">More Examples</h2>

<h3 id="creating-a-browser-like-window-object">Creating a browser-like window object</h3>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">jsdom</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"jsdom"</span><span class="p">).</span><span class="nx">jsdom</span><span class="p">;</span>
<span class="kd">var</span> <span class="nb">document</span> <span class="o">=</span> <span class="nx">jsdom</span><span class="p">(</span><span class="s2">"hello world"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nb">window</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">defaultView</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">.</span><span class="nx">outerHTML</span><span class="p">);</span>
<span class="c1">// output: "&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;hello world&lt;/body&gt;&lt;/html&gt;"</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span><span class="p">);</span>
<span class="c1">// output: 1024</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nb">window</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">);</span>
<span class="c1">// outputs: function</span>
</code></pre>

<h3 id="jqueryify">jQueryify</h3>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">jsdom</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"jsdom"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nb">window</span> <span class="o">=</span> <span class="nx">jsdom</span><span class="p">.</span><span class="nx">jsdom</span><span class="p">().</span><span class="nx">defaultView</span><span class="p">;</span>

<span class="nx">jsdom</span><span class="p">.</span><span class="nx">jQueryify</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="s2">"http://code.jquery.com/jquery-2.1.1.js"</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nb">window</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="s2">"body"</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s1">'&lt;div class="testing"&gt;Hello World, It works&lt;/div&gt;'</span><span class="p">);</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="s2">".testing"</span><span class="p">).</span><span class="nx">text</span><span class="p">());</span>
<span class="p">});</span>
</code></pre>

<h3 id="passing-objects-to-scripts-inside-the-page">Passing objects to scripts inside the page</h3>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">jsdom</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"jsdom"</span><span class="p">).</span><span class="nx">jsdom</span><span class="p">;</span>
<span class="kd">var</span> <span class="nb">window</span> <span class="o">=</span> <span class="nx">jsdom</span><span class="p">().</span><span class="nx">defaultView</span><span class="p">;</span>

<span class="nb">window</span><span class="p">.</span><span class="nx">__myObject</span> <span class="o">=</span> <span class="p">{</span> <span class="na">foo</span><span class="p">:</span> <span class="s2">"bar"</span> <span class="p">};</span>

<span class="kd">var</span> <span class="nx">scriptEl</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">"script"</span><span class="p">);</span>
<span class="nx">scriptEl</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s2">"anotherScript.js"</span><span class="p">;</span>
<span class="nb">window</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">scriptEl</span><span class="p">);</span>

<span class="c1">// anotherScript.js will have the ability to read `window.__myObject`, even</span>
<span class="c1">// though it originated in Node.js/io.js!</span>
</code></pre>

<h3 id="serializing-a-document">Serializing a document</h3>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">jsdom</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"jsdom"</span><span class="p">).</span><span class="nx">jsdom</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">serializeDocument</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"jsdom"</span><span class="p">).</span><span class="nx">serializeDocument</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">doc</span> <span class="o">=</span> <span class="nx">jsdom</span><span class="p">(</span><span class="s2">"&lt;!DOCTYPE html&gt;hello"</span><span class="p">);</span>

<span class="nx">serializeDocument</span><span class="p">(</span><span class="nx">doc</span><span class="p">)</span> <span class="o">===</span> <span class="s2">"&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;hello&lt;/body&gt;&lt;/html&gt;"</span><span class="p">;</span>
<span class="nx">doc</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">.</span><span class="nx">outerHTML</span> <span class="o">===</span> <span class="s2">"&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;hello&lt;/body&gt;&lt;/html&gt;"</span><span class="p">;</span>
</code></pre>

<h3 id="sharing-cookie-state-among-pages">Sharing cookie state among pages</h3>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">jsdom</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"jsdom"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">cookieJar</span> <span class="o">=</span> <span class="nx">jsdom</span><span class="p">.</span><span class="nx">createCookieJar</span><span class="p">();</span>

<span class="nx">jsdom</span><span class="p">.</span><span class="nx">env</span><span class="p">({</span>
    <span class="na">url</span><span class="p">:</span> <span class="s1">'http://google.com'</span><span class="p">,</span>
    <span class="na">cookieJar</span><span class="p">:</span> <span class="nx">cookieJar</span><span class="p">,</span>
    <span class="na">done</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err1</span><span class="p">,</span> <span class="nx">window1</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//...</span>

        <span class="nx">jsdom</span><span class="p">.</span><span class="nx">env</span><span class="p">({</span>
            <span class="na">url</span><span class="p">:</span> <span class="s1">'http://code.google.com'</span><span class="p">,</span>
            <span class="na">cookieJar</span><span class="p">:</span> <span class="nx">cookieJar</span><span class="p">,</span>
            <span class="na">done</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err2</span><span class="p">,</span> <span class="nx">window2</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">//...</span>
            <span class="p">}</span>
        <span class="p">});</span>
    <span class="p">}</span>
<span class="p">});</span>
</code></pre>

<h3 id="capturing-console-output">Capturing Console Output</h3>

<h4 id="forward-a-window-39-s-console-output-to-the-node-js-io-js-console">Forward a window&rsquo;s console output to the Node.js/io.js console</h4>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">jsdom</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"jsdom"</span><span class="p">);</span>

<span class="kd">var</span> <span class="nb">document</span> <span class="o">=</span> <span class="nx">jsdom</span><span class="p">.</span><span class="nx">jsdom</span><span class="p">(</span><span class="kc">undefined</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">virtualConsole</span><span class="p">:</span> <span class="nx">jsdom</span><span class="p">.</span><span class="nx">createVirtualConsole</span><span class="p">().</span><span class="nx">sendTo</span><span class="p">(</span><span class="nx">console</span><span class="p">)</span>
<span class="p">});</span>
</code></pre>

<p>By default this will forward all <code class="prettyprint">&quot;jsdomError&quot;</code> events to <code class="prettyprint">console.error</code>. If you want to maintain only a strict one-to-one mapping of events to method calls, and perhaps handle <code class="prettyprint">&quot;jsdomErrors&quot;</code> yourself, then you can do <code class="prettyprint">sendTo(console, { omitJsdomErrors: true })</code>.</p>

<h4 id="create-an-event-emitter-for-a-window-39-s-console">Create an event emitter for a window&rsquo;s console</h4>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">jsdom</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"jsdom"</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">virtualConsole</span> <span class="o">=</span> <span class="nx">jsdom</span><span class="p">.</span><span class="nx">createVirtualConsole</span><span class="p">();</span>

<span class="nx">virtualConsole</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">"log"</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"console.log called -&gt;"</span><span class="p">,</span> <span class="nx">message</span><span class="p">);</span>
<span class="p">});</span>

<span class="kd">var</span> <span class="nb">document</span> <span class="o">=</span> <span class="nx">jsdom</span><span class="p">.</span><span class="nx">jsdom</span><span class="p">(</span><span class="kc">undefined</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">virtualConsole</span><span class="p">:</span> <span class="nx">virtualConsole</span>
<span class="p">});</span>
</code></pre>

<p>Post-initialization, if you didn&rsquo;t pass in a <code class="prettyprint">virtualConsole</code> or no longer have a reference to it, you can retreive the <code class="prettyprint">virtualConsole</code> by using:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">virtualConsole</span> <span class="o">=</span> <span class="nx">jsdom</span><span class="p">.</span><span class="nx">getVirtualConsole</span><span class="p">(</span><span class="nb">window</span><span class="p">);</span>
</code></pre>

<h4 id="virtual-console-jsdomerror-error-reporting">Virtual console <code class="prettyprint">jsdomError</code> error reporting</h4>

<p>Besides the usual events, corresponding to <code class="prettyprint">console</code> methods, the virtual console is also used for reporting errors from jsdom itself. This is similar to how error messages often show up in web browser consoles, even if they are not initiated by <code class="prettyprint">console.error</code>. So far, the following errors are output this way:</p>

<ul>
<li>Errors loading or parsing external resources (scripts, stylesheets, frames, and iframes)</li>
<li>Script execution errors that are not handled by a window <code class="prettyprint">onerror</code> event handler that returns <code class="prettyprint">true</code> or calls <code class="prettyprint">event.preventDefault()</code></li>
<li>Calls to methods, like <code class="prettyprint">window.alert</code>, which jsdom does not implement, but installs anyway for web compatibility</li>
</ul>

<h3 id="getting-a-node-39-s-location-within-the-source">Getting a node&rsquo;s location within the source</h3>

<p>To find where a DOM node is within the source document, we provide the <code class="prettyprint">jsdom.nodeLocation</code> function:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">jsdom</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"jsdom"</span><span class="p">);</span>

<span class="kd">var</span> <span class="nb">document</span> <span class="o">=</span> <span class="nx">jsdom</span><span class="p">.</span><span class="nx">jsdom</span><span class="p">(</span><span class="err">`</span><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Hello</span>
    <span class="o">&lt;</span><span class="nx">img</span> <span class="nx">src</span><span class="o">=</span><span class="s2">"foo.jpg"</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="sr">/p&gt;`</span><span class="se">)</span><span class="err">;
</span>
<span class="kd">var</span> <span class="nx">bodyEl</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">;</span> <span class="c1">// implicitly created</span>
<span class="kd">var</span> <span class="nx">pEl</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">"p"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">textNode</span> <span class="o">=</span> <span class="nx">pEl</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">imgEl</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">"img"</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">jsdom</span><span class="p">.</span><span class="nx">nodeLocation</span><span class="p">(</span><span class="nx">bodyEl</span><span class="p">));</span>   <span class="c1">// null; it's not in the source</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">jsdom</span><span class="p">.</span><span class="nx">nodeLocation</span><span class="p">(</span><span class="nx">pEl</span><span class="p">));</span>      <span class="c1">// { start: 0, end: 39, startTag: ..., endTag: ... }</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">jsdom</span><span class="p">.</span><span class="nx">nodeLocation</span><span class="p">(</span><span class="nx">textNode</span><span class="p">));</span> <span class="c1">// { start: 3, end: 13 }</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">jsdom</span><span class="p">.</span><span class="nx">nodeLocation</span><span class="p">(</span><span class="nx">imgEl</span><span class="p">));</span>    <span class="c1">// { start: 13, end: 32 }</span>
</code></pre>

<p>This returns the <a href="https://www.npmjs.com/package/parse5#options-locationinfo">parse5 location info</a> for the node.</p>

<h4 id="overriding-window-top">Overriding <code class="prettyprint">window.top</code></h4>

<p>The <code class="prettyprint">top</code> property on <code class="prettyprint">window</code> is marked <code class="prettyprint">[Unforgeable]</code> in the spec, meaning it is a non-configurable own property and thus cannot be overridden or shadowed by normal code running inside the jsdom window, even using <code class="prettyprint">Object.defineProperty</code>. However, if you&rsquo;re acting from outside the window, e.g. in some test framework that creates jsdom instances, you can override it using the special <code class="prettyprint">jsdom.reconfigureWindow</code> function:</p>
<pre class="highlight javascript"><code><span class="nx">jsdom</span><span class="p">.</span><span class="nx">reconfigureWindow</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="p">{</span> <span class="na">top</span><span class="p">:</span> <span class="nx">myFakeTopForTesting</span> <span class="p">});</span>
</code></pre>

<p>In the future we may expand <code class="prettyprint">reconfigureWindow</code> to allow overriding other <code class="prettyprint">[Unforgeable]</code> properties. Let us know if you need this capability.</p>

<h4 id="changing-the-url-of-an-existing-jsdom-window-instance">Changing the URL of an existing jsdom <code class="prettyprint">Window</code> instance</h4>

<p>At present jsdom does not handle navigation (such as setting <code class="prettyprint">window.location.href === &quot;https://example.com/&quot;</code>). However, if you&rsquo;d like to change the URL of an existing <code class="prettyprint">Window</code> instance (such as for testing purposes), you can use the <code class="prettyprint">jsdom.changeURL</code> method:</p>
<pre class="highlight javascript"><code><span class="nx">jsdom</span><span class="p">.</span><span class="nx">changeURL</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="s2">"https://example.com/"</span><span class="p">);</span>
</code></pre>

<h4 id="running-vm-scripts">Running vm scripts</h4>

<p>Although in most cases it&rsquo;s simplest to just insert a <code class="prettyprint">&lt;script&gt;</code> element or call <code class="prettyprint">window.eval</code>, in some cases you want access to the raw <a href="https://nodejs.org/api/vm.html">vm context</a> underlying jsdom to run scripts. You can do that like so:</p>
<pre class="highlight javascript"><code><span class="kr">const</span> <span class="nx">script</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">vm</span><span class="p">.</span><span class="nx">Script</span><span class="p">(</span><span class="s2">"globalVariable = 5;"</span><span class="p">,</span> <span class="p">{</span> <span class="na">filename</span><span class="p">:</span> <span class="s2">"test.js"</span> <span class="p">});</span>
<span class="nx">jsdom</span><span class="p">.</span><span class="nx">evalVMScript</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="nx">script</span><span class="p">);</span>
</code></pre>

<h2 id="what-standards-does-jsdom-support-exactly">What Standards Does jsdom Support, Exactly?</h2>

<p>Our mission is to get something very close to a headless browser, with emphasis more on the DOM/HTML side of things than the CSS side. As such, our primary goals are supporting <a href="http://dom.spec.whatwg.org/">The DOM Standard</a> and <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/">The HTML Standard</a>. We only support some subset of these so far; in particular we have the subset covered by the outdated DOM 2 spec family down pretty well. We&rsquo;re slowly including more and more from the modern DOM and HTML specs, including some <code class="prettyprint">Node</code> APIs, <code class="prettyprint">querySelector(All)</code>, attribute semantics, the history and URL APIs, and the HTML parsing algorithm.</p>

<p>We also support some subset of the <a href="http://dev.w3.org/csswg/cssom/">CSSOM</a>, largely via <a href="https://github.com/chad3814">@chad3814</a>&rsquo;s excellent <a href="https://www.npmjs.org/package/cssstyle">cssstyle</a> package. In general we want to make webpages run headlessly as best we can, and if there are other specs we should be incorporating, let us know.</p>

<h3 id="supported-encodings">Supported encodings</h3>

<p>The supported encodings are the ones listed <a href="https://encoding.spec.whatwg.org/#names-and-labels">in the Encoding Standard</a> excluding these:</p>

<ul>
<li>ISO-8859-8-I</li>
<li>x-mac-cyrillic</li>
<li>ISO-2022-JP</li>
<li>replacement</li>
<li>x-user-defined</li>
</ul>
