<h1 id="sliced">sliced</h1>

<p>==========</p>

<p>A faster alternative to <code class="prettyprint">[].slice.call(arguments)</code>.</p>

<p><a href="http://travis-ci.org/aheckmann/sliced"><img alt="Build Status" src="https://secure.travis-ci.org/aheckmann/sliced.png" /></a></p>

<p>Example output from <a href="https://github.com/bestiejs/benchmark.js">benchmark.js</a></p>

<p>Array.prototype.slice.call x 1,401,820 ops/sec ±2.16% (90 runs sampled)
    [].slice.call x 1,313,116 ops/sec ±2.04% (96 runs sampled)
    cached slice.call x 10,297,910 ops/sec ±1.81% (96 runs sampled)
    sliced x 19,906,019 ops/sec ±1.23% (89 runs sampled)
    fastest is sliced</p>

<p>Array.prototype.slice.call(arguments, 1) x 1,373,238 ops/sec ±1.84% (95 runs sampled)
    [].slice.call(arguments, 1) x 1,395,336 ops/sec ±1.36% (93 runs sampled)
    cached slice.call(arguments, 1) x 9,926,018 ops/sec ±1.67% (92 runs sampled)
    sliced(arguments, 1) x 20,747,990 ops/sec ±1.16% (93 runs sampled)
    fastest is sliced(arguments, 1)</p>

<p>Array.prototype.slice.call(arguments, -1) x 1,319,908 ops/sec ±2.12% (91 runs sampled)
    [].slice.call(arguments, -1) x 1,336,170 ops/sec ±1.33% (97 runs sampled)
    cached slice.call(arguments, -1) x 10,078,718 ops/sec ±1.21% (98 runs sampled)
    sliced(arguments, -1) x 20,471,474 ops/sec ±1.81% (92 runs sampled)
    fastest is sliced(arguments, -1)</p>

<p>Array.prototype.slice.call(arguments, -2, -10) x 1,369,246 ops/sec ±1.68% (97 runs sampled)
    [].slice.call(arguments, -2, -10) x 1,387,935 ops/sec ±1.70% (95 runs sampled)
    cached slice.call(arguments, -2, -10) x 9,593,428 ops/sec ±1.23% (97 runs sampled)
    sliced(arguments, -2, -10) x 23,178,931 ops/sec ±1.70% (92 runs sampled)
    fastest is sliced(arguments, -2, -10)</p>

<p>Array.prototype.slice.call(arguments, -2, -1) x 1,441,300 ops/sec ±1.26% (98 runs sampled)
    [].slice.call(arguments, -2, -1) x 1,410,326 ops/sec ±1.96% (93 runs sampled)
    cached slice.call(arguments, -2, -1) x 9,854,419 ops/sec ±1.02% (97 runs sampled)
    sliced(arguments, -2, -1) x 22,550,801 ops/sec ±1.86% (91 runs sampled)
    fastest is sliced(arguments, -2, -1)</p>

<p><em>Benchmark  <a href="https://github.com/aheckmann/sliced/blob/master/bench.js">source</a>.</em></p>

<h2 id="usage">Usage</h2>

<p><code class="prettyprint">sliced</code> accepts the same arguments as <code class="prettyprint">Array#slice</code> so you can easily swap it out.</p>
<pre class="highlight javascript"><code><span class="kd">function</span> <span class="nx">zing</span> <span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">slow</span> <span class="o">=</span> <span class="p">[].</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">slice</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>

  <span class="kd">var</span> <span class="nx">slow</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">slice</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
  <span class="c1">// etc</span>
<span class="p">}</span>
</code></pre>

<h2 id="install">install</h2>

<p>npm install sliced</p>

<p><a href="https://github.com/aheckmann/sliced/blob/master/LICENSE">LICENSE</a></p>
