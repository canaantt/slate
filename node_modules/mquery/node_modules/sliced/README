<h1 id="sliced">sliced</h1>

<p>==========</p>

<p>A faster alternative to <code class="prettyprint">[].slice.call(arguments)</code>.</p>

<p><a href="http://travis-ci.org/aheckmann/sliced"><img alt="Build Status" src="https://secure.travis-ci.org/aheckmann/sliced.png" /></a></p>

<p>Example output from <a href="https://github.com/bestiejs/benchmark.js">benchmark.js</a></p>

<p>Array.prototype.slice.call x 1,320,205 ops/sec ±2.35% (92 runs sampled)
    [].slice.call x 1,314,605 ops/sec ±1.60% (95 runs sampled)
    cached slice.call x 10,468,380 ops/sec ±1.45% (95 runs sampled)
    sliced x 16,608,237 ops/sec ±1.40% (92 runs sampled)
    fastest is sliced</p>

<p>Array.prototype.slice.call(arguments, 1) x 1,383,584 ops/sec ±1.73% (97 runs sampled)
    [].slice.call(arguments, 1) x 1,494,735 ops/sec ±1.33% (95 runs sampled)
    cached slice.call(arguments, 1) x 10,085,270 ops/sec ±1.51% (97 runs sampled)
    sliced(arguments, 1) x 16,620,480 ops/sec ±1.29% (95 runs sampled)
    fastest is sliced(arguments, 1)</p>

<p>Array.prototype.slice.call(arguments, -1) x 1,303,262 ops/sec ±1.62% (94 runs sampled)
    [].slice.call(arguments, -1) x 1,325,615 ops/sec ±1.36% (97 runs sampled)
    cached slice.call(arguments, -1) x 9,673,603 ops/sec ±1.70% (96 runs sampled)
    sliced(arguments, -1) x 16,384,575 ops/sec ±1.06% (91 runs sampled)
    fastest is sliced(arguments, -1)</p>

<p>Array.prototype.slice.call(arguments, -2, -10) x 1,404,390 ops/sec ±1.61% (95 runs sampled)
    [].slice.call(arguments, -2, -10) x 1,514,367 ops/sec ±1.21% (96 runs sampled)
    cached slice.call(arguments, -2, -10) x 9,836,017 ops/sec ±1.21% (95 runs sampled)
    sliced(arguments, -2, -10) x 18,544,882 ops/sec ±1.30% (91 runs sampled)
    fastest is sliced(arguments, -2, -10)</p>

<p>Array.prototype.slice.call(arguments, -2, -1) x 1,458,604 ops/sec ±1.41% (97 runs sampled)
    [].slice.call(arguments, -2, -1) x 1,536,547 ops/sec ±1.63% (99 runs sampled)
    cached slice.call(arguments, -2, -1) x 10,060,633 ops/sec ±1.37% (96 runs sampled)
    sliced(arguments, -2, -1) x 18,608,712 ops/sec ±1.08% (93 runs sampled)
    fastest is sliced(arguments, -2, -1)</p>

<p><em>Benchmark  <a href="https://github.com/aheckmann/sliced/blob/master/bench.js">source</a>.</em></p>

<h2 id="usage">Usage</h2>

<p><code class="prettyprint">sliced</code> accepts the same arguments as <code class="prettyprint">Array#slice</code> so you can easily swap it out.</p>
<pre class="highlight javascript"><code><span class="kd">function</span> <span class="nx">zing</span> <span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">slow</span> <span class="o">=</span> <span class="p">[].</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">slice</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>

  <span class="kd">var</span> <span class="nx">slow</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">slice</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
  <span class="c1">// etc</span>
<span class="p">}</span>
</code></pre>

<h2 id="install">install</h2>

<p>npm install sliced</p>

<p><a href="https://github.com/aheckmann/sliced/blob/master/LICENSE">LICENSE</a></p>
