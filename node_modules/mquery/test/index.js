var mquery=require("../"),assert=require("assert");describe("mquery",function(){function e(e){return function(){it("accepts 2 args",function(){var t=mquery()[e]("count",3),n={};n["$"+e]=3,assert.deepEqual(t._conditions.count,n)}),it("uses previously set `where` path if 1 arg passed",function(){var t=mquery().where("count")[e](3),n={};n["$"+e]=3,assert.deepEqual(t._conditions.count,n)}),it("throws if 1 arg was passed but no previous `where` was used",function(){assert["throws"](function(){mquery()[e](3)},/must be used after where/)}),it("is chainable",function(){var t=mquery().where("count")[e](3).where("x",8),n={x:8,count:{}};n.count["$"+e]=3,assert.deepEqual(t._conditions,n)}),it("overwrites previous value",function(){var t=mquery().where("count")[e](3)[e](8),n={};n["$"+e]=8,assert.deepEqual(t._conditions.count,n)})}}function t(e,t){describe(e,function(){it("sets the "+e+" option",function(){var n=mquery()[e](2),i=t.name||e;assert.equal(2,n.options[i])}),it("is chainable",function(){var t=mquery();assert.equal(t[e](3),t)}),t.distinct||i(e),t.count||s("count",e)})}function n(e){describe("validates its option",function(){it("sort",function(t){assert.doesNotThrow(function(){mquery().sort("x")[e]()}),t()}),it("select",function(t){assert.doesNotThrow(function(){mquery().select("x")[e]()}),t()}),it("limit",function(t){assert["throws"](function(){mquery().limit(3)[e]()},new RegExp("limit cannot be used with "+e)),t()}),it("skip",function(t){assert["throws"](function(){mquery().skip(3)[e]()},new RegExp("skip cannot be used with "+e)),t()}),it("batchSize",function(t){assert["throws"](function(){mquery({},{batchSize:3})[e]()},new RegExp("batchSize cannot be used with "+e)),t()}),it("maxScan",function(t){assert["throws"](function(){mquery().maxScan(300)[e]()},new RegExp("maxScan cannot be used with "+e)),t()}),it("snapshot",function(t){assert["throws"](function(){mquery().snapshot()[e]()},new RegExp("snapshot cannot be used with "+e)),t()}),it("hint",function(t){assert["throws"](function(){mquery().hint({x:1})[e]()},new RegExp("hint cannot be used with "+e)),t()}),it("tailable",function(t){assert["throws"](function(){mquery().tailable()[e]()},new RegExp("tailable cannot be used with "+e)),t()}),it("comment",function(t){assert["throws"](function(){mquery().comment("mquery")[e]()},new RegExp("comment cannot be used with "+e)),t()})})}function i(e){it("cannot be used with distinct()",function(t){assert["throws"](function(){mquery().distinct("name")[e](4)},new RegExp(e+" cannot be used with distinct")),t()})}function s(e,t){it("cannot be used with "+e+"()",function(n){assert["throws"](function(){mquery()[e]()[t](4)},new RegExp(t+" cannot be used with "+e)),n()})}var r;before(function(e){require("./env").getCollection(function(t,n){assert.ifError(t),r=n,e()})}),after(function(e){require("./env").dropCollection(e)}),describe("mquery",function(){it("is a function",function(){assert.equal("function",typeof mquery)}),it("creates instances with the `new` keyword",function(){assert.ok(mquery()instanceof mquery)}),describe("defaults",function(){it("are set",function(){var e=mquery();assert.strictEqual(void 0,e.op),assert.deepEqual({},e.options)})}),describe("criteria",function(){it("if collection-like is used as collection",function(){var e=mquery(r);assert.equal(r,e._collection.collection)}),it("non-collection-like is used as criteria",function(){var e=mquery({works:!0});assert.ok(!e._collection),assert.deepEqual({works:!0},e._conditions)})}),describe("options",function(){it("are merged when passed",function(){var e=mquery(r,{safe:!0});assert.deepEqual({safe:!0},e.options);var e=mquery({name:"mquery"},{safe:!0});assert.deepEqual({safe:!0},e.options)})})}),describe("toConstructor",function(){it("creates subclasses of mquery",function(){var e={safe:{w:"majority"},readPreference:"p"},t={name:"test",count:{$gt:101}},n={name:1,count:0},i={$set:{x:!0}},s="street",r=mquery().setOptions(e);r.where(t),r.select(n),r.update(i),r.where(s),r.find();var a=r.toConstructor(),o=a();assert.ok(o instanceof mquery),assert.deepEqual(e,o.options),assert.deepEqual(t,o._conditions),assert.deepEqual(n,o._fields),assert.deepEqual(i,o._update),assert.equal(s,o._path),assert.equal("find",o.op)})}),describe("setOptions",function(){it("calls associated methods",function(){var e=mquery();assert.equal(e._collection,null),e.setOptions({collection:r}),assert.equal(e._collection.collection,r)}),it("directly sets option when no method exists",function(){var e=mquery();assert.equal(e.options.woot,null),e.setOptions({woot:"yay"}),assert.equal(e.options.woot,"yay")}),it("is chainable",function(){var e=mquery(),t=e.setOptions();assert.equal(e,t);var t=e.setOptions({x:1});assert.equal(e,t)})}),describe("collection",function(){it("sets the _collection",function(){var e=mquery();e.collection(r),assert.equal(e._collection.collection,r)}),it("is chainable",function(){var e=mquery(),t=e.collection(r);assert.equal(e,t)})}),describe("$where",function(){it("sets the $where condition",function(){function e(){}var t=mquery();t.$where(e),assert.ok(e===t._conditions.$where)}),it("is chainable",function(){var e=mquery(),t=e.$where("x");assert.equal(e,t)})}),describe("where",function(){it("without arguments",function(){var e=mquery();e.where(),assert.deepEqual({},e._conditions)}),it("with non-string/object argument",function(){var e=mquery();assert["throws"](function(){e.where([])},/path must be a string or object/)}),describe("with one argument",function(){it("that is an object",function(){var e=mquery();e.where({name:"flawed"}),assert.strictEqual(e._conditions.name,"flawed")}),it("that is a query",function(){var e=mquery({name:"first"}),t=mquery({name:"changed"});e.where(t),assert.strictEqual(e._conditions.name,"changed")}),it("that is a string",function(){var e=mquery();e.where("name"),assert.equal("name",e._path),assert.strictEqual(e._conditions.name,void 0)})}),it("with two arguments",function(){var e=mquery();e.where("name","The Great Pumpkin"),assert.equal("name",e._path),assert.strictEqual(e._conditions.name,"The Great Pumpkin")}),it("is chainable",function(){var e=mquery(),t=e.where("x","y");assert.equal(e,t);var t=e.where();assert.equal(e,t)})}),describe("equals",function(){it("must be called after where()",function(){var e=mquery();assert["throws"](function(){e.equals()},/must be used after where/)}),it("sets value of path set with where()",function(){var e=mquery();e.where("age").equals(1e3),assert.deepEqual({age:1e3},e._conditions)}),it("is chainable",function(){var e=mquery(),t=e.where("x").equals(3);assert.equal(e,t)})}),describe("eq",function(){it("is alias of equals",function(){var e=mquery();e.where("age").eq(1e3),assert.deepEqual({age:1e3},e._conditions)})}),describe("or",function(){it("pushes onto the internal $or condition",function(){var e=mquery();e.or({"Nightmare Before Christmas":!0}),assert.deepEqual([{"Nightmare Before Christmas":!0}],e._conditions.$or)}),it("allows passing arrays",function(){var e=mquery(),t=[{"Nightmare Before Christmas":!0},{x:1}];e.or(t),assert.deepEqual(t,e._conditions.$or)}),it("allows calling multiple times",function(){var e=mquery(),t=[{looper:!0},{x:1}];e.or(t),e.or({y:1}),e.or([{w:"oo"},{z:"oo"}]),assert.deepEqual([{looper:!0},{x:1},{y:1},{w:"oo"},{z:"oo"}],e._conditions.$or)}),it("is chainable",function(){var e=mquery();e.or({o:"k"}).where("name","table"),assert.deepEqual({name:"table",$or:[{o:"k"}]},e._conditions)})}),describe("nor",function(){it("pushes onto the internal $nor condition",function(){var e=mquery();e.nor({"Nightmare Before Christmas":!0}),assert.deepEqual([{"Nightmare Before Christmas":!0}],e._conditions.$nor)}),it("allows passing arrays",function(){var e=mquery(),t=[{"Nightmare Before Christmas":!0},{x:1}];e.nor(t),assert.deepEqual(t,e._conditions.$nor)}),it("allows calling multiple times",function(){var e=mquery(),t=[{looper:!0},{x:1}];e.nor(t),e.nor({y:1}),e.nor([{w:"oo"},{z:"oo"}]),assert.deepEqual([{looper:!0},{x:1},{y:1},{w:"oo"},{z:"oo"}],e._conditions.$nor)}),it("is chainable",function(){var e=mquery();e.nor({o:"k"}).where("name","table"),assert.deepEqual({name:"table",$nor:[{o:"k"}]},e._conditions)})}),describe("and",function(){it("pushes onto the internal $and condition",function(){var e=mquery();e.and({"Nightmare Before Christmas":!0}),assert.deepEqual([{"Nightmare Before Christmas":!0}],e._conditions.$and)}),it("allows passing arrays",function(){var e=mquery(),t=[{"Nightmare Before Christmas":!0},{x:1}];e.and(t),assert.deepEqual(t,e._conditions.$and)}),it("allows calling multiple times",function(){var e=mquery(),t=[{looper:!0},{x:1}];e.and(t),e.and({y:1}),e.and([{w:"oo"},{z:"oo"}]),assert.deepEqual([{looper:!0},{x:1},{y:1},{w:"oo"},{z:"oo"}],e._conditions.$and)}),it("is chainable",function(){var e=mquery();e.and({o:"k"}).where("name","table"),assert.deepEqual({name:"table",$and:[{o:"k"}]},e._conditions)})}),"gt gte lt lte ne in nin regex size maxDistance minDistance".split(" ").forEach(function(t){describe(t,e(t))}),describe("mod",function(){describe("with 1 argument",function(){it("requires a previous where()",function(){assert["throws"](function(){mquery().mod([30,10])},/must be used after where/)}),it("works",function(){var e=mquery().where("madmen").mod([10,20]);assert.deepEqual(e._conditions,{madmen:{$mod:[10,20]}})})}),describe("with 2 arguments and second is non-Array",function(){it("requires a previous where()",function(){assert["throws"](function(){mquery().mod("x",10)},/must be used after where/)}),it("works",function(){var e=mquery().where("madmen").mod(10,20);assert.deepEqual(e._conditions,{madmen:{$mod:[10,20]}})})}),it("with 2 arguments and second is an array",function(){var e=mquery().mod("madmen",[10,20]);assert.deepEqual(e._conditions,{madmen:{$mod:[10,20]}})}),it("with 3 arguments",function(){var e=mquery().mod("madmen",10,20);assert.deepEqual(e._conditions,{madmen:{$mod:[10,20]}})}),it("is chainable",function(){var e=mquery().mod("madmen",10,20).where("x",8),t={madmen:{$mod:[10,20]},x:8};assert.deepEqual(e._conditions,t)})}),describe("exists",function(){it("with 0 args",function(){it("throws if not used after where()",function(){assert["throws"](function(){mquery().exists()},/must be used after where/)}),it("works",function(){var e=mquery().where("name").exists(),t={name:{$exists:!0}};assert.deepEqual(e._conditions,t)})}),describe("with 1 arg",function(){describe("that is boolean",function(){it("throws if not used after where()",function(){assert["throws"](function(){mquery().exists()},/must be used after where/)}),it("works",function(){var e=mquery().exists("name",!1),t={name:{$exists:!1}};assert.deepEqual(e._conditions,t)})}),describe("that is not boolean",function(){it("sets the value to `true`",function(){var e=mquery().where("name").exists("yummy"),t={yummy:{$exists:!0}};assert.deepEqual(e._conditions,t)})})}),describe("with 2 args",function(){it("works",function(){var e=mquery().exists("yummy",!1),t={yummy:{$exists:!1}};assert.deepEqual(e._conditions,t)})}),it("is chainable",function(){var e=mquery().where("name").exists().find({x:1}),t={name:{$exists:!0},x:1};assert.deepEqual(e._conditions,t)})}),describe("elemMatch",function(){describe("with null/undefined first argument",function(){assert["throws"](function(){mquery().elemMatch()},/Invalid argument/),assert["throws"](function(){mquery().elemMatch(null)},/Invalid argument/),assert.doesNotThrow(function(){mquery().elemMatch("",{})})}),describe("with 1 argument",function(){it("throws if not a function or object",function(){assert["throws"](function(){mquery().elemMatch([])},/Invalid argument/)}),describe("that is an object",function(){it("throws if no previous `where` was used",function(){assert["throws"](function(){mquery().elemMatch({})},/must be used after where/)}),it("works",function(){var e=mquery().where("comment").elemMatch({author:"joe",votes:{$gte:3}});assert.deepEqual({comment:{$elemMatch:{author:"joe",votes:{$gte:3}}}},e._conditions)})}),describe("that is a function",function(){it("throws if no previous `where` was used",function(){assert["throws"](function(){mquery().elemMatch(function(){})},/must be used after where/)}),it("works",function(){var e=mquery().where("comment").elemMatch(function(e){e.where({author:"joe",votes:{$gte:3}})});assert.deepEqual({comment:{$elemMatch:{author:"joe",votes:{$gte:3}}}},e._conditions)})})}),describe("with 2 arguments",function(){describe("and the 2nd is an object",function(){it("works",function(){var e=mquery().elemMatch("comment",{author:"joe",votes:{$gte:3}});assert.deepEqual({comment:{$elemMatch:{author:"joe",votes:{$gte:3}}}},e._conditions)})}),describe("and the 2nd is a function",function(){it("works",function(){var e=mquery().elemMatch("comment",function(e){e.where({author:"joe",votes:{$gte:3}})});assert.deepEqual({comment:{$elemMatch:{author:"joe",votes:{$gte:3}}}},e._conditions)})}),it("and the 2nd is not a function or object",function(){assert["throws"](function(){mquery().elemMatch("comment",[])},/Invalid argument/)})})}),describe("within",function(){it("is chainable",function(){var e=mquery();assert.equal(e.where("a").within(),e)}),describe("when called with arguments",function(){it("must follow where()",function(){assert["throws"](function(){mquery().within([])},/must be used after where/)}),describe("of length 1",function(){it("throws if not a recognized shape",function(){assert["throws"](function(){mquery().where("loc").within({})},/Invalid argument/),assert["throws"](function(){mquery().where("loc").within(null)},/Invalid argument/)}),it("delegates to circle when center exists",function(){var e=mquery().where("loc").within({center:[10,10],radius:3});assert.deepEqual({$geoWithin:{$center:[[10,10],3]}},e._conditions.loc)}),it("delegates to box when exists",function(){var e=mquery().where("loc").within({box:[[10,10],[11,14]]});assert.deepEqual({$geoWithin:{$box:[[10,10],[11,14]]}},e._conditions.loc)}),it("delegates to polygon when exists",function(){var e=mquery().where("loc").within({polygon:[[10,10],[11,14],[10,9]]});assert.deepEqual({$geoWithin:{$polygon:[[10,10],[11,14],[10,9]]}},e._conditions.loc)}),it("delegates to geometry when exists",function(){var e=mquery().where("loc").within({type:"Polygon",coordinates:[[10,10],[11,14],[10,9]]});assert.deepEqual({$geoWithin:{$geometry:{type:"Polygon",coordinates:[[10,10],[11,14],[10,9]]}}},e._conditions.loc)})}),describe("of length 2",function(){it("delegates to box()",function(){var e=mquery().where("loc").within([1,2],[2,5]);assert.deepEqual(e._conditions.loc,{$geoWithin:{$box:[[1,2],[2,5]]}})})}),describe("of length > 2",function(){it("delegates to polygon()",function(){var e=mquery().where("loc").within([1,2],[2,5],[2,4],[1,3]);assert.deepEqual(e._conditions.loc,{$geoWithin:{$polygon:[[1,2],[2,5],[2,4],[1,3]]}})})})})}),describe("geoWithin",function(){before(function(){mquery.use$geoWithin=!1}),after(function(){mquery.use$geoWithin=!0}),describe("when called with arguments",function(){describe("of length 1",function(){it("delegates to circle when center exists",function(){var e=mquery().where("loc").within({center:[10,10],radius:3});assert.deepEqual({$within:{$center:[[10,10],3]}},e._conditions.loc)}),it("delegates to box when exists",function(){var e=mquery().where("loc").within({box:[[10,10],[11,14]]});assert.deepEqual({$within:{$box:[[10,10],[11,14]]}},e._conditions.loc)}),it("delegates to polygon when exists",function(){var e=mquery().where("loc").within({polygon:[[10,10],[11,14],[10,9]]});assert.deepEqual({$within:{$polygon:[[10,10],[11,14],[10,9]]}},e._conditions.loc)}),it("delegates to geometry when exists",function(){var e=mquery().where("loc").within({type:"Polygon",coordinates:[[10,10],[11,14],[10,9]]});assert.deepEqual({$within:{$geometry:{type:"Polygon",coordinates:[[10,10],[11,14],[10,9]]}}},e._conditions.loc)})}),describe("of length 2",function(){it("delegates to box()",function(){var e=mquery().where("loc").within([1,2],[2,5]);assert.deepEqual(e._conditions.loc,{$within:{$box:[[1,2],[2,5]]}})})}),describe("of length > 2",function(){it("delegates to polygon()",function(){var e=mquery().where("loc").within([1,2],[2,5],[2,4],[1,3]);assert.deepEqual(e._conditions.loc,{$within:{$polygon:[[1,2],[2,5],[2,4],[1,3]]}})})})})}),describe("box",function(){describe("with 1 argument",function(){it("throws",function(){assert["throws"](function(){mquery().box("sometihng")},/Invalid argument/)})}),describe("with > 3 arguments",function(){it("throws",function(){assert["throws"](function(){mquery().box(1,2,3,4)},/Invalid argument/)})}),describe("with 2 arguments",function(){it("throws if not used after where()",function(){assert["throws"](function(){mquery().box([],[])},/must be used after where/)}),it("works",function(){var e=mquery().where("loc").box([1,2],[3,4]);assert.deepEqual(e._conditions.loc,{$geoWithin:{$box:[[1,2],[3,4]]}})})}),describe("with 3 arguments",function(){it("works",function(){var e=mquery().box("loc",[1,2],[3,4]);assert.deepEqual(e._conditions.loc,{$geoWithin:{$box:[[1,2],[3,4]]}})})})}),describe("polygon",function(){describe("when first argument is not a string",function(){it("throws if not used after where()",function(){assert["throws"](function(){mquery().polygon({})},/must be used after where/),assert.doesNotThrow(function(){mquery().where("loc").polygon([1,2],[2,3],[3,6])})}),it("assigns arguments to within polygon condition",function(){var e=mquery().where("loc").polygon([1,2],[2,3],[3,6]);assert.deepEqual(e._conditions,{loc:{$geoWithin:{$polygon:[[1,2],[2,3],[3,6]]}}})})}),describe("when first arg is a string",function(){it("assigns remaining arguments to within polygon condition",function(){var e=mquery().polygon("loc",[1,2],[2,3],[3,6]);assert.deepEqual(e._conditions,{loc:{$geoWithin:{$polygon:[[1,2],[2,3],[3,6]]}}})})})}),describe("circle",function(){describe("with one arg",function(){it("must follow where()",function(){assert["throws"](function(){mquery().circle("x")},/must be used after where/),assert.doesNotThrow(function(){mquery().where("loc").circle({center:[0,0],radius:3})})}),it("works",function(){var e=mquery().where("loc").circle({center:[0,0],radius:3});assert.deepEqual(e._conditions,{loc:{$geoWithin:{$center:[[0,0],3]}}})})}),describe("with 3 args",function(){it("throws",function(){assert["throws"](function(){mquery().where("loc").circle(1,2,3)},/Invalid argument/)})}),describe("requires radius and center",function(){assert["throws"](function(){mquery().circle("loc",{center:1})},/center and radius are required/),assert["throws"](function(){mquery().circle("loc",{radius:1})},/center and radius are required/),assert.doesNotThrow(function(){mquery().circle("loc",{center:[1,2],radius:1})})})}),describe("geometry",function(){var e={type:"Point",coordinates:[[0,0],[1,1]]};it("must be called after within or intersects",function(t){assert["throws"](function(){mquery().where("a").geometry(e)},/must come after/),assert.doesNotThrow(function(){mquery().where("a").within().geometry(e)}),assert.doesNotThrow(function(){mquery().where("a").intersects().geometry(e)}),t()}),describe("when called with one argument",function(){describe("after within()",function(){it("and arg quacks like geoJSON",function(t){var n=mquery().where("a").within().geometry(e);assert.deepEqual({a:{$geoWithin:{$geometry:e}}},n._conditions),t()})}),describe("after intersects()",function(){it("and arg quacks like geoJSON",function(t){var n=mquery().where("a").intersects().geometry(e);assert.deepEqual({a:{$geoIntersects:{$geometry:e}}},n._conditions),t()})}),it("and arg does not quack like geoJSON",function(e){assert["throws"](function(){mquery().where("b").within().geometry({type:1,coordinates:2})},/Invalid argument/),e()})}),describe("when called with zero arguments",function(){it("throws",function(e){assert["throws"](function(){mquery().where("a").within().geometry()},/Invalid argument/),e()})}),describe("when called with more than one arguments",function(){it("throws",function(e){assert["throws"](function(){mquery().where("a").within().geometry({type:"a",coordinates:[]},2)},/Invalid argument/),e()})})}),describe("intersects",function(){it("must be used after where()",function(e){var t=mquery();assert["throws"](function(){t.intersects()},/must be used after where/),e()}),it('sets geo comparison to "$intersects"',function(e){var t=mquery().where("a").intersects();assert.equal("$geoIntersects",t._geoComparison),e()}),it("is chainable",function(){var e=mquery();assert.equal(e.where("a").intersects(),e)}),it("calls geometry if argument quacks like geojson",function(e){var t=mquery(),n={type:"LineString",coordinates:[[0,1],[3,40]]},i=!1;t.geometry=function(e){i=!0,assert.deepEqual(n,e)},t.where("a").intersects(n),assert.ok(i),e()}),it("throws if argument is not geometry-like",function(e){var t=mquery().where("a");assert["throws"](function(){t.intersects(null)},/Invalid argument/),assert["throws"](function(){t.intersects(void 0)},/Invalid argument/),assert["throws"](function(){t.intersects(!1)},/Invalid argument/),assert["throws"](function(){t.intersects({})},/Invalid argument/),assert["throws"](function(){t.intersects([])},/Invalid argument/),assert["throws"](function(){t.intersects(function(){})},/Invalid argument/),assert["throws"](function(){t.intersects(NaN)},/Invalid argument/),e()})}),describe("near",function(){describe("with 0 args",function(){it("is compatible with geometry()",function(e){var t=mquery().where("x").near().geometry({type:"Point",coordinates:[180,11]});assert.deepEqual({$near:{$geometry:{type:"Point",coordinates:[180,11]}}},t._conditions.x),e()})}),describe("with 1 arg",function(){it("throws if not used after where()",function(){assert["throws"](function(){mquery().near(1)},/must be used after where/)}),it("does not throw if used after where()",function(){assert.doesNotThrow(function(){mquery().where("loc").near({center:[1,1]})})})}),describe("with > 2 args",function(){it("throws",function(){assert["throws"](function(){mquery().near(1,2,3)},/Invalid argument/)})}),it("creates $geometry args for GeoJSON",function(){var e=mquery().where("loc").near({center:{type:"Point",coordinates:[10,10]}});assert.deepEqual({$near:{$geometry:{type:"Point",coordinates:[10,10]}}},e._conditions.loc)}),it("expects `center`",function(){assert["throws"](function(){mquery().near("loc",{maxDistance:3})},/center is required/),assert.doesNotThrow(function(){mquery().near("loc",{center:[3,4]})})}),it("accepts spherical conditions",function(){var e=mquery().where("loc").near({center:[1,2],spherical:!0});assert.deepEqual(e._conditions,{loc:{$nearSphere:[1,2]}})}),it("is non-spherical by default",function(){var e=mquery().where("loc").near({center:[1,2]});assert.deepEqual(e._conditions,{loc:{$near:[1,2]}})}),it("supports maxDistance",function(){var e=mquery().where("loc").near({center:[1,2],maxDistance:4});assert.deepEqual(e._conditions,{loc:{$near:[1,2],$maxDistance:4}})}),it("supports minDistance",function(){var e=mquery().where("loc").near({center:[1,2],minDistance:4});assert.deepEqual(e._conditions,{loc:{$near:[1,2],$minDistance:4}})}),it("is chainable",function(){var e=mquery().where("loc").near({center:[1,2],maxDistance:4}).find({x:1});assert.deepEqual(e._conditions,{loc:{$near:[1,2],$maxDistance:4},x:1})}),describe("supports passing GeoJSON, gh-13",function(){it("with center",function(){var e=mquery().where("loc").near({center:{type:"Point",coordinates:[1,1]},maxDistance:2}),t={loc:{$near:{$geometry:{type:"Point",coordinates:[1,1]},$maxDistance:2}}};assert.deepEqual(e._conditions,t)})})}),describe("select",function(){describe("with 0 args",function(){it("is chainable",function(){var e=mquery();assert.equal(e,e.select())})}),it("accepts an object",function(){var e={x:1,y:1},t=mquery().select(e);assert.deepEqual(t._fields,e)}),it("accepts a string",function(){var e="x -y",t=mquery().select(e);assert.deepEqual(t._fields,{x:1,y:0})}),it("does not accept an array",function(e){assert["throws"](function(){var e=["x","-y"];mquery().select(e)},/Invalid select/),e()}),it("merges previous arguments",function(){var e={x:1,y:0,a:1},t=mquery().select(e);t.select("z -u w").select({x:0}),assert.deepEqual(t._fields,{x:0,y:0,z:1,u:0,w:1,a:1})}),it("rejects non-string, object, arrays",function(){assert["throws"](function(){mquery().select(function(){})},/Invalid select\(\) argument/)}),it("accepts arguments objects",function(){function e(){t.select(arguments),assert.deepEqual(t._fields,{x:1,y:0})}var t=mquery();e("x","-y")}),i("select")}),describe("selected",function(){it("returns true when fields have been selected",function(e){var t=mquery().select({name:1});assert.ok(t.selected());var t=mquery().select("name");assert.ok(t.selected()),e()}),it("returns false when no fields have been selected",function(e){var t=mquery();assert.strictEqual(!1,t.selected()),e()})}),describe("selectedInclusively",function(){describe("returns false",function(){it("when no fields have been selected",function(e){assert.strictEqual(!1,mquery().selectedInclusively()),assert.equal(!1,mquery().select({}).selectedInclusively()),e()}),it("when any fields have been excluded",function(e){assert.strictEqual(!1,mquery().select("-name").selectedInclusively()),assert.strictEqual(!1,mquery().select({name:0}).selectedInclusively()),assert.strictEqual(!1,mquery().select("name bio -_id").selectedInclusively()),assert.strictEqual(!1,mquery().select({name:1,_id:0}).selectedInclusively()),e()}),it("when using $meta",function(e){assert.strictEqual(!1,mquery().select({name:{$meta:"textScore"}}).selectedInclusively()),e()})}),describe("returns true",function(){it("when fields have been included",function(e){assert.equal(!0,mquery().select("name").selectedInclusively()),assert.equal(!0,mquery().select({name:1}).selectedInclusively()),e()})})}),describe("selectedExclusively",function(){describe("returns false",function(){it("when no fields have been selected",function(e){assert.equal(!1,mquery().selectedExclusively()),assert.equal(!1,mquery().select({}).selectedExclusively()),e()}),it("when fields have only been included",function(e){assert.equal(!1,mquery().select("name").selectedExclusively()),assert.equal(!1,mquery().select({name:1}).selectedExclusively()),e()})}),describe("returns true",function(){it("when any field has been excluded",function(e){assert.equal(!0,mquery().select("-name").selectedExclusively()),assert.equal(!0,mquery().select({name:0}).selectedExclusively()),assert.equal(!0,mquery().select("-_id").selectedExclusively()),assert.strictEqual(!0,mquery().select("name bio -_id").selectedExclusively()),assert.strictEqual(!0,mquery().select({name:1,_id:0}).selectedExclusively()),e()})})}),describe("slice",function(){describe("with 0 args",function(){it("is chainable",function(){var e=mquery();assert.equal(e,e.slice())}),it("is a noop",function(){var e=mquery().slice();assert.deepEqual(e._fields,void 0)})}),describe("with 1 arg",function(){it("throws if not called after where()",function(){assert["throws"](function(){mquery().slice(1)},/must be used after where/),assert.doesNotThrow(function(){mquery().where("a").slice(1)})}),it("that is a number",function(){var e=mquery();e.where("collection").slice(5),assert.deepEqual(e._fields,{collection:{$slice:5}})}),it("that is an array",function(){var e=mquery();e.where("collection").slice([5,10]),assert.deepEqual(e._fields,{collection:{$slice:[5,10]}})}),it("that is an object",function(){var e=mquery();e.slice({collection:[5,10]}),assert.deepEqual(e._fields,{collection:{$slice:[5,10]}})})}),describe("with 2 args",function(){describe("and first is a number",function(){it("throws if not called after where",function(){assert["throws"](function(){mquery().slice(2,3)},/must be used after where/)}),it("does not throw if used after where",function(){var e=mquery();e.where("collection").slice(2,3),assert.deepEqual(e._fields,{collection:{$slice:[2,3]}})})}),it("and first is not a number",function(){var e=mquery().slice("collection",[-5,2]);assert.deepEqual(e._fields,{collection:{$slice:[-5,2]}})})}),describe("with 3 args",function(){it("works",function(){var e=mquery();e.slice("collection",14,10),assert.deepEqual(e._fields,{collection:{$slice:[14,10]}})})}),i("slice"),s("count","slice")}),describe("sort",function(){describe("with 0 args",function(){it("chains",function(){var e=mquery();assert.equal(e,e.sort())}),it("has no affect",function(){var e=mquery();assert.equal(e.options.sort,void 0)})}),it("works",function(){var e=mquery();e.sort("a -c b"),assert.deepEqual(e.options.sort,{a:1,b:1,c:-1}),e=mquery(),e.sort({a:1,c:-1,b:"asc",e:"descending",f:"ascending"}),assert.deepEqual(e.options.sort,{a:1,c:-1,b:1,e:-1,f:1}),e=mquery();var t=void 0;t=void 0;try{e.sort("a",1,"c",-1,"b",1)}catch(n){t=n}assert.ok(t,"uh oh. no error was thrown"),assert.equal(t.message,"Invalid sort() argument. Must be a string, object, or array.")}),it("handles $meta sort options",function(){var e=mquery();e.sort({score:{$meta:"textScore"}}),assert.deepEqual(e.options.sort,{score:{$meta:"textScore"}})}),it("array syntax",function(){var e=mquery();e.sort([["field",1],["test",-1]]),assert.deepEqual(e.options.sort,[["field",1],["test",-1]])}),it("throws with mixed array/object syntax",function(){var e=mquery();assert["throws"](function(){e.sort({field:1}).sort([["test",-1]])},/Can't mix sort syntaxes/),assert["throws"](function(){e.sort([["field",1]]).sort({test:1})},/Can't mix sort syntaxes/)})});var a={limit:{distinct:!1,count:!0},skip:{distinct:!1,count:!0},maxScan:{distinct:!1,count:!1},batchSize:{distinct:!1,count:!1},maxTime:{distinct:!0,count:!0,name:"maxTimeMS"},comment:{distinct:!1,count:!1}};Object.keys(a).forEach(function(e){t(e,a[e])}),describe("snapshot",function(){it("works",function(){var e=mquery();e.snapshot(),assert.equal(!0,e.options.snapshot);var e=mquery();e.snapshot(!0),assert.equal(!0,e.options.snapshot);var e=mquery();e.snapshot(!1),assert.equal(!1,e.options.snapshot)}),i("snapshot"),s("count","snapshot")}),describe("hint",function(){it("accepts an object",function(){var e=mquery();e.hint({a:1,b:-1}),assert.deepEqual(e.options.hint,{a:1,b:-1})}),it("rejects everything else",function(){assert["throws"](function(){mquery().hint("c")},/Invalid hint./),assert["throws"](function(){mquery().hint(["c"])},/Invalid hint./),assert["throws"](function(){mquery().hint(1)},/Invalid hint./)}),describe("does not have side affects",function(){it("on invalid arg",function(){var e=mquery();try{e.hint(1)}catch(t){}assert.equal(void 0,e.options.hint)}),it("on missing arg",function(){var e=mquery().hint();assert.equal(void 0,e.options.hint)})}),i("hint")}),describe("slaveOk",function(){it("works",function(){var e=mquery();e.slaveOk(),assert.equal(!0,e.options.slaveOk);var e=mquery();e.slaveOk(!0),assert.equal(!0,e.options.slaveOk);var e=mquery();e.slaveOk(!1),assert.equal(!1,e.options.slaveOk)})}),describe("read",function(){it("sets associated readPreference option",function(){var e=mquery();e.read("p"),assert.equal("primary",e.options.readPreference)}),it("is chainable",function(){var e=mquery();assert.equal(e,e.read("sp"))})}),describe("tailable",function(){it("works",function(){var e=mquery();e.tailable(),assert.equal(!0,e.options.tailable);var e=mquery();e.tailable(!0),assert.equal(!0,e.options.tailable);var e=mquery();e.tailable(!1),assert.equal(!1,e.options.tailable)}),it("is chainable",function(){var e=mquery();assert.equal(e,e.tailable())}),i("tailable"),s("count","tailable")}),describe("merge",function(){describe("with falsy arg",function(){it("returns itself",function(){var e=mquery();assert.equal(e,e.merge()),assert.equal(e,e.merge(null)),assert.equal(e,e.merge(0))})}),describe("with an argument",function(){describe("that is not a query or plain object",function(){it("throws",function(){assert["throws"](function(){mquery().merge([])},/Invalid argument/),assert["throws"](function(){mquery().merge("merge")},/Invalid argument/),assert.doesNotThrow(function(){mquery().merge({})},/Invalid argument/)})}),describe("that is a query",function(){it("merges conditions, field selection, and options",function(){var e=mquery({x:"hi"},{select:"x y",another:!0}),t=mquery().merge(e);assert.deepEqual(t._conditions,e._conditions),assert.deepEqual(t._fields,e._fields),assert.deepEqual(t.options,e.options)}),it("clones update arguments",function(e){var t={$set:{iTerm:!0}},n=mquery().update(t),i=mquery().merge(n);n.update({$set:{x:2}}),assert.notDeepEqual(n._update,i._update),e()}),it("is chainable",function(){var e=mquery({x:"hi"}),t=mquery();assert.equal(t,t.merge(e))})}),describe("that is an object",function(){it("merges",function(){var e={x:"hi"},t=mquery().merge(e);assert.deepEqual(t._conditions,{x:"hi"})}),it("clones update arguments",function(e){var t={$set:{iTerm:!0}},n=mquery().update(t),i=mquery().merge(t);
n.update({$set:{x:2}}),assert.notDeepEqual(n._update,i._update),e()}),it("is chainable",function(){var e={x:"hi"},t=mquery();assert.equal(t,t.merge(e))})})})}),describe("find",function(){describe("with no callback",function(){it("does not execute",function(){var e=mquery();assert.doesNotThrow(function(){e.find()}),assert.doesNotThrow(function(){e.find({x:1})})})}),it("is chainable",function(){var e=mquery().find({x:1}).find().find({y:2});assert.deepEqual(e._conditions,{x:1,y:2})}),it("merges other queries",function(){var e=mquery({name:"mquery"});e.tailable(),e.select("_id");var t=mquery().find(e);assert.deepEqual(t._conditions,e._conditions),assert.deepEqual(t.options,e.options),assert.deepEqual(t._fields,e._fields)}),describe("executes",function(){before(function(e){r.insert({name:"mquery"},{safe:!0},e)}),after(function(e){r.remove({name:"mquery"},e)}),it("when criteria is passed with a callback",function(e){mquery(r).find({name:"mquery"},function(t,n){assert.ifError(t),assert.equal(1,n.length),e()})}),it("when Query is passed with a callback",function(e){var t=mquery({name:"mquery"});mquery(r).find(t,function(t,n){assert.ifError(t),assert.equal(1,n.length),e()})}),it("when just a callback is passed",function(e){mquery({name:"mquery"}).collection(r).find(function(t,n){assert.ifError(t),assert.equal(1,n.length),e()})})})}),describe("findOne",function(){describe("with no callback",function(){it("does not execute",function(){var e=mquery();assert.doesNotThrow(function(){e.findOne()}),assert.doesNotThrow(function(){e.findOne({x:1})})})}),it("is chainable",function(){var e=mquery(),t=e.findOne({x:1}).findOne().findOne({y:2});assert.equal(e,t),assert.deepEqual(e._conditions,{x:1,y:2}),assert.equal("findOne",e.op)}),it("merges other queries",function(){var e=mquery({name:"mquery"});e.read("nearest"),e.select("_id");var t=mquery().findOne(e);assert.deepEqual(t._conditions,e._conditions),assert.deepEqual(t.options,e.options),assert.deepEqual(t._fields,e._fields)}),describe("executes",function(){before(function(e){r.insert({name:"mquery findone"},{safe:!0},e)}),after(function(e){r.remove({name:"mquery findone"},e)}),it("when criteria is passed with a callback",function(e){mquery(r).findOne({name:"mquery findone"},function(t,n){assert.ifError(t),assert.ok(n),assert.equal("mquery findone",n.name),e()})}),it("when Query is passed with a callback",function(e){var t=mquery(r).where({name:"mquery findone"});mquery(r).findOne(t,function(t,n){assert.ifError(t),assert.ok(n),assert.equal("mquery findone",n.name),e()})}),it("when just a callback is passed",function(e){mquery({name:"mquery findone"}).collection(r).findOne(function(t,n){assert.ifError(t),assert.ok(n),assert.equal("mquery findone",n.name),e()})})})}),describe("count",function(){describe("with no callback",function(){it("does not execute",function(){var e=mquery();assert.doesNotThrow(function(){e.count()}),assert.doesNotThrow(function(){e.count({x:1})})})}),it("is chainable",function(){var e=mquery(),t=e.count({x:1}).count().count({y:2});assert.equal(e,t),assert.deepEqual(e._conditions,{x:1,y:2}),assert.equal("count",e.op)}),it("merges other queries",function(){var e=mquery({name:"mquery"});e.read("nearest"),e.select("_id");var t=mquery().count(e);assert.deepEqual(t._conditions,e._conditions),assert.deepEqual(t.options,e.options),assert.deepEqual(t._fields,e._fields)}),describe("executes",function(){before(function(e){r.insert({name:"mquery count"},{safe:!0},e)}),after(function(e){r.remove({name:"mquery count"},e)}),it("when criteria is passed with a callback",function(e){mquery(r).count({name:"mquery count"},function(t,n){assert.ifError(t),assert.ok(n),assert.ok(1===n),e()})}),it("when Query is passed with a callback",function(e){var t=mquery({name:"mquery count"});mquery(r).count(t,function(t,n){assert.ifError(t),assert.ok(n),assert.ok(1===n),e()})}),it("when just a callback is passed",function(e){mquery({name:"mquery count"}).collection(r).count(function(t,n){assert.ifError(t),assert.ok(1===n),e()})})}),describe("validates its option",function(){it("sort",function(e){assert.doesNotThrow(function(){mquery().sort("x").count()}),e()}),it("select",function(e){assert["throws"](function(){mquery().select("x").count()},/field selection and slice cannot be used with count/),e()}),it("slice",function(e){assert["throws"](function(){mquery().where("x").slice(-3).count()},/field selection and slice cannot be used with count/),e()}),it("limit",function(e){assert.doesNotThrow(function(){mquery().limit(3).count()}),e()}),it("skip",function(e){assert.doesNotThrow(function(){mquery().skip(3).count()}),e()}),it("batchSize",function(e){assert["throws"](function(){mquery({},{batchSize:3}).count()},/batchSize cannot be used with count/),e()}),it("comment",function(e){assert["throws"](function(){mquery().comment("mquery").count()},/comment cannot be used with count/),e()}),it("maxScan",function(e){assert["throws"](function(){mquery().maxScan(300).count()},/maxScan cannot be used with count/),e()}),it("snapshot",function(e){assert["throws"](function(){mquery().snapshot().count()},/snapshot cannot be used with count/),e()}),it("tailable",function(e){assert["throws"](function(){mquery().tailable().count()},/tailable cannot be used with count/),e()})})}),describe("distinct",function(){describe("with no callback",function(){it("does not execute",function(){var e=mquery();assert.doesNotThrow(function(){e.distinct()}),assert.doesNotThrow(function(){e.distinct("name")}),assert.doesNotThrow(function(){e.distinct({name:"mquery distinct"})}),assert.doesNotThrow(function(){e.distinct({name:"mquery distinct"},"name")})})}),it("is chainable",function(){var e=mquery({x:1}).distinct("name"),t=e.distinct({y:2});assert.equal(e,t),assert.deepEqual(t._conditions,{x:1,y:2}),assert.equal("name",t._distinct),assert.equal("distinct",t.op)}),it("overwrites field",function(){var e=mquery({name:"mquery"}).distinct("name");e.distinct("rename"),assert.equal(e._distinct,"rename"),e.distinct({x:1},"renamed"),assert.equal(e._distinct,"renamed")}),it("merges other queries",function(){var e=mquery().distinct({name:"mquery"},"age");e.read("nearest");var t=mquery().distinct(e);assert.deepEqual(t._conditions,e._conditions),assert.deepEqual(t.options,e.options),assert.deepEqual(t._fields,e._fields),assert.deepEqual(t._distinct,e._distinct)}),describe("executes",function(){before(function(e){r.insert({name:"mquery distinct",age:1},{safe:!0},e)}),after(function(e){r.remove({name:"mquery distinct"},e)}),it("when distinct arg is passed with a callback",function(e){mquery(r).distinct("distinct",function(t,n){assert.ifError(t),assert.ok(n),e()})}),describe("when criteria is passed with a callback",function(){it("if distinct arg was declared",function(e){mquery(r).distinct("age").distinct({name:"mquery distinct"},function(t,n){assert.ifError(t),assert.ok(n),e()})}),it("but not if distinct arg was not declared",function(){assert["throws"](function(){mquery(r).distinct({name:"mquery distinct"},function(){})},/No value for `distinct`/)})}),describe("when Query is passed with a callback",function(){var e=mquery({name:"mquery distinct"});it("if distinct arg was declared",function(t){mquery(r).distinct("age").distinct(e,function(e,n){assert.ifError(e),assert.ok(n),t()})}),it("but not if distinct arg was not declared",function(){assert["throws"](function(){mquery(r).distinct(e,function(){})},/No value for `distinct`/)})}),describe("when just a callback is passed",function(e){it("if distinct arg was declared",function(e){var t=mquery({name:"mquery distinct"});t.collection(r),t.distinct("age"),t.distinct(function(t,n){assert.ifError(t),assert.ok(n),e()})}),it("but not if no distinct arg was declared",function(){var e=mquery();e.collection(r),assert["throws"](function(){e.distinct(function(){})},/No value for `distinct`/)})})}),describe("validates its option",function(){it("sort",function(e){assert["throws"](function(){mquery().sort("x").distinct()},/sort cannot be used with distinct/),e()}),it("select",function(e){assert["throws"](function(){mquery().select("x").distinct()},/field selection and slice cannot be used with distinct/),e()}),it("slice",function(e){assert["throws"](function(){mquery().where("x").slice(-3).distinct()},/field selection and slice cannot be used with distinct/),e()}),it("limit",function(e){assert["throws"](function(){mquery().limit(3).distinct()},/limit cannot be used with distinct/),e()}),it("skip",function(e){assert["throws"](function(){mquery().skip(3).distinct()},/skip cannot be used with distinct/),e()}),it("batchSize",function(e){assert["throws"](function(){mquery({},{batchSize:3}).distinct()},/batchSize cannot be used with distinct/),e()}),it("comment",function(e){assert["throws"](function(){mquery().comment("mquery").distinct()},/comment cannot be used with distinct/),e()}),it("maxScan",function(e){assert["throws"](function(){mquery().maxScan(300).distinct()},/maxScan cannot be used with distinct/),e()}),it("snapshot",function(e){assert["throws"](function(){mquery().snapshot().distinct()},/snapshot cannot be used with distinct/),e()}),it("hint",function(e){assert["throws"](function(){mquery().hint({x:1}).distinct()},/hint cannot be used with distinct/),e()}),it("tailable",function(e){assert["throws"](function(){mquery().tailable().distinct()},/tailable cannot be used with distinct/),e()})})}),describe("update",function(){describe("with no callback",function(){it("does not execute",function(){var e=mquery();assert.doesNotThrow(function(){e.update({name:"old"},{name:"updated"},{multi:!0})}),assert.doesNotThrow(function(){e.update({name:"old"},{name:"updated"})}),assert.doesNotThrow(function(){e.update({name:"updated"})}),assert.doesNotThrow(function(){e.update()})})}),it("is chainable",function(){var e=mquery({x:1}).update({y:2}),t=e.where({y:2});assert.equal(e,t),assert.deepEqual(t._conditions,{x:1,y:2}),assert.deepEqual({y:2},t._update),assert.equal("update",t.op)}),it("merges update doc arg",function(){var e=[1,2],t=mquery().where({name:"mquery"}).update({x:"stuff",a:e});t.update({z:"stuff"}),assert.deepEqual(t._update,{z:"stuff",x:"stuff",a:e}),assert.deepEqual(t._conditions,{name:"mquery"}),assert.ok(!t.options.overwrite),t.update({},{z:"renamed"},{overwrite:!0}),assert.ok(t.options.overwrite===!0),assert.deepEqual(t._conditions,{name:"mquery"}),assert.deepEqual(t._update,{z:"renamed",x:"stuff",a:e}),e.push(3),assert.notDeepEqual(t._update,{z:"renamed",x:"stuff",a:e})}),it("merges other options",function(){var e=mquery();e.setOptions({overwrite:!0}),e.update({age:77},{name:"pagemill"},{multi:!0}),assert.deepEqual({age:77},e._conditions),assert.deepEqual({name:"pagemill"},e._update),assert.deepEqual({overwrite:!0,multi:!0},e.options)}),describe("executes",function(){var e;before(function(t){r.insert({name:"mquery update",age:1},{safe:!0},function(n,i){var s=i[0];e=s._id,t()})}),after(function(t){r.remove({_id:e},t)}),describe("when conds + doc + opts + callback passed",function(){it("works",function(t){var n=mquery(r).where({_id:e});n.update({},{name:"Sparky"},{safe:!0},function(e,i){assert.ifError(e),assert.ok(1===i),n.findOne(function(e,n){assert.ifError(e),assert.equal(n.name,"Sparky"),t()})})})}),describe("when conds + doc + callback passed",function(){it("works",function(t){var n=mquery(r).update({_id:e},{name:"fairgrounds"},function(e,i,s){assert.ifError(e),assert.ok(1,i),n.findOne(function(e,n){assert.ifError(e),assert.equal(n.name,"fairgrounds"),t()})})})}),describe("when doc + callback passed",function(){it("works",function(t){var n=mquery(r).where({_id:e}).update({name:"changed"},function(e,i,s){assert.ifError(e),assert.ok(1,i),n.findOne(function(e,n){assert.ifError(e),assert.equal(n.name,"changed"),t()})})})}),describe("when just callback passed",function(){it("works",function(t){var n=mquery(r).where({_id:e});n.setOptions({safe:!0}),n.update({name:"Frankenweenie"}),n.update(function(e,i){assert.ifError(e),assert.ok(1===i),n.findOne(function(e,n){assert.ifError(e),assert.equal(n.name,"Frankenweenie"),t()})})})}),describe("without a callback",function(){it("when forced by exec()",function(t){var n=mquery(r).where({_id:e});n.setOptions({safe:!0,multi:!0}),n.update({name:"forced"});var i=n._collection.update;n._collection.update=function(e,s,r,a){n._collection.update=i,assert.ok(r.safe),assert.ok(!0===r.multi),assert.equal("forced",s.$set.name),t()},n.exec()})}),describe("except when update doc is empty and missing overwrite flag",function(){it("works",function(t){var n=mquery(r).where({_id:e});n.setOptions({safe:!0}),n.update({},function(i,s){assert.ifError(i),assert.ok(0===s),setTimeout(function(){n.findOne(function(n,i){assert.ifError(n),assert.equal(3,mquery.utils.keys(i).length),assert.equal(e,i._id.toString()),assert.equal("Frankenweenie",i.name),t()})},300)})})}),describe("when update doc is set with overwrite flag",function(){it("works",function(t){var n=mquery(r).where({_id:e});n.setOptions({safe:!0,overwrite:!0}),n.update({all:"yep",two:2},function(i,s){assert.ifError(i),assert.ok(1===s),n.findOne(function(n,i){assert.ifError(n),assert.equal(3,mquery.utils.keys(i).length),assert.equal("yep",i.all),assert.equal(2,i.two),assert.equal(e,i._id.toString()),t()})})})}),describe("when update doc is empty with overwrite flag",function(){it("works",function(t){var n=mquery(r).where({_id:e});n.setOptions({safe:!0,overwrite:!0}),n.update({},function(i,s){assert.ifError(i),assert.ok(1===s),n.findOne(function(n,i){assert.ifError(n),assert.equal(1,mquery.utils.keys(i).length),assert.equal(e,i._id.toString()),t()})})})}),describe("when boolean (true) - exec()",function(){it("works",function(t){var n=mquery(r).where({_id:e});n.update({name:"bool"}).update(!0),setTimeout(function(){n.findOne(function(e,n){assert.ifError(e),assert.ok(n),assert.equal("bool",n.name),t()})},300)})})})}),describe("remove",function(){describe("with 0 args",function(){var e="remove: no args test";before(function(t){r.insert({name:e},{safe:!0},t)}),after(function(t){r.remove({name:e},{safe:!0},t)}),it("does not execute",function(t){var n=r.remove;r.remove=function(){r.remove=n,t(new Error("remove executed!"))};mquery(r).where({name:e}).remove();setTimeout(function(){r.remove=n,t()},10)}),it("chains",function(){var e=mquery();assert.equal(e,e.remove())})}),describe("with 1 argument",function(){var e="remove: 1 arg test";before(function(t){r.insert({name:e},{safe:!0},t)}),after(function(t){r.remove({name:e},{safe:!0},t)}),describe("that is a",function(){it("plain object",function(){var e=mquery(r).remove({name:"Whiskers"});e.remove({color:"#fff"}),assert.deepEqual({name:"Whiskers",color:"#fff"},e._conditions)}),it("query",function(){var e=mquery({color:"#fff"}),t=mquery(r).remove({name:"Whiskers"});t.remove(e),assert.deepEqual({name:"Whiskers",color:"#fff"},t._conditions)}),it("function",function(t){mquery(r,{safe:!0}).where({name:e}).remove(function(n){assert.ifError(n),mquery(r).findOne({name:e},function(e,n){assert.ifError(e),assert.equal(null,n),t()})})}),it("boolean (true) - execute",function(t){r.insert({name:e},{safe:!0},function(n){assert.ifError(n),mquery(r).findOne({name:e},function(e,n){assert.ifError(e),assert.ok(n),mquery(r).remove(!0),setTimeout(function(){mquery(r).find(function(e,n){assert.ifError(e),assert.ok(n),assert.equal(0,n.length),t()})},300)})})})})}),describe("with 2 arguments",function(){var e="remove: 2 arg test";beforeEach(function(t){r.remove({},{safe:!0},function(n){assert.ifError(n),r.insert([{name:"shelly"},{name:e}],{safe:!0},function(e){assert.ifError(e),mquery(r).find(function(e,n){assert.ifError(e),assert.equal(2,n.length),t()})})})}),describe("plain object + callback",function(){it("works",function(t){mquery(r).remove({name:e},function(e){assert.ifError(e),mquery(r).find(function(e,n){assert.ifError(e),assert.ok(n),assert.equal(1,n.length),assert.equal("shelly",n[0].name),t()})})})}),describe("mquery + callback",function(){it("works",function(t){var n=mquery({name:e});mquery(r).remove(n,function(e){assert.ifError(e),mquery(r).find(function(e,n){assert.ifError(e),assert.ok(n),assert.equal(1,n.length),assert.equal("shelly",n[0].name),t()})})})})})}),describe("findOneAndUpdate",function(){var e="findOneAndUpdate + fn";n("findOneAndUpdate"),describe("with 0 args",function(){it("makes no changes",function(){var e=mquery(),t=e.findOneAndUpdate();assert.deepEqual(e,t)})}),describe("with 1 arg",function(){describe("that is an object",function(){it("updates the doc",function(){var e=mquery(),t=e.findOneAndUpdate({$set:{name:"1 arg"}});assert.deepEqual(t._update,{$set:{name:"1 arg"}})})}),describe("that is a query",function(){it("updates the doc",function(){var t=mquery({name:e}).update({x:1}),n=mquery().findOneAndUpdate(t);assert.deepEqual(n._update,{x:1})})}),it("that is a function",function(t){r.insert({name:e},{safe:!0},function(n){assert.ifError(n);var i=mquery({name:e}).collection(r);e="1 arg";var s=i.update({$set:{name:e}});s.findOneAndUpdate(function(n,i){assert.ifError(n),assert.ok(i),assert.equal(e,i.name),t()})})})}),describe("with 2 args",function(){it("conditions + update",function(){var t=mquery(r);t.findOneAndUpdate({name:e},{age:100}),assert.deepEqual({name:e},t._conditions),assert.deepEqual({age:100},t._update)}),it("query + update",function(){var t=mquery({name:e}),n=mquery(r);n.findOneAndUpdate(t,{age:100}),assert.deepEqual({name:e},n._conditions),assert.deepEqual({age:100},n._update)}),it("update + callback",function(t){var n=mquery(r).where({name:e});n.findOneAndUpdate({$inc:{age:10}},function(e,n){assert.ifError(e),assert.equal(10,n.age),t()})})}),describe("with 3 args",function(){it("conditions + update + options",function(){var t=mquery(),n=t.findOneAndUpdate({name:e},{works:!0},{"new":!1});assert.deepEqual({name:e},n._conditions),assert.deepEqual({works:!0},n._update),assert.deepEqual({"new":!1},n.options)}),it("conditions + update + callback",function(t){var n=mquery(r);n.findOneAndUpdate({name:e},{works:!0},function(n,i){assert.ifError(n),assert.ok(i),assert.equal(e,i.name),assert.ok(!0===i.works),t()})})}),describe("with 4 args",function(){it("conditions + update + options + callback",function(t){var n=mquery(r);n.findOneAndUpdate({name:e},{works:!1},{"new":!1},function(n,i){assert.ifError(n),assert.ok(i),assert.equal(e,i.name),assert.ok(!0===i.works),t()})})})}),describe("findOneAndRemove",function(){var e="findOneAndRemove";n("findOneAndRemove"),describe("with 0 args",function(){it("makes no changes",function(){var e=mquery(),t=e.findOneAndRemove();assert.deepEqual(e,t)})}),describe("with 1 arg",function(){describe("that is an object",function(){it("updates the doc",function(){var e=mquery(),t=e.findOneAndRemove({name:"1 arg"});assert.deepEqual(t._conditions,{name:"1 arg"})})}),describe("that is a query",function(){it("updates the doc",function(){var t=mquery({name:e}),n=t.findOneAndRemove(t);assert.deepEqual(n._conditions,{name:e})})}),it("that is a function",function(t){r.insert({name:e},{safe:!0},function(n){assert.ifError(n);var i=mquery({name:e}).collection(r);i.findOneAndRemove(function(n,i){assert.ifError(n),assert.ok(i),assert.equal(e,i.name),t()})})})}),describe("with 2 args",function(){it("conditions + options",function(){var t=mquery(r);t.findOneAndRemove({name:e},{"new":!1}),assert.deepEqual({name:e},t._conditions),assert.deepEqual({"new":!1},t.options)}),it("query + options",function(){var t=mquery({name:e}),n=mquery(r);n.findOneAndRemove(t,{sort:{x:1}}),assert.deepEqual({name:e},n._conditions),assert.deepEqual({sort:{x:1}},n.options)}),it("conditions + callback",function(t){r.insert({name:e},{safe:!0},function(n){assert.ifError(n);var i=mquery(r);i.findOneAndRemove({name:e},function(n,i){assert.ifError(n),assert.equal(e,i.name),t()})})}),it("query + callback",function(t){r.insert({name:e},{safe:!0},function(n){assert.ifError(n);var i=mquery({name:e}),s=mquery(r);s.findOneAndRemove(i,function(n,i){assert.ifError(n),assert.equal(e,i.name),t()})})})}),describe("with 3 args",function(){it("conditions + options + callback",function(t){e="findOneAndRemove + conds + options + cb",r.insert([{name:e},{name:"a"}],{safe:!0},function(n){assert.ifError(n);var i=mquery(r);i.findOneAndRemove({name:e},{sort:{name:1}},function(n,i){assert.ifError(n),assert.ok(i),assert.equal(e,i.name),t()})})})})}),describe("exec",function(){beforeEach(function(e){r.insert([{name:"exec",age:1},{name:"exec",age:2}],e)}),afterEach(function(e){mquery(r).remove(e)}),it("requires an op",function(){assert["throws"](function(){mquery().exec()},/Missing query type/)}),describe("find",function(){it("works",function(e){var t=mquery(r).find({name:"exec"});t.exec(function(t,n){assert.ifError(t),assert.equal(2,n.length),e()})}),it("works with readPreferences",function(e){var t=mquery(r).find({name:"exec"});try{var n=new require("mongodb").ReadPreference("primary");t.read(n)}catch(i){return"MODULE_NOT_FOUND"===i.code&&(i=null),void e(i)}t.exec(function(t,n){assert.ifError(t),assert.equal(2,n.length),e()})})}),it("findOne",function(e){var t=mquery(r).findOne({age:2});t.exec(function(t,n){assert.ifError(t),assert.equal(2,n.age),e()})}),it("count",function(e){var t=mquery(r).count({name:"exec"});t.exec(function(t,n){assert.ifError(t),assert.equal(2,n),e()})}),it("distinct",function(e){var t=mquery({name:"exec"});t.collection(r),t.distinct("age"),t.exec(function(t,n){assert.ifError(t),assert.ok(Array.isArray(n)),assert.equal(2,n.length),assert(~n.indexOf(1)),assert(~n.indexOf(2)),e()})}),describe("update",function(){var e;it("with a callback",function(t){var n=mquery(r);n.where({name:"exec"}),n.count(function(i,s){assert.ifError(i),e=s,n.setOptions({multi:!0}),n.update({name:"exec + update"}),n.exec(function(n,i){assert.ifError(n),assert.equal(e,i),mquery(r).find({name:"exec + update"},function(n,i){assert.ifError(n),assert.equal(e,i.length),t()})})})}),it("without a callback",function(e){var t=mquery(r);t.where({name:"exec + update"}).setOptions({multi:!0}),t.update({name:"exec"}),t.exec(),setTimeout(function(){mquery(r).find({name:"exec"},function(t,n){assert.ifError(t),assert.equal(2,n.length),e()})},200)}),it("preserves key ordering",function(e){var t=mquery(r),n=t.update({_id:"something"},{1:1,2:2,3:3}),i=n._updateForExec().$set,s=0;for(var a in i)0==s?assert.equal("1",a):1==s?assert.equal("2",a):2==s&&assert.equal("3",a),s++;e()})}),describe("remove",function(){it("with a callback",function(e){var t=mquery(r).where({age:2}).remove();t.exec(function(t,n){assert.ifError(t),assert.equal(1,n),e()})}),it("without a callback",function(e){var t=mquery(r).where({age:1}).remove();t.exec(),setTimeout(function(){mquery(r).where("name","exec").count(function(t,n){assert.equal(1,n),e()})},200)})}),describe("findOneAndUpdate",function(){it("with a callback",function(e){var t=mquery(r);t.findOneAndUpdate({name:"exec",age:1},{$set:{name:"findOneAndUpdate"}}),t.exec(function(t,n){assert.ifError(t),assert.equal("findOneAndUpdate",n.name),e()})})}),describe("findOneAndRemove",function(){it("with a callback",function(e){var t=mquery(r);t.findOneAndRemove({name:"exec",age:2}),t.exec(function(t,n){assert.ifError(t),assert.equal("exec",n.name),assert.equal(2,n.age),mquery(r).count({name:"exec"},function(t,n){assert.ifError(t),assert.equal(1,n),e()})})})})}),describe("setTraceFunction",function(){beforeEach(function(e){r.insert([{name:"trace",age:93}],e)}),it("calls trace function when executing query",function(e){var t,n=mquery(r);n.setTraceFunction(function(n,i){try{assert.equal("findOne",n),assert.equal("trace",i.conditions.name)}catch(s){e(s)}return function(n,i,s){try{assert.equal(93,i.age)}catch(r){e(r)}t=!0}}),n.findOne({name:"trace"},function(n,i){assert.ifError(n),assert.equal(t,!0),assert.equal(93,i.age),e()})}),it("inherits trace function when calling toConstructor",function(e){function t(){return function(){}}var n=mquery().setTraceFunction(t).toConstructor(),i=n();assert.equal(t,i._traceFunction),e()})}),describe("thunk",function(){it("returns a function",function(e){assert.equal("function",typeof mquery().thunk()),e()}),it("passes the fn arg to `exec`",function(e){function t(){}var n=mquery();n.exec=function(i){assert.equal(this,n),assert.equal(t,i),e()},n.thunk()(t)})}),describe("then",function(){before(function(e){r.insert([{name:"then",age:1},{name:"then",age:2}],e)}),after(function(e){mquery(r).remove({name:"then"}).exec(e)}),it("returns a promise A+ compat object",function(e){var t=mquery(r).find();assert.equal("function",typeof t.then),e()}),it("creates a promise that is resolved on success",function(e){var t=mquery(r).count({name:"then"}).then();t.then(function(t){assert.equal(2,t),e()},e)}),it("supports exec() cb being called synchronously #66",function(e){function t(t){assert.equal(66,t),e()}var n=mquery(r).count({name:"then"});n.exec=function(e){e(null,66)},n.then(t,e)}),it("supports other Promise libs",function(e){var t=mquery.Promise;mquery.Promise=function(){mquery.Promise=t,this.then=function(e,t){return e+t}};var n=mquery(r).count({name:"exec"}).then(1,2);assert.equal(n,3),e()})}),describe("stream",function(){before(function(e){r.insert([{name:"stream",age:1},{name:"stream",age:2}],e)}),after(function(e){mquery(r).remove({name:"stream"}).exec(e)}),describe("throws",function(){describe("if used with non-find operations",function(){var e=["update","findOneAndUpdate","remove","count","distinct"];e.forEach(function(e){assert["throws"](function(){mquery(r)[e]().stream()})})})}),it("returns a stream",function(e){var t,n=mquery(r).find({name:"stream"}).stream(),i=0;n.on("data",function(e){assert.equal("stream",e.name),++i}),n.on("error",function(e){t=e}),n.on("close",function(){return t?e(t):(assert.equal(2,i),void e())})}),it("supports find options",function(e){function t(e){return e.name=e.name+"-xformed",e}var n,i=mquery(r).find({name:"stream"}).limit(1).select("-_id").stream({transform:t}),s=0;i.on("data",function(e){assert(!e._id),assert.equal("stream-xformed",e.name),++s}),i.on("error",function(e){n=e}),i.on("close",function(){return n?e(n):(assert.equal(1,s),void e())})})}),describe("_updateForExec",function(){it("returns a clone of the update object with same key order #19",function(e){var t={};t.$push={n:{$each:[{x:10}],$slice:-1,$sort:{x:1}}};var n=mquery().update({x:1},t),i=[];for(var s in n._update.$push.n)i.push(s);var r=n._updateForExec(),a=0;for(var s in r.$push.n)assert.equal(s,i[a]),a++;e()})})});