var utils=require("../lib/utils"),assert=require("assert"),mongo;try{mongo=new require("mongodb")}catch(e){}describe("lib/utils",function(){describe("clone",function(){it("clones constructors named ObjectId",function(e){function n(e){this.id=e}var t=new n("1234"),o=utils.clone(t);assert.ok(o instanceof n),e()}),it("clones constructors named ObjectID",function(e){function n(e){this.id=e}var t=new n("1234"),o=utils.clone(t);assert.ok(o instanceof n),e()}),it("does not clone constructors named ObjectIdd",function(e){function n(e){this.id=e}var t=new n("1234"),o=utils.clone(t);assert.ok(!(o instanceof n)),e()}),it("optionally clones ObjectId constructors using its clone method",function(e){function n(e){this.id=e,this.cloned=!1}n.prototype.clone=function(){var e=new n(this.id);return e.cloned=!0,e};var t=1234,o=new n(t);assert.equal(t,o.id),assert.equal(!1,o.cloned);var s=utils.clone(o);assert.ok(s instanceof n),assert.equal(t,s.id),assert.ok(s.cloned),e()}),it("clones mongodb.ReadPreferences",function(e){if(!mongo)return e();for(var n=[{dc:"tag1"}],t=[new mongo.ReadPreference("primary"),new mongo.ReadPreference(mongo.ReadPreference.PRIMARY_PREFERRED),new mongo.ReadPreference("primary",n),mongo.ReadPreference("primary",n)],o=utils.clone(t),s=0;s<o.length;s++)assert.notEqual(t[s],o[s]),assert.ok(o[s]instanceof mongo.ReadPreference),assert.ok(o[s].isValid()),t[s].tags?(assert.ok(o[s].tags),assert.notEqual(t[s].tags,o[s].tags),assert.notEqual(t[s].tags[0],o[s].tags[0])):assert.equal(o[s].tags,null);e()}),it("clones mongodb.Binary",function(e){if(!mongo)return e();var n=new Buffer("hi"),t=new mongo.Binary(n,2),o=utils.clone(t);assert.equal(t.sub_type,o.sub_type),assert.equal(String(t.buffer),String(n)),assert.ok(t!==o),e()}),it("handles objects with no constructor",function(e){var n="335",t=Object.create(null);t.name=n;var o;assert.doesNotThrow(function(){o=utils.clone(t)}),assert.equal(n,o.name),assert.ok(t!=o),e()}),it("handles buffers",function(e){var n=new Buffer(10);n.fill(1);for(var t=utils.clone(n),o=0;o<n.length;o++)assert.equal(n[o],t[o]);e()})})});