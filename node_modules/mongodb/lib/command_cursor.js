"use strict";var inherits=require("util").inherits,f=require("util").format,toError=require("./utils").toError,getSingleProperty=require("./utils").getSingleProperty,formattedOrderClause=require("./utils").formattedOrderClause,handleCallback=require("./utils").handleCallback,Logger=require("mongodb-core").Logger,EventEmitter=require("events").EventEmitter,ReadPreference=require("./read_preference"),MongoError=require("mongodb-core").MongoError,Readable=require("stream").Readable||require("readable-stream").Readable,Define=require("./metadata"),CoreCursor=require("./cursor"),Query=require("mongodb-core").Query,CoreReadPreference=require("mongodb-core").ReadPreference,CommandCursor=function(e,r,o,s,t,a){CoreCursor.apply(this,Array.prototype.slice.call(arguments,0));var i=CommandCursor.INIT,n={},d=null,m=s.promiseLibrary;m||(m="function"==typeof global.Promise?global.Promise:require("es6-promise").Promise),Readable.call(this,{objectMode:!0}),this.s={maxTimeMS:d,state:i,streamOptions:n,bson:e,ns:r,cmd:o,options:s,topology:t,topologyOptions:a,promiseLibrary:m}};inherits(CommandCursor,Readable);for(var methodsToInherit=["_next","next","each","forEach","toArray","rewind","bufferedCount","readBufferedDocuments","close","isClosed","kill","_find","_getmore","_killcursor","isDead","explain","isNotified","isKilled"],i=0;i<methodsToInherit.length;i++)CommandCursor.prototype[methodsToInherit[i]]=CoreCursor.prototype[methodsToInherit[i]];var define=CommandCursor.define=new Define("CommandCursor",CommandCursor,!0);CommandCursor.prototype.setReadPreference=function(e){if(this.s.state==CommandCursor.CLOSED||this.isDead())throw MongoError.create({message:"Cursor is closed",driver:!0});if(this.s.state!=CommandCursor.INIT)throw MongoError.create({message:"cannot change cursor readPreference after cursor has been accessed",driver:!0});return e instanceof ReadPreference?this.s.options.readPreference=new CoreReadPreference(e.mode,e.tags):"string"==typeof e?this.s.options.readPreference=new CoreReadPreference(e):e instanceof CoreReadPreference&&(this.s.options.readPreference=e),this},define.classMethod("setReadPreference",{callback:!1,promise:!1,returns:[CommandCursor]}),CommandCursor.prototype.batchSize=function(e){if(this.s.state==CommandCursor.CLOSED||this.isDead())throw MongoError.create({message:"Cursor is closed",driver:!0});if("number"!=typeof e)throw MongoError.create({message:"batchSize requires an integer",driver:!0});return this.s.cmd.cursor&&(this.s.cmd.cursor.batchSize=e),this.setCursorBatchSize(e),this},define.classMethod("batchSize",{callback:!1,promise:!1,returns:[CommandCursor]}),CommandCursor.prototype.maxTimeMS=function(e){return this.s.topology.lastIsMaster().minWireVersion>2&&(this.s.cmd.maxTimeMS=e),this},define.classMethod("maxTimeMS",{callback:!1,promise:!1,returns:[CommandCursor]}),CommandCursor.prototype.get=CommandCursor.prototype.toArray,define.classMethod("get",{callback:!0,promise:!1}),define.classMethod("toArray",{callback:!0,promise:!0}),define.classMethod("each",{callback:!0,promise:!1}),define.classMethod("forEach",{callback:!0,promise:!1}),define.classMethod("next",{callback:!0,promise:!0}),define.classMethod("close",{callback:!0,promise:!0}),define.classMethod("isClosed",{callback:!1,promise:!1,returns:[Boolean]}),define.classMethod("rewind",{callback:!1,promise:!1}),define.classMethod("bufferedCount",{callback:!1,promise:!1,returns:[Number]}),define.classMethod("readBufferedDocuments",{callback:!1,promise:!1,returns:[Array]}),CommandCursor.INIT=0,CommandCursor.OPEN=1,CommandCursor.CLOSED=2,module.exports=CommandCursor;