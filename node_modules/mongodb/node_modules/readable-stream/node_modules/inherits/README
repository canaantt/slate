<p>Browser-friendly inheritance fully compatible with standard node.js
<a href="http://nodejs.org/api/util.html#util_util_inherits_constructor_superconstructor">inherits</a>.</p>

<p>This package exports standard <code class="prettyprint">inherits</code> from node.js <code class="prettyprint">util</code> module in
node environment, but also provides alternative browser-friendly
implementation through <a href="https://gist.github.com/shtylman/4339901">browser
field</a>. Alternative
implementation is a literal copy of standard one located in standalone
module to avoid requiring of <code class="prettyprint">util</code>. It also has a shim for old
browsers with no <code class="prettyprint">Object.create</code> support.</p>

<p>While keeping you sure you are using standard <code class="prettyprint">inherits</code>
implementation in node.js environment, it allows bundlers such as
<a href="https://github.com/substack/node-browserify">browserify</a> to not
include full <code class="prettyprint">util</code> package to your client code if all you need is
just <code class="prettyprint">inherits</code> function. It worth, because browser shim for <code class="prettyprint">util</code>
package is large and <code class="prettyprint">inherits</code> is often the single function you need
from it.</p>

<p>It&rsquo;s recommended to use this package instead of
<code class="prettyprint">require(&#39;util&#39;).inherits</code> for any code that has chances to be used
not only in node.js but in browser too.</p>

<h2 id="usage">usage</h2>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">inherits</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'inherits'</span><span class="p">);</span>
<span class="c1">// then use exactly as the standard one</span>
</code></pre>

<h2 id="note-on-version-1-0">note on version ~1.0</h2>

<p>Version ~1.0 had completely different motivation and is not compatible
neither with 2.0 nor with standard node.js <code class="prettyprint">inherits</code>.</p>

<p>If you are using version ~1.0 and planning to switch to ~2.0, be
careful:</p>

<ul>
<li>new version uses <code class="prettyprint">super_</code> instead of <code class="prettyprint">super</code> for referencing
superclass</li>
<li>new version overwrites current prototype while old one preserves any
existing fields on it</li>
</ul>
