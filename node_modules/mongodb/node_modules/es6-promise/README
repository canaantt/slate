<h1 id="es6-promise-subset-of-rsvp-js">ES6-Promise (subset of <a href="https://github.com/tildeio/rsvp.js">rsvp.js</a>)</h1>

<p>This is a polyfill of the <a href="http://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-constructor">ES6 Promise</a>. The implementation is a subset of <a href="https://github.com/tildeio/rsvp.js">rsvp.js</a>, if you&rsquo;re wanting extra features and more debugging options, check out the <a href="https://github.com/tildeio/rsvp.js">full library</a>.</p>

<p>For API details and how to use promises, see the <a href="http://www.html5rocks.com/en/tutorials/es6/promises/">JavaScript Promises HTML5Rocks article</a>.</p>

<h2 id="downloads">Downloads</h2>

<ul>
<li><a href="https://raw.githubusercontent.com/jakearchibald/es6-promise/master/dist/es6-promise.js">es6-promise</a></li>
<li><a href="https://raw.githubusercontent.com/jakearchibald/es6-promise/master/dist/es6-promise.min.js">es6-promise-min</a></li>
</ul>

<h2 id="node-js">Node.js</h2>

<p>To install:</p>
<pre class="highlight shell"><code>npm install es6-promise
</code></pre>

<p>To use:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">Promise</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'es6-promise'</span><span class="p">).</span><span class="nx">Promise</span><span class="p">;</span>
</code></pre>

<h2 id="usage-in-ie-lt-9">Usage in IE&lt;9</h2>

<p><code class="prettyprint">catch</code> is a reserved word in IE&lt;9, meaning <code class="prettyprint">promise.catch(func)</code> throws a syntax error. To work around this, you can use a string to access the property as shown in the following example.</p>

<p>However, please remember that such technique is already provided by most common minifiers, making the resulting code safe for old browsers and production:</p>
<pre class="highlight javascript"><code><span class="nx">promise</span><span class="p">[</span><span class="s1">'catch'</span><span class="p">](</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">});</span>
</code></pre>

<p>Or use <code class="prettyprint">.then</code> instead:</p>
<pre class="highlight javascript"><code><span class="nx">promise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kc">undefined</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">});</span>
</code></pre>

<h2 id="auto-polyfill">Auto-polyfill</h2>

<p>To polyfill the global environment (either in Node or in the browser via CommonJS) use the following code snippet:</p>
<pre class="highlight javascript"><code><span class="nx">require</span><span class="p">(</span><span class="s1">'es6-promise'</span><span class="p">).</span><span class="nx">polyfill</span><span class="p">();</span>
</code></pre>

<p>Notice that we don&rsquo;t assign the result of <code class="prettyprint">polyfill()</code> to any variable. The <code class="prettyprint">polyfill()</code> method will patch the global environment (in this case to the <code class="prettyprint">Promise</code> name) when called.</p>

<h2 id="building-amp-testing">Building &amp; Testing</h2>

<ul>
<li><code class="prettyprint">npm run build</code> to build</li>
<li><code class="prettyprint">npm test</code> to run tests</li>
<li><code class="prettyprint">npm start</code> to run a build watcher, and webserver to test </li>
<li><code class="prettyprint">npm run test:server</code> for a testem test runner and watching builder</li>
</ul>
