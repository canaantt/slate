"use strict";function pickNearestMaxStalenessMS(e,r){var t=[],s=e.heartbeatFrequencyMS;if(r.maxStalenessMS<2*s)return new MongoError("maxStalenessMS must be at least twice the haInterval");e.primary&&"secondary"!=r.preference&&t.push(e.primary);for(var i=0;i<e.secondaries.length;i++)t.push(e.secondaries[i]);if(t=filterByTags(r,t),t=t.filter(function(e){return e.staleness<=r.maxStalenessMS}),t.sort(function(e,r){return e.lastIsMasterMS>r.lastIsMasterMS}),0==t.length)return null;e.index=e.index%t.length;var a=t[e.index];return e.index=e.index+1,a}function pickNearest(e,r){var t=[];e.primary&&"secondary"!=r.preference&&t.push(e.primary);for(var s=0;s<e.secondaries.length;s++)t.push(e.secondaries[s]);t=filterByTags(r,t),t.sort(function(e,r){return e.lastIsMasterMS>r.lastIsMasterMS});var i=t.length>0?t[0].lastIsMasterMS:0;if(t=t.filter(function(r){return r.lastIsMasterMS<=i+e.acceptableLatency}),0==t.length)return null;e.index=e.index%t.length;var a=t[e.index];return e.index=e.index+1,a}function inList(e,r,t){for(var s=0;s<t.length;s++)if(t[s].name==r.name)return!0;return!1}function addToList(e,r,t,s,i){e.set[s.name].type=r,e.set[s.name].electionId=t?t.electionId:t,e.set[s.name].setName=t?t.setName:t,e.set[s.name].setVersion=t?t.setVersion:t,i.push(s)}function compareObjectIds(e,r){var t=new Buffer(e.toHexString(),"hex"),s=new Buffer(r.toHexString(),"hex");if(t===s)return 0;if("function"==typeof Buffer.compare)return Buffer.compare(t,s);for(var i=t.length,a=s.length,n=Math.min(i,a),o=0;n>o&&t[o]===s[o];o++);return o!==n&&(i=t[o],a=s[o]),a>i?-1:i>a?1:0}function removeFrom(e,r){for(var t=0;t<r.length;t++){if(r[t].equals&&r[t].equals(e))return r.splice(t,1),!0;if("string"==typeof r[t]&&r[t]==e.name)return r.splice(t,1),!0}return!1}function emitTopologyDescriptionChanged(e){if(e.listeners("topologyDescriptionChanged").length>0){var r="Unknown",t=e.setName;e.hasPrimaryAndSecondary()?r="ReplicaSetWithPrimary":!e.hasPrimary()&&e.hasSecondary()&&(r="ReplicaSetNoPrimary");var s={topologyType:r,setName:t,servers:[]};if(e.hasPrimary()){var i=e.primary.getDescription();i.type="RSPrimary",s.servers.push(i)}s.servers=s.servers.concat(e.secondaries.map(function(e){var r=e.getDescription();return r.type="RSSecondary",r})),s.servers=s.servers.concat(e.arbiters.map(function(e){var r=e.getDescription();return r.type="RSArbiter",r})),s.servers=s.servers.concat(e.passives.map(function(e){var r=e.getDescription();return r.type="RSSecondary",r}));var a={topologyId:e.id,previousDescription:e.replicasetDescription,newDescription:s,diff:diff(e.replicasetDescription,s)};e.emit("topologyDescriptionChanged",a),e.replicasetDescription=s}}function diff(e,r){var t={servers:[]};e||(e={servers:[]});for(var s=0;s<e.servers.length;s++)for(var i=e.servers[s],a=0;a<r.servers.length;a++){var n=r.servers[a];i.address===n.address&&i.type!=n.type&&t.servers.push({address:i.address,from:i.type,to:n.type})}return t}var inherits=require("util").inherits,f=require("util").format,EventEmitter=require("events").EventEmitter,Logger=require("../connection/logger"),ObjectId=require("bson").ObjectId,ReadPreference=require("./read_preference"),MongoError=require("../error"),TopologyType={Single:"Single",ReplicaSetNoPrimary:"ReplicaSetNoPrimary",ReplicaSetWithPrimary:"ReplicaSetWithPrimary",Sharded:"Sharded",Unknown:"Unknown"},ServerType={Standalone:"Standalone",Mongos:"Mongos",PossiblePrimary:"PossiblePrimary",RSPrimary:"RSPrimary",RSSecondary:"RSSecondary",RSArbiter:"RSArbiter",RSOther:"RSOther",RSGhost:"RSGhost",Unknown:"Unknown"},ReplSetState=function(e){e=e||{},EventEmitter.call(this),this.topologyType=TopologyType.ReplicaSetNoPrimary,this.setName=e.setName,this.set={},this.id=e.id,this.setName=e.setName,this.logger=e.logger||Logger("ReplSet",e),this.index=0,this.acceptableLatency=e.acceptableLatency||15,this.heartbeatFrequencyMS=e.heartbeatFrequencyMS||1e4,this.primary=null,this.secondaries=[],this.arbiters=[],this.passives=[],this.ghosts=[],this.unknownServers=[],this.set={},this.maxElectionId=null,this.maxSetVersion=0,this.replicasetDescription={topologyType:"Unknown",servers:[]}};inherits(ReplSetState,EventEmitter),ReplSetState.prototype.hasPrimaryAndSecondary=function(e){return this.primary&&this.secondaries.length>0},ReplSetState.prototype.hasPrimary=function(e){return null!=this.primary},ReplSetState.prototype.hasSecondary=function(e){return this.secondaries.length>0},ReplSetState.prototype.allServers=function(e){e=e||{};var r=this.primary?[this.primary]:[];return r=r.concat(this.secondaries),e.ignoreArbiters||(r=r.concat(this.arbiters)),r=r.concat(this.passives)},ReplSetState.prototype.destroy=function(){this.primary&&this.primary.destroy(),this.secondaries.forEach(function(e){e.destroy()}),this.arbiters.forEach(function(e){e.destroy()}),this.passives.forEach(function(e){e.destroy()}),this.ghosts.forEach(function(e){e.destroy()}),this.secondaries=[],this.arbiters=[],this.passives=[],this.ghosts=[],this.unknownServers=[],this.set={}},ReplSetState.prototype.remove=function(e,r){r=r||{};var t=this.primary?[this.primary]:[];t=t.concat(this.secondaries),t=t.concat(this.arbiters),t=t.concat(this.passives);for(var s=0;s<t.length;s++)if(!r.force&&t[s].equals(e)&&t[s].isConnected&&t[s].isConnected())return;this.set[e.name]&&(this.set[e.name].type=ServerType.Unknown,this.set[e.name].electionId=null,this.set[e.name].setName=null,this.set[e.name].setVersion=null);var i=null;this.primary&&this.primary.equals(e)&&(this.primary=null,this.topologyType=TopologyType.ReplicaSetNoPrimary,i="primary"),i=removeFrom(e,this.secondaries)?"secondary":i,i=removeFrom(e,this.arbiters)?"arbiter":i,i=removeFrom(e,this.passives)?"secondary":i,removeFrom(e,this.ghosts),removeFrom(e,this.unknownServers),i&&this.emit("left",i,e)},ReplSetState.prototype.update=function(e){var r=this,t=e.lastIsMaster();if(t){var s=Array.isArray(t.hosts)?t.hosts:[];s=s.concat(Array.isArray(t.arbiters)?t.arbiters:[]),s=s.concat(Array.isArray(t.passives)?t.passives:[]);for(var i=0;i<s.length;i++)-1!=this.unknownServers.indexOf(s[i])||this.set[s[i]]&&this.set[s[i]].type!=ServerType.Unknown||this.unknownServers.push(s[i]),this.set[s[i]]||(this.set[s[i]]={type:ServerType.Unknown,electionId:null,setName:null,setVersion:null})}if(!t&&!inList(t,e,this.unknownServers))return r.set[e.name]={type:ServerType.Unknown,setVersion:null,electionId:null,setName:null},r.set[e.name].type=ServerType.Unknown,r.set[e.name].electionId=t?t.electionId:t,r.set[e.name].setName=t?t.setName:t,r.set[e.name].setVersion=t?t.setVersion:t,-1==r.unknownServers.indexOf(e.name)&&r.unknownServers.push(e.name),!1;if(t&&"isdbgrid"==t.msg)return!1;if(t.setName&&t.hidden||t.setName&&!t.ismaster&&!t.secondary&&!t.arbiterOnly&&!t.passive)return r.set[e.name]={type:ServerType.RSOther,setVersion:null,electionId:null,setName:t.setName},this.topologyType=this.primary?TopologyType.ReplicaSetWithPrimary:TopologyType.ReplicaSetNoPrimary,t.setName&&(this.setName=t.setName),!1;if(t.isreplicaset)return r.set[e.name]={type:ServerType.RSGhost,setVersion:null,electionId:null,setName:null},this.topologyType=this.primary?TopologyType.ReplicaSetWithPrimary:TopologyType.ReplicaSetNoPrimary,t.setName&&(this.setName=t.setName),!1;if(t&&t.ismaster&&!t.setName)return this.topologyType=this.primary?TopologyType.ReplicaSetWithPrimary:TopologyType.Unknown,this.remove(e,{force:!0}),!1;if(t&&!t.ismaster&&!t.secondary&&!t.arbiterOnly)return this.remove(e,{force:!0}),!1;if(t.me&&t.me!=e.name)return this.logger.isWarn()&&this.logger.warn(f("the seedlist server was removed due to its address %s not matching its ismaster.me address %s",e.name,t.me)),this.primary&&!this.primary.equals(e)?this.topologyType=TopologyType.ReplicaSetWithPrimary:this.topologyType=TopologyType.ReplicaSetNoPrimary,!1;if(!this.primary&&t.ismaster&&t.setName){var a=e.lastIsMaster().electionId;if(this.setName&&this.setName!=t.setName)return this.topologyType=TopologyType.ReplicaSetNoPrimary,new MongoError(f("setName from ismaster does not match provided connection setName [%s] != [%s]",t.setName,this.setName));if(!this.maxElectionId&&a)this.maxElectionId=a;else if(this.maxElectionId&&a){var n=compareObjectIds(this.maxElectionId,a),o=e.lastIsMaster().setVersion;if(1==n)return this.topologyType=TopologyType.ReplicaSetNoPrimary,!1;if(0==n&&o&&o<this.maxSetVersion)return this.topologyType=TopologyType.ReplicaSetNoPrimary,!1;this.maxSetVersion=o,this.maxElectionId=a}return r.primary=e,r.set[e.name]={type:ServerType.RSPrimary,setVersion:t.setVersion,electionId:t.electionId,setName:t.setName},this.topologyType=TopologyType.ReplicaSetWithPrimary,t.setName&&(this.setName=t.setName),removeFrom(e,r.unknownServers),removeFrom(e,r.secondaries),removeFrom(e,r.passives),r.emit("joined","primary",e),emitTopologyDescriptionChanged(r),!0}if(t.ismaster&&t.setName){var p=r.set[r.primary.name].electionId,m=r.set[r.primary.name].setVersion,l=r.set[r.primary.name].setName,a=e.lastIsMaster().electionId,o=e.lastIsMaster().setVersion,y=e.lastIsMaster().setName;if(this.primary.equals(e)&&l==y)return!1;if(l&&l!=y)return this.primary.equals(e)?this.topologyType=TopologyType.ReplicaSetNoPrimary:this.topologyType=TopologyType.ReplicaSetWithPrimary,!1;if(p&&a){var n=compareObjectIds(p,a);if(1==n)return!1;if(0==n&&m>o)return!1}else if(!p&&a&&o&&o<this.maxSetVersion)return!1;if(!this.maxElectionId&&a)this.maxElectionId=a;else if(this.maxElectionId&&a){var n=compareObjectIds(this.maxElectionId,a);if(1==n)return!1;if(0==n&&m&&o){if(o<this.maxSetVersion)return!1}else if(o<this.maxSetVersion)return!1;this.maxElectionId=a,this.maxSetVersion=o}else this.maxSetVersion=o;return r.set[r.primary.name]={type:ServerType.Unknown,setVersion:null,electionId:null,setName:null},r.emit("left","primary",this.primary),r.primary.destroy(),r.primary=e,r.set[e.name]={type:ServerType.RSPrimary,setVersion:t.setVersion,electionId:t.electionId,setName:t.setName},this.topologyType=TopologyType.ReplicaSetWithPrimary,t.setName&&(this.setName=t.setName),removeFrom(e,r.unknownServers),removeFrom(e,r.secondaries),removeFrom(e,r.passives),r.emit("joined","primary",e),emitTopologyDescriptionChanged(r),!0}return!this.primary&&t.primary&&(r.set[t.primary]={type:ServerType.PossiblePrimary,setVersion:null,electionId:null,setName:null}),t.secondary&&t.setName&&!inList(t,e,this.secondaries)&&this.setName&&this.setName==t.setName?(addToList(r,ServerType.RSSecondary,t,e,this.secondaries),this.topologyType=this.primary?TopologyType.ReplicaSetWithPrimary:TopologyType.ReplicaSetNoPrimary,t.setName&&(this.setName=t.setName),removeFrom(e,r.unknownServers),this.primary&&this.primary.name==e.name&&(e.destroy(),this.primary=null,r.emit("left","primary",e)),r.emit("joined","secondary",e),emitTopologyDescriptionChanged(r),!0):t.arbiterOnly&&t.setName&&!inList(t,e,this.arbiters)&&this.setName&&this.setName==t.setName?(addToList(r,ServerType.RSArbiter,t,e,this.arbiters),this.topologyType=this.primary?TopologyType.ReplicaSetWithPrimary:TopologyType.ReplicaSetNoPrimary,t.setName&&(this.setName=t.setName),removeFrom(e,r.unknownServers),r.emit("joined","arbiter",e),emitTopologyDescriptionChanged(r),!0):t.passive&&t.setName&&!inList(t,e,this.passives)&&this.setName&&this.setName==t.setName?(addToList(r,ServerType.RSSecondary,t,e,this.passives),this.topologyType=this.primary?TopologyType.ReplicaSetWithPrimary:TopologyType.ReplicaSetNoPrimary,t.setName&&(this.setName=t.setName),removeFrom(e,r.unknownServers),this.primary&&this.primary.name==e.name&&(e.destroy(),this.primary=null,r.emit("left","primary",e)),r.emit("joined","secondary",e),emitTopologyDescriptionChanged(r),!0):this.set[e.name]&&this.set[e.name].type==ServerType.RSPrimary?(r.emit("left","primary",this.primary),this.primary.destroy(),this.primary=null,this.topologyType=TopologyType.ReplicaSetNoPrimary,!1):(this.topologyType=this.primary?TopologyType.ReplicaSetWithPrimary:TopologyType.ReplicaSetNoPrimary,!1)},ReplSetState.prototype.updateServerMaxStaleness=function(e,r){for(var t=0,s=0;s<this.secondaries.length;s++)t=Math.max(t,this.secondaries[s].lastWriteDate);e.ismaster.maxWireVersion>=5&&e.ismaster.secondary&&this.hasPrimary()?e.staleness=e.lastUpdateTime-e.lastWriteDate-(this.primary.lastUpdateTime-this.primary.lastWriteDate)+r:e.ismaster.maxWireVersion>=5&&e.ismaster.secondary&&(e.staleness=t-e.lastWriteDate+r)},ReplSetState.prototype.updateSecondariesMaxStaleness=function(e){for(var r=0;r<this.secondaries.length;r++)this.updateServerMaxStaleness(this.secondaries[r],e)},ReplSetState.prototype.pickServer=function(e){if(e=e||ReadPreference.primary,"primary"==e.preference&&e.maxStalenessMS)return new MongoError("primary readPreference incompatible with maxStalenessMS");var r=this.primary?[this.primary]:[];if(r=r.concat(this.secondaries),e.maxStalenessMS)for(var t=0;t<r.length;t++)if(r[t].ismaster.maxWireVersion<5)return new MongoError("maxStalenessMS not supported by at least one of the replicaset members");if("nearest"==e.preference&&!e.maxStalenessMS)return pickNearest(this,e);if("nearest"==e.preference&&e.maxStalenessMS)return pickNearestMaxStalenessMS(this,e);var s=this.secondaries;if(e.equals(ReadPreference.secondary)&&0==s.length)return new MongoError("no secondary server available");if(e.equals(ReadPreference.secondaryPreferred)&&0==s.length&&null==this.primary)return new MongoError("no secondary or primary server available");if(e.equals(ReadPreference.primary)&&null==this.primary)return new MongoError("no primary server available");if(e.equals(ReadPreference.secondaryPreferred)||e.equals(ReadPreference.secondary)){if(s.length>0&&!e.maxStalenessMS){var i=pickNearest(this,e);if(i)return i}else if(s.length>0&&e.maxStalenessMS){var i=pickNearestMaxStalenessMS(this,e);if(i)return i}return e.equals(ReadPreference.secondaryPreferred)?this.primary:null}if(e.equals(ReadPreference.primaryPreferred)){var i=null;if(this.primary)return this.primary;if(s.length>0&&!e.maxStalenessMS?i=pickNearest(this,e):s.length>0&&e.maxStalenessMS&&(i=pickNearestMaxStalenessMS(this,e)),i)return i}return this.primary};var filterByTags=function(e,r){if(null==e.tags)return r;for(var t=[],s=Array.isArray(e.tags)?e.tags:[e.tags],i=0;i<s.length;i++){for(var a=s[i],n=0;n<r.length;n++){var o=r[n].lastIsMaster().tags||{},p=!0;for(var m in a)o[m]!=a[m]&&(p=!1);p&&t.push(r[n])}if(p)break}return t};module.exports=ReplSetState;