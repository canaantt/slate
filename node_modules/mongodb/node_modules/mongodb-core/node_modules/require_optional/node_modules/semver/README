<h1 id="semver-1-the-semantic-versioner-for-npm">semver(1) &ndash; The semantic versioner for npm</h1>

<h2 id="usage">Usage</h2>

<p>$ npm install semver
    $ node
    var semver = require(&lsquo;semver&rsquo;)</p>

<p>semver.valid(&#39;1.2.3&rsquo;) // &#39;1.2.3&rsquo;
    semver.valid(&#39;a.b.c&rsquo;) // null
    semver.clean(&rsquo;  =v1.2.3   &rsquo;) // &#39;1.2.3&rsquo;
    semver.satisfies(&#39;1.2.3&rsquo;, &#39;1.x || &gt;=2.5.0 || 5.0.0 - 7.2.3&rsquo;) // true
    semver.gt(&#39;1.2.3&rsquo;, &#39;9.8.7&rsquo;) // false
    semver.lt(&#39;1.2.3&rsquo;, &#39;9.8.7&rsquo;) // true</p>

<p>As a command-line utility:</p>

<p>$ semver -h</p>

<p>SemVer 5.1.0</p>

<p>A JavaScript implementation of the http://semver.org/ specification
    Copyright Isaac Z. Schlueter</p>

<p>Usage: semver [options] <version> [<version> [&hellip;]]
    Prints valid versions sorted by SemVer precedence</p>

<p>Options:
    -r &ndash;range <range>
            Print versions that match the specified range.</p>

<p>-i &ndash;increment [<level>]
            Increment a version by the specified level.  Level can
            be one of: major, minor, patch, premajor, preminor,
            prepatch, or prerelease.  Default level is &#39;patch&rsquo;.
            Only one version may be specified.</p>

<p>&ndash;preid <identifier>
            Identifier to be used to prefix premajor, preminor,
            prepatch or prerelease version increments.</p>

<p>-l &ndash;loose
            Interpret versions and ranges loosely</p>

<p>Program exits successfully if any valid version satisfies
    all supplied ranges, and prints all satisfying versions.</p>

<p>If no satisfying versions are found, then exits failure.</p>

<p>Versions are printed in ascending order, so supplying
    multiple versions to the utility will just sort them.</p>

<h2 id="versions">Versions</h2>

<p>A &ldquo;version&rdquo; is described by the <code class="prettyprint">v2.0.0</code> specification found at
<a href="http://semver.org/">http://semver.org/</a>.</p>

<p>A leading <code class="prettyprint">&quot;=&quot;</code> or <code class="prettyprint">&quot;v&quot;</code> character is stripped off and ignored.</p>

<h2 id="ranges">Ranges</h2>

<p>A <code class="prettyprint">version range</code> is a set of <code class="prettyprint">comparators</code> which specify versions
that satisfy the range.</p>

<p>A <code class="prettyprint">comparator</code> is composed of an <code class="prettyprint">operator</code> and a <code class="prettyprint">version</code>.  The set
of primitive <code class="prettyprint">operators</code> is:</p>

<ul>
<li><code class="prettyprint">&lt;</code> Less than</li>
<li><code class="prettyprint">&lt;=</code> Less than or equal to</li>
<li><code class="prettyprint">&gt;</code> Greater than</li>
<li><code class="prettyprint">&gt;=</code> Greater than or equal to</li>
<li><code class="prettyprint">=</code> Equal.  If no operator is specified, then equality is assumed,
so this operator is optional, but MAY be included.</li>
</ul>

<p>For example, the comparator <code class="prettyprint">&gt;=1.2.7</code> would match the versions
<code class="prettyprint">1.2.7</code>, <code class="prettyprint">1.2.8</code>, <code class="prettyprint">2.5.3</code>, and <code class="prettyprint">1.3.9</code>, but not the versions <code class="prettyprint">1.2.6</code>
or <code class="prettyprint">1.1.0</code>.</p>

<p>Comparators can be joined by whitespace to form a <code class="prettyprint">comparator set</code>,
which is satisfied by the <strong>intersection</strong> of all of the comparators
it includes.</p>

<p>A range is composed of one or more comparator sets, joined by <code class="prettyprint">||</code>.  A
version matches a range if and only if every comparator in at least
one of the <code class="prettyprint">||</code>-separated comparator sets is satisfied by the version.</p>

<p>For example, the range <code class="prettyprint">&gt;=1.2.7 &lt;1.3.0</code> would match the versions
<code class="prettyprint">1.2.7</code>, <code class="prettyprint">1.2.8</code>, and <code class="prettyprint">1.2.99</code>, but not the versions <code class="prettyprint">1.2.6</code>, <code class="prettyprint">1.3.0</code>,
or <code class="prettyprint">1.1.0</code>.</p>

<p>The range <code class="prettyprint">1.2.7 || &gt;=1.2.9 &lt;2.0.0</code> would match the versions <code class="prettyprint">1.2.7</code>,
<code class="prettyprint">1.2.9</code>, and <code class="prettyprint">1.4.6</code>, but not the versions <code class="prettyprint">1.2.8</code> or <code class="prettyprint">2.0.0</code>.</p>

<h3 id="prerelease-tags">Prerelease Tags</h3>

<p>If a version has a prerelease tag (for example, <code class="prettyprint">1.2.3-alpha.3</code>) then
it will only be allowed to satisfy comparator sets if at least one
comparator with the same <code class="prettyprint">[major, minor, patch]</code> tuple also has a
prerelease tag.</p>

<p>For example, the range <code class="prettyprint">&gt;1.2.3-alpha.3</code> would be allowed to match the
version <code class="prettyprint">1.2.3-alpha.7</code>, but it would <em>not</em> be satisfied by
<code class="prettyprint">3.4.5-alpha.9</code>, even though <code class="prettyprint">3.4.5-alpha.9</code> is technically &ldquo;greater
than&rdquo; <code class="prettyprint">1.2.3-alpha.3</code> according to the SemVer sort rules.  The version
range only accepts prerelease tags on the <code class="prettyprint">1.2.3</code> version.  The
version <code class="prettyprint">3.4.5</code> <em>would</em> satisfy the range, because it does not have a
prerelease flag, and <code class="prettyprint">3.4.5</code> is greater than <code class="prettyprint">1.2.3-alpha.7</code>.</p>

<p>The purpose for this behavior is twofold.  First, prerelease versions
frequently are updated very quickly, and contain many breaking changes
that are (by the author&rsquo;s design) not yet fit for public consumption.
Therefore, by default, they are excluded from range matching
semantics.</p>

<p>Second, a user who has opted into using a prerelease version has
clearly indicated the intent to use <em>that specific</em> set of
alpha/beta/rc versions.  By including a prerelease tag in the range,
the user is indicating that they are aware of the risk.  However, it
is still not appropriate to assume that they have opted into taking a
similar risk on the <em>next</em> set of prerelease versions.</p>

<h4 id="prerelease-identifiers">Prerelease Identifiers</h4>

<p>The method <code class="prettyprint">.inc</code> takes an additional <code class="prettyprint">identifier</code> string argument that
will append the value of the string as a prerelease identifier:</p>
<pre class="highlight javascript"><code><span class="o">&gt;</span> <span class="nx">semver</span><span class="p">.</span><span class="nx">inc</span><span class="p">(</span><span class="s1">'1.2.3'</span><span class="p">,</span> <span class="s1">'prerelease'</span><span class="p">,</span> <span class="s1">'beta'</span><span class="p">)</span>
<span class="s1">'1.2.4-beta.0'</span>
</code></pre>

<p>command-line example:</p>
<pre class="highlight shell"><code><span class="gp">$ </span>semver 1.2.3 -i prerelease --preid beta
1.2.4-beta.0
</code></pre>

<p>Which then can be used to increment further:</p>
<pre class="highlight shell"><code><span class="gp">$ </span>semver 1.2.4-beta.0 -i prerelease
1.2.4-beta.1
</code></pre>

<h3 id="advanced-range-syntax">Advanced Range Syntax</h3>

<p>Advanced range syntax desugars to primitive comparators in
deterministic ways.</p>

<p>Advanced ranges may be combined in the same way as primitive
comparators using white space or <code class="prettyprint">||</code>.</p>

<h4 id="hyphen-ranges-x-y-z-a-b-c">Hyphen Ranges <code class="prettyprint">X.Y.Z - A.B.C</code></h4>

<p>Specifies an inclusive set.</p>

<ul>
<li><code class="prettyprint">1.2.3 - 2.3.4</code> := <code class="prettyprint">&gt;=1.2.3 &lt;=2.3.4</code></li>
</ul>

<p>If a partial version is provided as the first version in the inclusive
range, then the missing pieces are replaced with zeroes.</p>

<ul>
<li><code class="prettyprint">1.2 - 2.3.4</code> := <code class="prettyprint">&gt;=1.2.0 &lt;=2.3.4</code></li>
</ul>

<p>If a partial version is provided as the second version in the
inclusive range, then all versions that start with the supplied parts
of the tuple are accepted, but nothing that would be greater than the
provided tuple parts.</p>

<ul>
<li><code class="prettyprint">1.2.3 - 2.3</code> := <code class="prettyprint">&gt;=1.2.3 &lt;2.4.0</code></li>
<li><code class="prettyprint">1.2.3 - 2</code> := <code class="prettyprint">&gt;=1.2.3 &lt;3.0.0</code></li>
</ul>

<h4 id="x-ranges-1-2-x-1-x-1-2">X-Ranges <code class="prettyprint">1.2.x</code> <code class="prettyprint">1.X</code> <code class="prettyprint">1.2.*</code> <code class="prettyprint">*</code></h4>

<p>Any of <code class="prettyprint">X</code>, <code class="prettyprint">x</code>, or <code class="prettyprint">*</code> may be used to &ldquo;stand in&rdquo; for one of the
numeric values in the <code class="prettyprint">[major, minor, patch]</code> tuple.</p>

<ul>
<li><code class="prettyprint">*</code> := <code class="prettyprint">&gt;=0.0.0</code> (Any version satisfies)</li>
<li><code class="prettyprint">1.x</code> := <code class="prettyprint">&gt;=1.0.0 &lt;2.0.0</code> (Matching major version)</li>
<li><code class="prettyprint">1.2.x</code> := <code class="prettyprint">&gt;=1.2.0 &lt;1.3.0</code> (Matching major and minor versions)</li>
</ul>

<p>A partial version range is treated as an X-Range, so the special
character is in fact optional.</p>

<ul>
<li><code class="prettyprint">&quot;&quot;</code> (empty string) := <code class="prettyprint">*</code> := <code class="prettyprint">&gt;=0.0.0</code></li>
<li><code class="prettyprint">1</code> := <code class="prettyprint">1.x.x</code> := <code class="prettyprint">&gt;=1.0.0 &lt;2.0.0</code></li>
<li><code class="prettyprint">1.2</code> := <code class="prettyprint">1.2.x</code> := <code class="prettyprint">&gt;=1.2.0 &lt;1.3.0</code></li>
</ul>

<h4 id="tilde-ranges-1-2-3-1-2-1">Tilde Ranges <code class="prettyprint">~1.2.3</code> <code class="prettyprint">~1.2</code> <code class="prettyprint">~1</code></h4>

<p>Allows patch-level changes if a minor version is specified on the
comparator.  Allows minor-level changes if not.</p>

<ul>
<li><code class="prettyprint">~1.2.3</code> := <code class="prettyprint">&gt;=1.2.3 &lt;1.(2+1).0</code> := <code class="prettyprint">&gt;=1.2.3 &lt;1.3.0</code></li>
<li><code class="prettyprint">~1.2</code> := <code class="prettyprint">&gt;=1.2.0 &lt;1.(2+1).0</code> := <code class="prettyprint">&gt;=1.2.0 &lt;1.3.0</code> (Same as <code class="prettyprint">1.2.x</code>)</li>
<li><code class="prettyprint">~1</code> := <code class="prettyprint">&gt;=1.0.0 &lt;(1+1).0.0</code> := <code class="prettyprint">&gt;=1.0.0 &lt;2.0.0</code> (Same as <code class="prettyprint">1.x</code>)</li>
<li><code class="prettyprint">~0.2.3</code> := <code class="prettyprint">&gt;=0.2.3 &lt;0.(2+1).0</code> := <code class="prettyprint">&gt;=0.2.3 &lt;0.3.0</code></li>
<li><code class="prettyprint">~0.2</code> := <code class="prettyprint">&gt;=0.2.0 &lt;0.(2+1).0</code> := <code class="prettyprint">&gt;=0.2.0 &lt;0.3.0</code> (Same as <code class="prettyprint">0.2.x</code>)</li>
<li><code class="prettyprint">~0</code> := <code class="prettyprint">&gt;=0.0.0 &lt;(0+1).0.0</code> := <code class="prettyprint">&gt;=0.0.0 &lt;1.0.0</code> (Same as <code class="prettyprint">0.x</code>)</li>
<li><code class="prettyprint">~1.2.3-beta.2</code> := <code class="prettyprint">&gt;=1.2.3-beta.2 &lt;1.3.0</code> Note that prereleases in
the <code class="prettyprint">1.2.3</code> version will be allowed, if they are greater than or
equal to <code class="prettyprint">beta.2</code>.  So, <code class="prettyprint">1.2.3-beta.4</code> would be allowed, but
<code class="prettyprint">1.2.4-beta.2</code> would not, because it is a prerelease of a
different <code class="prettyprint">[major, minor, patch]</code> tuple.</li>
</ul>

<h4 id="caret-ranges-1-2-3-0-2-5-0-0-4">Caret Ranges <code class="prettyprint">^1.2.3</code> <code class="prettyprint">^0.2.5</code> <code class="prettyprint">^0.0.4</code></h4>

<p>Allows changes that do not modify the left-most non-zero digit in the
<code class="prettyprint">[major, minor, patch]</code> tuple.  In other words, this allows patch and
minor updates for versions <code class="prettyprint">1.0.0</code> and above, patch updates for
versions <code class="prettyprint">0.X &gt;=0.1.0</code>, and <em>no</em> updates for versions <code class="prettyprint">0.0.X</code>.</p>

<p>Many authors treat a <code class="prettyprint">0.x</code> version as if the <code class="prettyprint">x</code> were the major
&ldquo;breaking-change&rdquo; indicator.</p>

<p>Caret ranges are ideal when an author may make breaking changes
between <code class="prettyprint">0.2.4</code> and <code class="prettyprint">0.3.0</code> releases, which is a common practice.
However, it presumes that there will <em>not</em> be breaking changes between
<code class="prettyprint">0.2.4</code> and <code class="prettyprint">0.2.5</code>.  It allows for changes that are presumed to be
additive (but non-breaking), according to commonly observed practices.</p>

<ul>
<li><code class="prettyprint">^1.2.3</code> := <code class="prettyprint">&gt;=1.2.3 &lt;2.0.0</code></li>
<li><code class="prettyprint">^0.2.3</code> := <code class="prettyprint">&gt;=0.2.3 &lt;0.3.0</code></li>
<li><code class="prettyprint">^0.0.3</code> := <code class="prettyprint">&gt;=0.0.3 &lt;0.0.4</code></li>
<li><code class="prettyprint">^1.2.3-beta.2</code> := <code class="prettyprint">&gt;=1.2.3-beta.2 &lt;2.0.0</code> Note that prereleases in
the <code class="prettyprint">1.2.3</code> version will be allowed, if they are greater than or
equal to <code class="prettyprint">beta.2</code>.  So, <code class="prettyprint">1.2.3-beta.4</code> would be allowed, but
<code class="prettyprint">1.2.4-beta.2</code> would not, because it is a prerelease of a
different <code class="prettyprint">[major, minor, patch]</code> tuple.</li>
<li><code class="prettyprint">^0.0.3-beta</code> := <code class="prettyprint">&gt;=0.0.3-beta &lt;0.0.4</code>  Note that prereleases in the
<code class="prettyprint">0.0.3</code> version <em>only</em> will be allowed, if they are greater than or
equal to <code class="prettyprint">beta</code>.  So, <code class="prettyprint">0.0.3-pr.2</code> would be allowed.</li>
</ul>

<p>When parsing caret ranges, a missing <code class="prettyprint">patch</code> value desugars to the
number <code class="prettyprint">0</code>, but will allow flexibility within that value, even if the
major and minor versions are both <code class="prettyprint">0</code>.</p>

<ul>
<li><code class="prettyprint">^1.2.x</code> := <code class="prettyprint">&gt;=1.2.0 &lt;2.0.0</code></li>
<li><code class="prettyprint">^0.0.x</code> := <code class="prettyprint">&gt;=0.0.0 &lt;0.1.0</code></li>
<li><code class="prettyprint">^0.0</code> := <code class="prettyprint">&gt;=0.0.0 &lt;0.1.0</code></li>
</ul>

<p>A missing <code class="prettyprint">minor</code> and <code class="prettyprint">patch</code> values will desugar to zero, but also
allow flexibility within those values, even if the major version is
zero.</p>

<ul>
<li><code class="prettyprint">^1.x</code> := <code class="prettyprint">&gt;=1.0.0 &lt;2.0.0</code></li>
<li><code class="prettyprint">^0.x</code> := <code class="prettyprint">&gt;=0.0.0 &lt;1.0.0</code></li>
</ul>

<h3 id="range-grammar">Range Grammar</h3>

<p>Putting all this together, here is a Backus-Naur grammar for ranges,
for the benefit of parser authors:</p>
<pre class="highlight plaintext"><code>range-set  ::= range ( logical-or range ) *
logical-or ::= ( ' ' ) * '||' ( ' ' ) *
range      ::= hyphen | simple ( ' ' simple ) * | ''
hyphen     ::= partial ' - ' partial
simple     ::= primitive | partial | tilde | caret
primitive  ::= ( '&lt;' | '&gt;' | '&gt;=' | '&lt;=' | '=' | ) partial
partial    ::= xr ( '.' xr ( '.' xr qualifier ? )? )?
xr         ::= 'x' | 'X' | '*' | nr
nr         ::= '0' | ['1'-'9'] ( ['0'-'9'] ) *
tilde      ::= '~' partial
caret      ::= '^' partial
qualifier  ::= ( '-' pre )? ( '+' build )?
pre        ::= parts
build      ::= parts
parts      ::= part ( '.' part ) *
part       ::= nr | [-0-9A-Za-z]+
</code></pre>

<h2 id="functions">Functions</h2>

<p>All methods and classes take a final <code class="prettyprint">loose</code> boolean argument that, if
true, will be more forgiving about not-quite-valid semver strings.
The resulting output will always be 100% strict, of course.</p>

<p>Strict-mode Comparators and Ranges will be strict about the SemVer
strings that they parse.</p>

<ul>
<li><code class="prettyprint">valid(v)</code>: Return the parsed version, or null if it&rsquo;s not valid.</li>
<li><code class="prettyprint">inc(v, release)</code>: Return the version incremented by the release
type (<code class="prettyprint">major</code>,   <code class="prettyprint">premajor</code>, <code class="prettyprint">minor</code>, <code class="prettyprint">preminor</code>, <code class="prettyprint">patch</code>,
<code class="prettyprint">prepatch</code>, or <code class="prettyprint">prerelease</code>), or null if it&rsquo;s not valid

<ul>
<li><code class="prettyprint">premajor</code> in one call will bump the version up to the next major
version and down to a prerelease of that major version.
<code class="prettyprint">preminor</code>, and <code class="prettyprint">prepatch</code> work the same way.</li>
<li>If called from a non-prerelease version, the <code class="prettyprint">prerelease</code> will work the
same as <code class="prettyprint">prepatch</code>. It increments the patch version, then makes a
prerelease. If the input version is already a prerelease it simply
increments it.</li>
</ul></li>
<li><code class="prettyprint">prerelease(v)</code>: Returns an array of prerelease components, or null
if none exist. Example: <code class="prettyprint">prerelease(&#39;1.2.3-alpha.1&#39;) -&gt; [&#39;alpha&#39;, 1]</code></li>
<li><code class="prettyprint">major(v)</code>: Return the major version number.</li>
<li><code class="prettyprint">minor(v)</code>: Return the minor version number.</li>
<li><code class="prettyprint">patch(v)</code>: Return the patch version number.</li>
</ul>

<h3 id="comparison">Comparison</h3>

<ul>
<li><code class="prettyprint">gt(v1, v2)</code>: <code class="prettyprint">v1 &gt; v2</code></li>
<li><code class="prettyprint">gte(v1, v2)</code>: <code class="prettyprint">v1 &gt;= v2</code></li>
<li><code class="prettyprint">lt(v1, v2)</code>: <code class="prettyprint">v1 &lt; v2</code></li>
<li><code class="prettyprint">lte(v1, v2)</code>: <code class="prettyprint">v1 &lt;= v2</code></li>
<li><code class="prettyprint">eq(v1, v2)</code>: <code class="prettyprint">v1 == v2</code> This is true if they&rsquo;re logically equivalent,
even if they&rsquo;re not the exact same string.  You already know how to
compare strings.</li>
<li><code class="prettyprint">neq(v1, v2)</code>: <code class="prettyprint">v1 != v2</code> The opposite of <code class="prettyprint">eq</code>.</li>
<li><code class="prettyprint">cmp(v1, comparator, v2)</code>: Pass in a comparison string, and it&rsquo;ll call
the corresponding function above.  <code class="prettyprint">&quot;===&quot;</code> and <code class="prettyprint">&quot;!==&quot;</code> do simple
string comparison, but are included for completeness.  Throws if an
invalid comparison string is provided.</li>
<li><code class="prettyprint">compare(v1, v2)</code>: Return <code class="prettyprint">0</code> if <code class="prettyprint">v1 == v2</code>, or <code class="prettyprint">1</code> if <code class="prettyprint">v1</code> is greater, or <code class="prettyprint">-1</code> if
<code class="prettyprint">v2</code> is greater.  Sorts in ascending order if passed to <code class="prettyprint">Array.sort()</code>.</li>
<li><code class="prettyprint">rcompare(v1, v2)</code>: The reverse of compare.  Sorts an array of versions
in descending order when passed to <code class="prettyprint">Array.sort()</code>.</li>
<li><code class="prettyprint">diff(v1, v2)</code>: Returns difference between two versions by the release type
(<code class="prettyprint">major</code>, <code class="prettyprint">premajor</code>, <code class="prettyprint">minor</code>, <code class="prettyprint">preminor</code>, <code class="prettyprint">patch</code>, <code class="prettyprint">prepatch</code>, or <code class="prettyprint">prerelease</code>),
or null if the versions are the same.</li>
</ul>

<h3 id="ranges">Ranges</h3>

<ul>
<li><code class="prettyprint">validRange(range)</code>: Return the valid range or null if it&rsquo;s not valid</li>
<li><code class="prettyprint">satisfies(version, range)</code>: Return true if the version satisfies the
range.</li>
<li><code class="prettyprint">maxSatisfying(versions, range)</code>: Return the highest version in the list
that satisfies the range, or <code class="prettyprint">null</code> if none of them do.</li>
<li><code class="prettyprint">minSatisfying(versions, range)</code>: Return the lowest version in the list
that satisfies the range, or <code class="prettyprint">null</code> if none of them do.</li>
<li><code class="prettyprint">gtr(version, range)</code>: Return <code class="prettyprint">true</code> if version is greater than all the
versions possible in the range.</li>
<li><code class="prettyprint">ltr(version, range)</code>: Return <code class="prettyprint">true</code> if version is less than all the
versions possible in the range.</li>
<li><code class="prettyprint">outside(version, range, hilo)</code>: Return true if the version is outside
the bounds of the range in either the high or low direction.  The
<code class="prettyprint">hilo</code> argument must be either the string <code class="prettyprint">&#39;&gt;&#39;</code> or <code class="prettyprint">&#39;&lt;&#39;</code>.  (This is
the function called by <code class="prettyprint">gtr</code> and <code class="prettyprint">ltr</code>.)</li>
</ul>

<p>Note that, since ranges may be non-contiguous, a version might not be
greater than a range, less than a range, <em>or</em> satisfy a range!  For
example, the range <code class="prettyprint">1.2 &lt;1.2.9 || &gt;2.0.0</code> would have a hole from <code class="prettyprint">1.2.9</code>
until <code class="prettyprint">2.0.0</code>, so the version <code class="prettyprint">1.2.10</code> would not be greater than the
range (because <code class="prettyprint">2.0.1</code> satisfies, which is higher), nor less than the
range (since <code class="prettyprint">1.2.8</code> satisfies, which is lower), and it also does not
satisfy the range.</p>

<p>If you want to know if a version satisfies or does not satisfy a
range, use the <code class="prettyprint">satisfies(version, range)</code> function.</p>
