<h1 id="bson-parser">BSON parser</h1>

<p>If you don&rsquo;t yet know what BSON actually is, read <a href="http://bsonspec.org">the spec</a>.</p>

<p>This package can be used to serialize JSON documents into the BSON format or the other way around. If you want to use it within the browser, give <a href="https://github.com/substack/node-browserify">browserify</a> a try (it will help you add this package to your bundle). The current build is located in the <code class="prettyprint">browser_build/bson.js</code> file.</p>

<p>A simple example of how to use BSON in the browser:</p>
<pre class="highlight html"><code><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"./browser_build/bson.js"</span><span class="nt">&gt;&lt;/script&gt;</span>

<span class="nt">&lt;script&gt;</span>
  <span class="kd">function</span> <span class="nx">start</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">BSON</span> <span class="o">=</span> <span class="nx">bson</span><span class="p">().</span><span class="nx">BSON</span>
    <span class="kd">var</span> <span class="nx">Long</span> <span class="o">=</span> <span class="nx">bson</span><span class="p">().</span><span class="nx">Long</span>

    <span class="kd">var</span> <span class="nx">doc</span> <span class="o">=</span> <span class="p">{</span> <span class="na">long</span><span class="p">:</span> <span class="nx">Long</span><span class="p">.</span><span class="nx">fromNumber</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="p">}</span>

    <span class="c1">// Serialize a document</span>
    <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">BSON</span><span class="p">.</span><span class="nx">serialize</span><span class="p">(</span><span class="nx">doc</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
    <span class="c1">// De serialize it again</span>
    <span class="kd">var</span> <span class="nx">doc_2</span> <span class="o">=</span> <span class="nx">BSON</span><span class="p">.</span><span class="nx">deserialize</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
  <span class="p">}</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre>

<p>A simple example of how to use BSON in <code class="prettyprint">node.js</code>:</p>
<pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">bson</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'bson'</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">BSON</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">bson</span><span class="p">.</span><span class="nx">BSONPure</span><span class="p">.</span><span class="nx">BSON</span><span class="p">()</span>
<span class="kd">var</span> <span class="nx">Long</span> <span class="o">=</span> <span class="nx">bson</span><span class="p">.</span><span class="nx">BSONPure</span><span class="p">.</span><span class="nx">Long</span>

<span class="kd">var</span> <span class="nx">doc</span> <span class="o">=</span> <span class="p">{</span> <span class="na">long</span><span class="p">:</span> <span class="nx">Long</span><span class="p">.</span><span class="nx">fromNumber</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="p">}</span>

<span class="c1">// Serialize a document</span>
<span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">BSON</span><span class="p">.</span><span class="nx">serialize</span><span class="p">(</span><span class="nx">doc</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'data:'</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>

<span class="c1">// Deserialize the resulting Buffer</span>
<span class="kd">var</span> <span class="nx">doc_2</span> <span class="o">=</span> <span class="nx">BSON</span><span class="p">.</span><span class="nx">deserialize</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'doc_2:'</span><span class="p">,</span> <span class="nx">doc_2</span><span class="p">)</span>
</code></pre>

<h2 id="api">API</h2>

<h1 id="the-api-consists-of-two-simple-methods-to-serialize-deserialize-objects-to-from-bson-format">The API consists of two simple methods to serialize/deserialize objects to/from BSON format:</h1>

<h2 id="installation">Installation</h2>

<p><code class="prettyprint">npm install bson</code></p>

<h2 id="api">API</h2>

<h3 id="bson-serialization-and-deserialiation">BSON serialization and deserialiation</h3>

<p><strong><code class="prettyprint">new bson.BSONPure.BSON()</code></strong> - Creates a new BSON seralizer/deserializer you can use to serialize and deserialize BSON.</p>

<ul>
<li><p>BSON.serialize(object, checkKeys, asBuffer, serializeFunctions)</p>

<ul>
<li>@param {Object} object the Javascript object to serialize.</li>
<li>@param {Boolean} checkKeys the serializer will check if keys are valid.</li>
<li>@param {Boolean} asBuffer return the serialized object as a Buffer object <strong>(ignore)</strong>.</li>
<li>@param {Boolean} serializeFunctions serialize the javascript functions <strong>(default:false)</strong></li>
<li>@return {TypedArray/Array} returns a TypedArray or Array depending on what your browser supports</li>
</ul></li>
<li><p>BSON.deserialize(buffer, options, isArray)</p>

<ul>
<li>Options

<ul>
<li><strong>evalFunctions</strong> {Boolean, default:false}, evaluate functions in the BSON document scoped to the object deserialized.</li>
<li><strong>cacheFunctions</strong> {Boolean, default:false}, cache evaluated functions for reuse.</li>
<li><strong>cacheFunctionsCrc32</strong> {Boolean, default:false}, use a crc32 code for caching, otherwise use the string of the function.</li>
<li><strong>promoteBuffers</strong> {Boolean, default:false}, deserialize Binary data directly into node.js Buffer object.</li>
</ul></li>
<li>@param {TypedArray/Array} a TypedArray/Array containing the BSON data</li>
<li>@param {Object} [options] additional options used for the deserialization.</li>
<li>@param {Boolean} [isArray] ignore used for recursive parsing.</li>
<li>@return {Object} returns the deserialized Javascript Object.</li>
</ul></li>
</ul>

<h3 id="objectid">ObjectId</h3>

<p><strong><code class="prettyprint">bson.ObjectId.isValid(id)</code></strong> - Returns true if <code class="prettyprint">id</code> is a valid number or hexadecimal string representing an ObjectId.
<strong><code class="prettyprint">bson.ObjectId.createFromHexString(hexString)</code></strong> - Returns the ObjectId the <code class="prettyprint">hexString</code> represents.
<strong><code class="prettyprint">bson.ObjectId.createFromTime(time)</code></strong> - Returns an ObjectId containing the passed time.
* <code class="prettyprint">time</code> - A Unix timestamp (number of seconds since the epoch).</p>

<p><strong><code class="prettyprint">var objectId = new bson.ObjectId(id)</code></strong> - Creates a new <code class="prettyprint">ObjectId</code>.
* <code class="prettyprint">id</code> - Must either be a 24-character hex string or a 12 byte binary string.</p>

<p><strong><code class="prettyprint">objectId.toJSON()</code></strong>
<strong><code class="prettyprint">objectId.toString()</code></strong>
<strong><code class="prettyprint">objectId.toHexString()</code></strong> - Returns a hexadecimal string representation of the ObjectId.</p>

<p><strong><code class="prettyprint">objectId.equals(otherObjectId)</code></strong> - Returns true if the ObjectIds are the same, false otherwise.</p>

<p><strong><code class="prettyprint">objectId.getTimestamp()</code></strong> - Returns a <code class="prettyprint">Date</code> object containing the time the objectId was created for.</p>

<p><strong><code class="prettyprint">objectId.getTimestamp()</code></strong> - Returns a <code class="prettyprint">Date</code> object containing the time the objectId contains.</p>
