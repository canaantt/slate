var muri=require("../"),assert=require("assert");describe("muri",function(){it("must begin with mongodb://",function(s){assert["throws"](function(){muri("localhost:27017")},/Invalid mongodb uri/),assert.doesNotThrow(function(){muri("mongodb://localhost:27017")}),s()}),describe("user:password",function(s){it("is optional",function(s){var e="mongodb://local:27017",a=muri(e);assert.ok(!a.auth),s()}),it("parses properly",function(s){var e="mongodb://user:password@local:27017",a=muri(e);assert.ok(a.auth),assert.equal("user",a.auth.user),assert.equal("password",a.auth.pass),s()}),it("handles # in the username",function(s){var e="mongodb://us#er:password@local:27017",a=muri(e);assert.ok(a.auth),assert.equal("us#er",a.auth.user),assert.equal("password",a.auth.pass),s()}),it("handles # in the password",function(s){var e="mongodb://user:pa#ssword@local:27017",a=muri(e);assert.ok(a.auth),assert.equal("user",a.auth.user),assert.equal("pa#ssword",a.auth.pass),s()})}),describe("host",function(){it("must be specified",function(s){assert["throws"](function(){muri("mongodb://")},/Missing host/),assert["throws"](function(){muri("mongodb:///fake")},/Missing host/),assert["throws"](function(){muri("mongodb://?yep")},/Missing host/),assert["throws"](function(){muri("mongodb:///?yep")},/Missing host/);var e=muri("mongodb://local");assert.ok(Array.isArray(e.hosts)),assert.equal(1,e.hosts.length),assert.equal("local",e.hosts[0].host),s()}),it("supports replica sets",function(s){var e=muri("mongodb://local:27017,remote:27018,japan:99999");assert.ok(Array.isArray(e.hosts)),assert.equal(3,e.hosts.length),assert.equal("local",e.hosts[0].host),assert.equal(27017,e.hosts[0].port),assert.equal("remote",e.hosts[1].host),assert.equal(27018,e.hosts[1].port),assert.equal("japan",e.hosts[2].host),assert.equal(99999,e.hosts[2].port),s()})}),describe("port",function(){describe("with single host",function(){it("defaults to 27017 if not specified",function(s){var e=muri("mongodb://local/");assert.equal(27017,e.hosts[0].port),s()}),it("uses what is specified",function(s){var e=muri("mongodb://local:27018");assert.equal(27018,e.hosts[0].port),s()})}),describe("with replica sets",function(){var s;before(function(){s=muri("mongodb://local,remote:27018,another")}),it("defaults to 27017 if not specified",function(e){assert.equal(27017,s.hosts[0].port),assert.equal(27017,s.hosts[2].port),e()}),it("uses what is specified",function(e){assert.equal(27018,s.hosts[1].port),e()})})}),describe("database",function(){it("default",function(s){var e=muri("mongodb://localhost/");assert.equal("test",e.db);var e=muri("mongodb://localhost");assert.equal("test",e.db),s()}),it("is overridable",function(s){var e=muri("mongodb://localhost,a,x:34343,b/muri");assert.equal("muri",e.db),s()}),it("works with multiple specified protocols",function(s){var e="mongodb://localhost:27020/testing,mongodb://localhost:27019,mongodb://localhost:27018",a=muri(e);assert.equal("testing",a.db),s()})}),describe("querystring separator",function(){it("can be ; ",function(s){var e=muri("mongodb://muri/?replicaSet=myreplset;slaveOk=true;x=1");assert.ok(e.options),assert.equal(!0,e.options.slaveOk),assert.equal("myreplset",e.options.replicaSet),assert.equal(1,e.options.x),s()}),it("can be & ",function(s){var e=muri("mongodb://muri/?replicaSet=myreplset&slaveOk=true&x=1");assert.ok(e.options),assert.equal(!0,e.options.slaveOk),assert.equal("myreplset",e.options.replicaSet),assert.equal(1,e.options.x),s()})}),describe("readPref tags",function(){describe("with & ",function(){it("mongodb://localhost/?readPreferenceTags=dc:ny",function(s){var e=muri("mongodb://localhost/?readPreferenceTags=dc:ny");assert.equal("test",e.db),assert.deepEqual([{dc:"ny"}],e.options.readPreferenceTags),s()}),it("mongodb://localhost/?readPreferenceTags=dc:ny,rack:1",function(s){var e=muri("mongodb://localhost/?readPreferenceTags=dc:ny,rack:1");assert.deepEqual([{dc:"ny",rack:1}],e.options.readPreferenceTags),s()}),it("mongodb://localhost/?readPreferenceTags=dc:ny,rack:1&readPreferenceTags=dc:sf,rack:2",function(s){var e=muri("mongodb://localhost/?readPreferenceTags=dc:ny,rack:1&readPreferenceTags=dc:sf,rack:2");assert.deepEqual([{dc:"ny",rack:1},{dc:"sf",rack:2}],e.options.readPreferenceTags),s()}),it("mongodb://localhost/db?readPreferenceTags=dc:ny,rack:1&readPreferenceTags=dc:sf,rack:2&readPreferenceTags=",function(s){var e=muri("mongodb://localhost/db?readPreferenceTags=dc:ny,rack:1&readPreferenceTags=dc:sf,rack:2&readPreferenceTags=");assert.deepEqual([{dc:"ny",rack:1},{dc:"sf",rack:2}],e.options.readPreferenceTags),s()}),it("mongodb://localhost/?readPreferenceTags=dc:ny,rack:1&readPreferenceTags=dc:ny&readPreferenceTags=",function(s){var e=muri("mongodb://localhost/?readPreferenceTags=dc:ny,rack:1&readPreferenceTags=dc:ny&readPreferenceTags=");assert.deepEqual([{dc:"ny",rack:1},{dc:"ny"}],e.options.readPreferenceTags),s()})}),describe("with ; ",function(){it("mongodb://localhost/?readPreferenceTags=dc:ny,rack:1;readPreferenceTags=dc:sf,rack:2",function(s){var e=muri("mongodb://localhost/?readPreferenceTags=dc:ny,rack:1;readPreferenceTags=dc:sf,rack:2");assert.deepEqual([{dc:"ny",rack:1},{dc:"sf",rack:2}],e.options.readPreferenceTags),s()}),it("mongodb://localhost/db?readPreferenceTags=dc:ny,rack:1;readPreferenceTags=dc:sf,rack:2;readPreferenceTags=",function(s){var e=muri("mongodb://localhost/db?readPreferenceTags=dc:ny,rack:1;readPreferenceTags=dc:sf,rack:2;readPreferenceTags=");assert.deepEqual([{dc:"ny",rack:1},{dc:"sf",rack:2}],e.options.readPreferenceTags),s()}),it("mongodb://localhost/?readPreferenceTags=dc:ny,rack:1;readPreferenceTags=dc:ny;readPreferenceTags=",function(s){var e=muri("mongodb://localhost/?readPreferenceTags=dc:ny,rack:1;readPreferenceTags=dc:ny;readPreferenceTags=");assert.deepEqual([{dc:"ny",rack:1},{dc:"ny"}],e.options.readPreferenceTags),s()})})}),describe("unix domain sockets",function(){it("without auth",function(s){var e=muri("mongodb:///tmp/mongodb-27017.sock?safe=false");assert.equal(e.db,"test"),assert.ok(Array.isArray(e.hosts)),assert.equal(1,e.hosts.length),assert.equal(e.hosts[0].ipc,"/tmp/mongodb-27017.sock"),assert.equal(e.hosts[0].host,void 0),assert.equal(e.hosts[0].port,void 0),assert.equal(!1,e.options.safe),s()}),it("without auth with a database name",function(s){var e=muri("mongodb:///tmp/mongodb-27017.sock/tester?safe=false");assert.equal(e.db,"tester"),assert.ok(Array.isArray(e.hosts)),assert.equal(1,e.hosts.length),assert.equal(e.hosts[0].ipc,"/tmp/mongodb-27017.sock"),assert.equal(e.hosts[0].host,void 0),assert.equal(e.hosts[0].port,void 0),assert.equal(!1,e.options.safe),s()}),it("with auth",function(s){var e=muri("mongodb://user:password@/tmp/mongodb-27017.sock?safe=false");assert.equal(e.db,"admin"),assert.ok(Array.isArray(e.hosts)),assert.equal(1,e.hosts.length),assert.equal(e.hosts[0].ipc,"/tmp/mongodb-27017.sock"),assert.equal(e.hosts[0].host,void 0),assert.equal(e.hosts[0].port,void 0),assert.equal(!1,e.options.safe),s()}),it("with auth with a db name",function(s){var e=muri("mongodb://user:password@/tmp/mongodb-27017.sock/tester?safe=false");assert.equal(e.db,"tester"),assert.ok(Array.isArray(e.hosts)),assert.equal(1,e.hosts.length),assert.equal(e.hosts[0].ipc,"/tmp/mongodb-27017.sock"),assert.equal(e.hosts[0].host,void 0),assert.equal(e.hosts[0].port,void 0),assert.equal(!1,e.options.safe),s()}),it("with auth + repl sets",function(s){var e=muri("mongodb://user:password@/tmp/mongodb-27017.sock,/tmp/another-27018.sock?safe=false");assert.equal(e.db,"admin"),assert.ok(Array.isArray(e.hosts)),assert.equal(2,e.hosts.length),assert.equal(e.hosts[0].ipc,"/tmp/mongodb-27017.sock"),assert.equal(e.hosts[0].host,void 0),assert.equal(e.hosts[0].port,void 0),assert.equal(e.hosts[1].ipc,"/tmp/another-27018.sock"),assert.equal(e.hosts[1].host,void 0),assert.equal(e.hosts[1].port,void 0),assert.equal(!1,e.options.safe),s()}),it("with auth + repl sets with a db name",function(s){var e=muri("mongodb://user:password@/tmp/mongodb-27017.sock,/tmp/another-27018.sock/tester?safe=false");assert.equal(e.db,"tester"),assert.ok(Array.isArray(e.hosts)),assert.equal(2,e.hosts.length),assert.equal(e.hosts[0].ipc,"/tmp/mongodb-27017.sock"),assert.equal(e.hosts[0].host,void 0),assert.equal(e.hosts[0].port,void 0),assert.equal(e.hosts[1].ipc,"/tmp/another-27018.sock"),assert.equal(e.hosts[1].host,void 0),assert.equal(e.hosts[1].port,void 0),assert.equal(!1,e.options.safe),s()})}),it("all together now",function(s){var e="mongodb://u#ser:pas#s@local,remote:27018,japan:27019/neatdb";e+="?replicaSet=myreplset&journal=true&w=2&wtimeoutMS=50";var a=muri(e);assert.equal("u#ser",a.auth.user),assert.equal("pas#s",a.auth.pass),assert.equal("neatdb",a.db),assert.equal(3,a.hosts.length),assert.equal("local",a.hosts[0].host),assert.strictEqual(27017,a.hosts[0].port),assert.equal("remote",a.hosts[1].host),assert.strictEqual(27018,a.hosts[1].port),assert.equal("japan",a.hosts[2].host),assert.strictEqual(27019,a.hosts[2].port),assert.equal("myreplset",a.options.replicaSet),assert.equal(!0,a.options.journal),assert.equal(50,a.options.wtimeoutMS),s()}),it("ipv6",function(s){var e="mongodb://[::1]:27017/test",a=muri(e);assert.equal(1,a.hosts.length),assert.equal("::1",a.hosts[0].host),assert.equal(27017,a.hosts[0].port),s()}),it("has a version",function(s){assert.ok(muri.version),s()})});